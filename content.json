{"meta":{"title":"AOLLIU的博客","subtitle":"没什么理由,不去拼!","description":"河北理工大学10级,现就职于好奇心日报.","author":"AOLLIU","url":"//aolliu.win"},"pages":[{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/border1px.html","permalink":"//aolliu.win/assets/demo/border1px.html","excerpt":"","text":"日语50音 /*main*/ html{color:#000;background:#FFF}body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td,menu{margin:0;padding:0}table{border-collapse:collapse;border-spacing:0}fieldset,img{border:0}address,caption,cite,code,dfn,em,strong,th,var{font-style:normal;font-weight:400}ol,ul{list-style:none}caption,th{text-align:left}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:400}q:before,q:after{content:''}abbr,acronym{border:0;font-variant:normal}sup{vertical-align:text-top}sub{vertical-align:text-bottom}input,textarea,select{font-family:inherit;font-size:inherit;font-weight:inherit}input,textarea,select{*font-size:100%}legend{color:#000}html,body{-webkit-text-size-adjust:none;-webkit-touch-callout:none;vertical-align:middle;font-size:16px;background:#e6e6e6;position:relative;height:100%;font-family:Tahoma,Arial,\"Microsoft Yahei\",sans-serif}.clearfix:after{content:\" \";display:block;clear:both;visibility:hidden;line-height:0;height:0}input::-webkit-input-placeholder{color:#aaa}a,div{-webkit-tap-highlight-color:rgba(0,0,0,0)}a,a:active,a:hover{color:#0057af;text-decoration:none}header,.header{width:215px;height:58px;background:url(http://3.url.cn/qun/create_iphone/img/sprite.png) no-repeat transparent 0 0;color:#fff;line-height:58px;padding-left:64px;font-size:24px;-webkit-transform:scale(0.82) scale(0.82);-webkit-transform-origin:0 50%}.input-group{overflow:hidden;vertical-align:middle;line-height:16px;background-color:#fff;}#main-section{position:relative;height:100%;min-height:370px;overflow:hidden;}.input-group label{width:100px;padding:10px 0 10px 12px;display:inline-block;border-right:0;float:left;color:gray;-webkit-appearance:none;height:24px;line-height:24px;}.input-group .ui-select{margin-left:115px;padding:10px 24px 10px 15px;position:relative;}.input-group .select-btn{width:100%;height:24px;line-height:24px;color:#aaa;}.input-group .select-btn span.ui-text{text-align:right;display:inline-block;width:100%;white-space:nowrap;overflow:inherit;text-overflow:ellipsis;pointer-events:none;}.input-group .select-btn span.ui-icon{display:inline-block;position:absolute;top:50%;margin:-10px 0 0 -3px;width:18px;height:20px;right:7px;}.input-group .select-btn span.ui-icon .arrow{width:18px;height:18px;position:relative;display:inline-block;float:right;background:transparent;margin-right:-5px;margin-top:1px;}.input-group .select-btn span.ui-icon .arrow div{background:#ccc;position:absolute;width:3px;height:12px;}.input-group .select-btn span.ui-icon .arrow div.arrow1{left:19px;top:12px;-webkit-transform:rotate(-45deg) translate(0,-142%);}.input-group .select-btn span.ui-icon .arrow div.arrow2{left:-5px;top:19px;-webkit-transform:rotate(45deg) translate(0,-142%);}.seg-words{color:#6d6d72;height:20px;font-size:1em;text-shadow:0 1px #fff;padding:3px 0 6px 14px;} /*border-1px 部分*/ .border-1px{ position: relative; } .border-1px:before, .border-1px:after{ border-top: 1px solid #c8c7cc; content: ' '; display: block; width: 100%; position: absolute; left: 0; } .border-1px:before{ top: 0; display: none; } .border-1px:after{ bottom: 0; } @media (-webkit-min-device-pixel-ratio:1.5), (min-device-pixel-ratio: 1.5){ .border-1px:after,.border-1px:before{ -webkit-transform: scaleY(.7); -webkit-transform-origin: 0 0; transform: scaleY(.7); } .border-1px:after{ -webkit-transform-origin: left bottom; } } @media (-webkit-min-device-pixel-ratio:2), (min-device-pixel-ratio: 2){ .border-1px:after,.border-1px:before{ -webkit-transform: scaleY(.5); transform: scaleY(.5); } } あ行 あ ア (a) い イ (i) う ウ (u) え エ (e) お オ (o) か行 か カ (ka) き キ (ki) く ク (ku) け ケ (ke) こ コ (ko) さ行 さ サ (sa) し シ (shi) す ス (su) せ セ (se) そ ソ (so) た行 た タ (ta) ち チ (chi) つ ツ (tsu) て テ (te) と ト (to) な行 な ナ (na) に ニ (ni) ぬ ヌ (nu) ね ネ (ne) の ノ (no) は行 は ハ (ha) ひ ヒ (hi) ふ フ (fu) へ ヘ (he) ほ ホ (ho) ま行 ま マ (ma) み ミ (mi) む ム (mu) め メ (me) も モ (mo) や行 や ヤ (ya) い イ (i) ゆ ユ (yu) え エ (e) よ ヨ (yo) ら行 ら ラ (ra) り リ (ri) る ル (ru) れ レ (re) ろ ロ (ro) わ行 わ ワ (wa) い イ (i) う ウ (u) え エ (e) を ヲ (wo) ん ん ン (n)"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/hack_demo.html","permalink":"//aolliu.win/assets/demo/hack_demo.html","excerpt":"","text":"h3,h4{ text-align: center; } #main{ width: 350px; height: 100px; border: 1px solid #000; margin: 0 auto; } #main .box{ width: 100px; height: 100px; margin-left: 10px; position: relative; float: left; background: #333; color:#ddd; } #main .task1:hover{ z-index: 999; } #main .task2:hover{ z-index: 999; background: #999; } #main .task3:hover{ z-index: 999; background: #333; } 三个background为#333的box - 请在IE6，IE7中触发hover - box1 - 未设置backgorund box2 - background: #999 box3 - background: #333"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/jiugongge_demo.html","permalink":"//aolliu.win/assets/demo/jiugongge_demo.html","excerpt":"","text":"jiugongge_demo *{ margin:0; padding: 0; } table{ margin: 30px; border-collapse: collapse; } #test0{ margin: 30px; width: 200px; height: 200px; } #test0 div{ width: 50px; height: 50px; float: left; background: #eee; border: 5px solid #00f; text-align: center; line-height: 50px; color: #090; position: relative; } #test0 .lr_indent{ margin-left: -5px; margin-right: -5px; } #test0 .tb_indent{ margin-top: -5px; margin-bottom: -5px; } #test0 div:hover{ border: 5px solid #f00; z-index: 999; background: #eee; } #test1 td{ width: 50px; height: 50px; background: #eee; position: relative; border: 5px solid #00f; text-align: center; } #test1 td span{ color: #090; display:block; width: 50px; height: 50px; position: absolute; top: 0; left: 0; line-height: 50px; } #test1 td span:hover{ border: 5px solid #f00; margin-top:-5px; margin-left: -5px; } #test2 td{ width: 50px; height: 50px; background: #eee; border: 5px solid #00f; text-align: center; vertical-align: top; } #test2 td div{ position:relative; width: 50px; height: 50px; } #test2 td div span{ color: #090; display:block; width: 50px; height: 50px; position: absolute; top: 0; left: 0; line-height: 50px; } #test2 td div span:hover{ border: 5px solid #f00; margin-left: -5px; margin-top: -5px; } 1) div+负margin实现 1 2 3 4 5 6 7 8 9 2.1) table border-collapse: collapse实现 1 2 3 4 5 6 7 8 9 2.2) table思路改进 1 2 3 4 5 6 7 8 9"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/jiugongge_demo2.html","permalink":"//aolliu.win/assets/demo/jiugongge_demo2.html","excerpt":"","text":"九宫格（二）demo #main{ width: 170px; height:170px; background: blue; margin: 0 auto; } #main div{ width: 50px; line-height: 50px; text-align:center; background: #AAA; margin:5px 5px 0 0; } #main a{ width: 55px; line-height: 55px; float: left; padding: 0 0 5px 5px; margin: 0 -5px -5px 0; text-decoration: none; } #main a:hover{ background: red; } 1 2 3 4 5 6 7 8 9"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/jquery.js","permalink":"//aolliu.win/assets/demo/jquery.js","excerpt":"","text":"/*! jQuery v@1.8.0 jquery.com | jquery.org/license */ (function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&&a.nodeType===1){var e=\"data-\"+c.replace(I,\"-$1\").toLowerCase();d=a.getAttribute(e);if(typeof d==\"string\"){try{d=d===\"true\"?!0:d===\"false\"?!1:d===\"null\"?null:+d+\"\"===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b===\"data\"&&p.isEmptyObject(a[b]))continue;if(b!==\"toJSON\")return!1}return!0}function ba(){return!1}function bb(){return!0}function bh(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function bi(a,b){do a=a[b];while(a&&a.nodeType!==1);return a}function bj(a,b,c){b=b||0;if(p.isFunction(b))return p.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return p.grep(a,function(a,d){return a===b===c});if(typeof b==\"string\"){var d=p.grep(a,function(a){return a.nodeType===1});if(be.test(b))return p.filter(b,d,!c);b=p.filter(b,d)}return p.grep(a,function(a,d){return p.inArray(a,b)>=0===c})}function bk(a){var b=bl.split(\"|\"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function bC(a,b){return a.getElementsByTagName(b)[0]||a.appendChild(a.ownerDocument.createElement(b))}function bD(a,b){if(b.nodeType!==1||!p.hasData(a))return;var c,d,e,f=p._data(a),g=p._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;d=3?f=[null,a,null]:f=u.exec(a);if(f&&(f[1]||!c)){if(f[1])return c=c instanceof p?c[0]:c,i=c&&c.nodeType?c.ownerDocument||c:e,a=p.parseHTML(f[1],i,!0),v.test(f[1])&&p.isPlainObject(c)&&this.attr.call(a,c,!0),p.merge(this,a);g=e.getElementById(f[2]);if(g&&g.parentNode){if(g.id!==f[2])return d.find(a);this.length=1,this[0]=g}return this.context=e,this.selector=a,this}return!c||c.jquery?(c||d).find(a):this.constructor(c).find(a)}return p.isFunction(a)?d.ready(a):(a.selector!==b&&(this.selector=a.selector,this.context=a.context),p.makeArray(a,this))},selector:\"\",jquery:\"1.8.0\",length:0,size:function(){return this.length},toArray:function(){return k.call(this)},get:function(a){return a==null?this.toArray():a0)return;d.resolveWith(e,[p]),p.fn.trigger&&p(e).trigger(\"ready\").off(\"ready\")},isFunction:function(a){return p.type(a)===\"function\"},isArray:Array.isArray||function(a){return p.type(a)===\"array\"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):E[m.call(a)]||\"object\"},isPlainObject:function(a){if(!a||p.type(a)!==\"object\"||a.nodeType||p.isWindow(a))return!1;try{if(a.constructor&&!n.call(a,\"constructor\")&&!n.call(a.constructor.prototype,\"isPrototypeOf\"))return!1}catch(c){return!1}var d;for(d in a);return d===b||n.call(a,d)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},error:function(a){throw new Error(a)},parseHTML:function(a,b,c){var d;return!a||typeof a!=\"string\"?null:(typeof b==\"boolean\"&&(c=b,b=0),b=b||e,(d=v.exec(a))?[b.createElement(d[1])]:(d=p.buildFragment([a],b,c?null:[]),p.merge([],(d.cacheable?p.clone(d.fragment):d.fragment).childNodes)))},parseJSON:function(b){if(!b||typeof b!=\"string\")return null;b=p.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(w.test(b.replace(y,\"@\").replace(z,\"]\").replace(x,\"\")))return(new Function(\"return \"+b))();p.error(\"Invalid JSON: \"+b)},parseXML:function(c){var d,e;if(!c||typeof c!=\"string\")return null;try{a.DOMParser?(e=new DOMParser,d=e.parseFromString(c,\"text/xml\")):(d=new ActiveXObject(\"Microsoft.XMLDOM\"),d.async=\"false\",d.loadXML(c))}catch(f){d=b}return(!d||!d.documentElement||d.getElementsByTagName(\"parsererror\").length)&&p.error(\"Invalid XML: \"+c),d},noop:function(){},globalEval:function(b){b&&r.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(A,\"ms-\").replace(B,C)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var e,f=0,g=a.length,h=g===b||p.isFunction(a);if(d){if(h){for(e in a)if(c.apply(a[e],d)===!1)break}else for(;f1){h=new Array(d),i=new Array(d),j=new Array(d);for(;b1)},removeProp:function(a){return a=p.propFix[a]||a,this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,f,g,h;if(p.isFunction(a))return this.each(function(b){p(this).addClass(a.call(this,b,this.className))});if(a&&typeof a==\"string\"){b=a.split(s);for(c=0,d=this.length;c-1)d=d.replace(\" \"+c[f]+\" \",\" \");e.className=a?p.trim(d):\"\"}}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b==\"boolean\";return p.isFunction(a)?this.each(function(c){p(this).toggleClass(a.call(this,c,this.className,b),b)}):this.each(function(){if(c===\"string\"){var e,f=0,g=p(this),h=b,i=a.split(s);while(e=i[f++])h=d?h:!g.hasClass(e),g[h?\"addClass\":\"removeClass\"](e)}else if(c===\"undefined\"||c===\"boolean\")this.className&&p._data(this,\"__className__\",this.className),this.className=this.className||a===!1?\"\":p._data(this,\"__className__\")||\"\"})},hasClass:function(a){var b=\" \"+a+\" \",c=0,d=this.length;for(;c-1)return!0;return!1},val:function(a){var c,d,e,f=this[0];if(!arguments.length){if(f)return c=p.valHooks[f.type]||p.valHooks[f.nodeName.toLowerCase()],c&&\"get\"in c&&(d=c.get(f,\"value\"))!==b?d:(d=f.value,typeof d==\"string\"?d.replace(P,\"\"):d==null?\"\":d);return}return e=p.isFunction(a),this.each(function(d){var f,g=p(this);if(this.nodeType!==1)return;e?f=a.call(this,d,g.val()):f=a,f==null?f=\"\":typeof f==\"number\"?f+=\"\":p.isArray(f)&&(f=p.map(f,function(a){return a==null?\"\":a+\"\"})),c=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()];if(!c||!(\"set\"in c)||c.set(this,f,\"value\")===b)this.value=f})}}),p.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,f=a.selectedIndex,g=[],h=a.options,i=a.type===\"select-one\";if(f=0}),c.length||(a.selectedIndex=-1),c}}},attrFn:{},attr:function(a,c,d,e){var f,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return;if(e&&p.isFunction(p.fn[c]))return p(a)[c](d);if(typeof a.getAttribute==\"undefined\")return p.prop(a,c,d);h=i!==1||!p.isXMLDoc(a),h&&(c=c.toLowerCase(),g=p.attrHooks[c]||(T.test(c)?M:L));if(d!==b){if(d===null){p.removeAttr(a,c);return}return g&&\"set\"in g&&h&&(f=g.set(a,d,c))!==b?f:(a.setAttribute(c,\"\"+d),d)}return g&&\"get\"in g&&h&&(f=g.get(a,c))!==null?f:(f=a.getAttribute(c),f===null?b:f)},removeAttr:function(a,b){var c,d,e,f,g=0;if(b&&a.nodeType===1){d=b.split(s);for(;g=0}})});var V=/^(?:textarea|input|select)$/i,W=/^([^\\.]*|)(?:\\.(.+)|)$/,X=/(?:^|\\s)hover(\\.\\S+|)\\b/,Y=/^key/,Z=/^(?:mouse|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=function(a){return p.event.special.hover?a:a.replace(X,\"mouseenter$1 mouseleave$1\")};p.event={add:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,q,r;if(a.nodeType===3||a.nodeType===8||!c||!d||!(g=p._data(a)))return;d.handler&&(o=d,d=o.handler,f=o.selector),d.guid||(d.guid=p.guid++),i=g.events,i||(g.events=i={}),h=g.handle,h||(g.handle=h=function(a){return typeof p!=\"undefined\"&&(!a||p.event.triggered!==a.type)?p.event.dispatch.apply(h.elem,arguments):b},h.elem=a),c=p.trim(_(c)).split(\" \");for(j=0;j=0&&(s=s.slice(0,-1),i=!0),s.indexOf(\".\")>=0&&(t=s.split(\".\"),s=t.shift(),t.sort());if((!f||p.event.customEvent[s])&&!p.event.global[s])return;c=typeof c==\"object\"?c[p.expando]?c:new p.Event(s,c):new p.Event(s),c.type=s,c.isTrigger=!0,c.exclusive=i,c.namespace=t.join(\".\"),c.namespace_re=c.namespace?new RegExp(\"(^|\\\\.)\"+t.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,m=s.indexOf(\":\")q&&u.push({elem:this,matches:o.slice(q)});for(d=0;d+~]|\"+x,\"i\")},M={},N=[],O={},P=[],Q=function(a){return a.sizzleFilter=!0,a},R=function(a){return function(b){return b.nodeName.toLowerCase()===\"input\"&&b.type===a}},S=function(a){return function(b){var c=b.nodeName.toLowerCase();return(c===\"input\"||c===\"button\")&&b.type===a}},T=function(a){var b=!1,c=h.createElement(\"div\");try{b=a(c)}catch(d){}return c=null,b},U=T(function(a){a.innerHTML=\"\";var b=typeof a.lastChild.getAttribute(\"multiple\");return b!==\"boolean\"&&b!==\"string\"}),V=T(function(a){a.id=q+0,a.innerHTML=\"\",i.insertBefore(a,i.firstChild);var b=h.getElementsByName&&h.getElementsByName(q).length===2+h.getElementsByName(q+0).length;return g=!h.getElementById(q),i.removeChild(a),b}),W=T(function(a){return a.appendChild(h.createComment(\"\")),a.getElementsByTagName(\"*\").length===0}),X=T(function(a){return a.innerHTML=\"\",a.firstChild&&typeof a.firstChild.getAttribute!==j&&a.firstChild.getAttribute(\"href\")===\"#\"}),Y=T(function(a){return a.innerHTML=\"\",!a.getElementsByClassName||a.getElementsByClassName(\"e\").length===0?!1:(a.lastChild.className=\"e\",a.getElementsByClassName(\"e\").length!==1)}),Z=function(a,b,c,d){c=c||[],b=b||h;var e,f,g,i,j=b.nodeType;if(j!==1&&j!==9)return[];if(!a||typeof a!=\"string\")return c;g=ba(b);if(!g&&!d)if(e=F.exec(a))if(i=e[1]){if(j===9){f=b.getElementById(i);if(!f||!f.parentNode)return c;if(f.id===i)return c.push(f),c}else if(b.ownerDocument&&(f=b.ownerDocument.getElementById(i))&&bb(b,f)&&f.id===i)return c.push(f),c}else{if(e[2])return o.apply(c,n.call(b.getElementsByTagName(a),0)),c;if((i=e[3])&&Y&&b.getElementsByClassName)return o.apply(c,n.call(b.getElementsByClassName(i),0)),c}return bm(a,b,c,d,g)},$=Z.selectors={cacheLength:50,match:L,order:[\"ID\",\"TAG\"],attrHandle:{},createPseudo:Q,find:{ID:g?function(a,b,c){if(typeof b.getElementById!==j&&!c){var d=b.getElementById(a);return d&&d.parentNode?[d]:[]}}:function(a,c,d){if(typeof c.getElementById!==j&&!d){var e=c.getElementById(a);return e?e.id===a||typeof e.getAttributeNode!==j&&e.getAttributeNode(\"id\").value===a?[e]:b:[]}},TAG:W?function(a,b){if(typeof b.getElementsByTagName!==j)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if(a===\"*\"){var d,e=[],f=0;for(;d=c[f];f++)d.nodeType===1&&e.push(d);return e}return c}},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(K,\"\"),a[3]=(a[4]||a[5]||\"\").replace(K,\"\"),a[2]===\"~=\"&&(a[3]=\" \"+a[3]+\" \"),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),a[1]===\"nth\"?(a[2]||Z.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*(a[2]===\"even\"||a[2]===\"odd\")),a[4]=+(a[6]+a[7]||a[2]===\"odd\")):a[2]&&Z.error(a[0]),a},PSEUDO:function(a){var b,c=a[4];return L.CHILD.test(a[0])?null:(c&&(b=D.exec(c))&&b.pop()&&(a[0]=a[0].slice(0,b[0].length-c.length-1),c=b[0].slice(0,-1)),a.splice(2,3,c||a[3]),a)}},filter:{ID:g?function(a){return a=a.replace(K,\"\"),function(b){return b.getAttribute(\"id\")===a}}:function(a){return a=a.replace(K,\"\"),function(b){var c=typeof b.getAttributeNode!==j&&b.getAttributeNode(\"id\");return c&&c.value===a}},TAG:function(a){return a===\"*\"?function(){return!0}:(a=a.replace(K,\"\").toLowerCase(),function(b){return b.nodeName&&b.nodeName.toLowerCase()===a})},CLASS:function(a){var b=M[a];return b||(b=M[a]=new RegExp(\"(^|\"+r+\")\"+a+\"(\"+r+\"|$)\"),N.push(a),N.length>$.cacheLength&&delete M[N.shift()]),function(a){return b.test(a.className||typeof a.getAttribute!==j&&a.getAttribute(\"class\")||\"\")}},ATTR:function(a,b,c){return b?function(d){var e=Z.attr(d,a),f=e+\"\";if(e==null)return b===\"!=\";switch(b){case\"=\":return f===c;case\"!=\":return f!==c;case\"^=\":return c&&f.indexOf(c)===0;case\"*=\":return c&&f.indexOf(c)>-1;case\"$=\":return c&&f.substr(f.length-c.length)===c;case\"~=\":return(\" \"+f+\" \").indexOf(c)>-1;case\"|=\":return f===c||f.substr(0,c.length+1)===c+\"-\"}}:function(b){return Z.attr(b,a)!=null}},CHILD:function(a,b,c,d){if(a===\"nth\"){var e=m++;return function(a){var b,f,g=0,h=a;if(c===1&&d===0)return!0;b=a.parentNode;if(b&&(b[q]!==e||!a.sizset)){for(h=b.firstChild;h;h=h.nextSibling)if(h.nodeType===1){h.sizset=++g;if(h===a)break}b[q]=e}return f=a.sizset-d,c===0?f===0:f%c===0&&f/c>=0}}return function(b){var c=b;switch(a){case\"only\":case\"first\":while(c=c.previousSibling)if(c.nodeType===1)return!1;if(a===\"first\")return!0;c=b;case\"last\":while(c=c.nextSibling)if(c.nodeType===1)return!1;return!0}}},PSEUDO:function(a,b,c,d){var e=$.pseudos[a]||$.pseudos[a.toLowerCase()];return e||Z.error(\"unsupported pseudo: \"+a),e.sizzleFilter?e(b,c,d):e}},pseudos:{not:Q(function(a,b,c){var d=bl(a.replace(A,\"$1\"),b,c);return function(a){return!d(a)}}),enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return b===\"input\"&&!!a.checked||b===\"option\"&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},parent:function(a){return!$.pseudos.empty(a)},empty:function(a){var b;a=a.firstChild;while(a){if(a.nodeName>\"@\"||(b=a.nodeType)===3||b===4)return!1;a=a.nextSibling}return!0},contains:Q(function(a){return function(b){return(b.textContent||b.innerText||bc(b)).indexOf(a)>-1}}),has:Q(function(a){return function(b){return Z(a,b).length>0}}),header:function(a){return I.test(a.nodeName)},text:function(a){var b,c;return a.nodeName.toLowerCase()===\"input\"&&(b=a.type)===\"text\"&&((c=a.getAttribute(\"type\"))==null||c.toLowerCase()===b)},radio:R(\"radio\"),checkbox:R(\"checkbox\"),file:R(\"file\"),password:R(\"password\"),image:R(\"image\"),submit:S(\"submit\"),reset:S(\"reset\"),button:function(a){var b=a.nodeName.toLowerCase();return b===\"input\"&&a.type===\"button\"||b===\"button\"},input:function(a){return J.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&&(!b.hasFocus||b.hasFocus())&&(!!a.type||!!a.href)},active:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b,c){return c?a.slice(1):[a[0]]},last:function(a,b,c){var d=a.pop();return c?a:[d]},even:function(a,b,c){var d=[],e=c?1:0,f=a.length;for(;e$.cacheLength&&delete O[P.shift()],g};Z.matches=function(a,b){return Z(a,null,null,b)},Z.matchesSelector=function(a,b){return Z(b,null,null,[a]).length>0};var bm=function(a,b,e,f,g){a=a.replace(A,\"$1\");var h,i,j,k,l,m,p,q,r,s=a.match(C),t=a.match(E),u=b.nodeType;if(L.POS.test(a))return bf(a,b,e,f,s);if(f)h=n.call(f,0);else if(s&&s.length===1){if(t.length>1&&u===9&&!g&&(s=L.ID.exec(t[0]))){b=$.find.ID(s[1],b,g)[0];if(!b)return e;a=a.slice(t.shift().length)}q=(s=G.exec(t[0]))&&!s.index&&b.parentNode||b,r=t.pop(),m=r.split(\":not\")[0];for(j=0,k=$.order.length;j\",a.querySelectorAll(\"[selected]\").length||e.push(\"\\\\[\"+r+\"*(?:checked|disabled|ismap|multiple|readonly|selected|value)\"),a.querySelectorAll(\":checked\").length||e.push(\":checked\")}),T(function(a){a.innerHTML=\"\",a.querySelectorAll(\"[test^='']\").length&&e.push(\"[*^$]=\"+r+\"*(?:\\\"\\\"|'')\"),a.innerHTML=\"\",a.querySelectorAll(\":enabled\").length||e.push(\":enabled\",\":disabled\")}),e=e.length&&new RegExp(e.join(\"|\")),bm=function(a,d,f,g,h){if(!g&&!h&&(!e||!e.test(a)))if(d.nodeType===9)try{return o.apply(f,n.call(d.querySelectorAll(a),0)),f}catch(i){}else if(d.nodeType===1&&d.nodeName.toLowerCase()!==\"object\"){var j=d.getAttribute(\"id\"),k=j||q,l=G.test(a)&&d.parentNode||d;j?k=k.replace(c,\"\\\\$&\"):d.setAttribute(\"id\",k);try{return o.apply(f,n.call(l.querySelectorAll(a.replace(C,\"[id='\"+k+\"'] $&\")),0)),f}catch(i){}finally{j||d.removeAttribute(\"id\")}}return b(a,d,f,g,h)},g&&(T(function(b){a=g.call(b,\"div\");try{g.call(b,\"[test!='']:sizzle\"),f.push($.match.PSEUDO)}catch(c){}}),f=new RegExp(f.join(\"|\")),Z.matchesSelector=function(b,c){c=c.replace(d,\"='$1']\");if(!ba(b)&&!f.test(c)&&(!e||!e.test(c)))try{var h=g.call(b,c);if(h||a||b.document&&b.document.nodeType!==11)return h}catch(i){}return Z(c,null,null,[b]).length>0})}(),Z.attr=p.attr,p.find=Z,p.expr=Z.selectors,p.expr[\":\"]=p.expr.pseudos,p.unique=Z.uniqueSort,p.text=Z.getText,p.isXMLDoc=Z.isXML,p.contains=Z.contains}(a);var bc=/Until$/,bd=/^(?:parents|prev(?:Until|All))/,be=/^.[^:#\\[\\.,]*$/,bf=p.expr.match.needsContext,bg={children:!0,contents:!0,next:!0,prev:!0};p.fn.extend({find:function(a){var b,c,d,e,f,g,h=this;if(typeof a!=\"string\")return p(a).filter(function(){for(b=0,c=h.length;b0)},closest:function(a,b){var c,d=0,e=this.length,f=[],g=bf.test(a)||typeof a!=\"string\"?p(a,b||this.context):0;for(;d-1:p.find.matchesSelector(c,a)){f.push(c);break}c=c.parentNode}}return f=f.length>1?p.unique(f):f,this.pushStack(f,\"closest\",a)},index:function(a){return a?typeof a==\"string\"?p.inArray(this[0],p(a)):p.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(a,b){var c=typeof a==\"string\"?p(a,b):p.makeArray(a&&a.nodeType?[a]:a),d=p.merge(this.get(),c);return this.pushStack(bh(c[0])||bh(d[0])?d:p.unique(d))},addBack:function(a){return this.add(a==null?this.prevObject:this.prevObject.filter(a))}}),p.fn.andSelf=p.fn.addBack,p.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return p.dir(a,\"parentNode\")},parentsUntil:function(a,b,c){return p.dir(a,\"parentNode\",c)},next:function(a){return bi(a,\"nextSibling\")},prev:function(a){return bi(a,\"previousSibling\")},nextAll:function(a){return p.dir(a,\"nextSibling\")},prevAll:function(a){return p.dir(a,\"previousSibling\")},nextUntil:function(a,b,c){return p.dir(a,\"nextSibling\",c)},prevUntil:function(a,b,c){return p.dir(a,\"previousSibling\",c)},siblings:function(a){return p.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return p.sibling(a.firstChild)},contents:function(a){return p.nodeName(a,\"iframe\")?a.contentDocument||a.contentWindow.document:p.merge([],a.childNodes)}},function(a,b){p.fn[a]=function(c,d){var e=p.map(this,b,c);return bc.test(a)||(d=c),d&&typeof d==\"string\"&&(e=p.filter(d,e)),e=this.length>1&&!bg[a]?p.unique(e):e,this.length>1&&bd.test(a)&&(e=e.reverse()),this.pushStack(e,a,k.call(arguments).join(\",\"))}}),p.extend({filter:function(a,b,c){return c&&(a=\":not(\"+a+\")\"),b.length===1?p.find.matchesSelector(b[0],a)?[b[0]]:[]:p.find.matches(a,b)},dir:function(a,c,d){var e=[],f=a[c];while(f&&f.nodeType!==9&&(d===b||f.nodeType!==1||!p(f).is(d)))f.nodeType===1&&e.push(f),f=f[c];return e},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var bl=\"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video\",bm=/ jQuery\\d+=\"(?:null|\\d+)\"/g,bn=/^\\s+/,bo=/]*)\\/>/gi,bp=/\",\"\"],legend:[1,\"\",\"\"],thead:[1,\"\",\"\"],tr:[2,\"\",\"\"],td:[3,\"\",\"\"],col:[2,\"\",\"\"],area:[1,\"\",\"\"],_default:[0,\"\",\"\"]},bA=bk(e),bB=bA.appendChild(e.createElement(\"div\"));bz.optgroup=bz.option,bz.tbody=bz.tfoot=bz.colgroup=bz.caption=bz.thead,bz.th=bz.td,p.support.htmlSerialize||(bz._default=[1,\"X\",\"\"]),p.fn.extend({text:function(a){return p.access(this,function(a){return a===b?p.text(this):this.empty().append((this[0]&&this[0].ownerDocument||e).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(p.isFunction(a))return this.each(function(b){p(this).wrapAll(a.call(this,b))});if(this[0]){var b=p(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return p.isFunction(a)?this.each(function(b){p(this).wrapInner(a.call(this,b))}):this.each(function(){var b=p(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=p.isFunction(a);return this.each(function(c){p(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,\"body\")||p(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(a,this.firstChild)})},before:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(a,this),\"before\",this.selector)}},after:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(this,a),\"after\",this.selector)}},remove:function(a,b){var c,d=0;for(;(c=this[d])!=null;d++)if(!a||p.filter(a,[c]).length)!b&&c.nodeType===1&&(p.cleanData(c.getElementsByTagName(\"*\")),p.cleanData([c])),c.parentNode&&c.parentNode.removeChild(c);return this},empty:function(){var a,b=0;for(;(a=this[b])!=null;b++){a.nodeType===1&&p.cleanData(a.getElementsByTagName(\"*\"));while(a.firstChild)a.removeChild(a.firstChild)}return this},clone:function(a,b){return a=a==null?!1:a,b=b==null?a:b,this.map(function(){return p.clone(this,a,b)})},html:function(a){return p.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(bm,\"\"):b;if(typeof a==\"string\"&&!bs.test(a)&&(p.support.htmlSerialize||!bu.test(a))&&(p.support.leadingWhitespace||!bn.test(a))&&!bz[(bp.exec(a)||[\"\",\"\"])[1].toLowerCase()]){a=a.replace(bo,\"\");try{for(;d1&&typeof j==\"string\"&&bw.test(j))return this.each(function(){p(this).domManip(a,c,d)});if(p.isFunction(j))return this.each(function(e){var f=p(this);a[0]=j.call(this,e,c?f.html():b),f.domManip(a,c,d)});if(this[0]){e=p.buildFragment(a,this,k),g=e.fragment,f=g.firstChild,g.childNodes.length===1&&(g=f);if(f){c=c&&p.nodeName(f,\"tr\");for(h=e.cacheable||l-1;i=0;--f)p.nodeName(n[f],\"tbody\")&&!n[f].childNodes.length&&n[f].parentNode.removeChild(n[f])}!p.support.leadingWhitespace&&bn.test(h)&&l.insertBefore(b.createTextNode(bn.exec(h)[0]),l.firstChild),h=l.childNodes,l=g.lastChild}h.nodeType?t.push(h):t=p.merge(t,h)}l&&(g.removeChild(l),h=l=g=null);if(!p.support.appendChecked)for(s=0;(h=t[s])!=null;s++)p.nodeName(h,\"input\")?bG(h):typeof h.getElementsByTagName!=\"undefined\"&&p.grep(h.getElementsByTagName(\"input\"),bG);if(c){q=function(a){if(!a.type||bx.test(a.type))return d?d.push(a.parentNode?a.parentNode.removeChild(a):a):c.appendChild(a)};for(s=0;(h=t[s])!=null;s++)if(!p.nodeName(h,\"script\")||!q(h))c.appendChild(h),typeof h.getElementsByTagName!=\"undefined\"&&(r=p.grep(p.merge([],h.getElementsByTagName(\"script\")),q),t.splice.apply(t,[s+1,0].concat(r)),s+=r.length)}return t},cleanData:function(a,b){var c,d,e,f,g=0,h=p.expando,i=p.cache,j=p.support.deleteExpando,k=p.event.special;for(;(e=a[g])!=null;g++)if(b||p.acceptData(e)){d=e[h],c=d&&i[d];if(c){if(c.events)for(f in c.events)k[f]?p.event.remove(e,f):p.removeEvent(e,f,c.handle);i[d]&&(delete i[d],j?delete e[h]:e.removeAttribute?e.removeAttribute(h):e[h]=null,p.deletedIds.push(d))}}}}),function(){var a,b;p.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \\/]([\\w.]+)/.exec(a)||/(webkit)[ \\/]([\\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \\/]([\\w.]+)/.exec(a)||/(msie) ([\\w.]+)/.exec(a)||a.indexOf(\"compatible\")1)},show:function(){return bZ(this,!0)},hide:function(){return bZ(this)},toggle:function(a,b){var c=typeof a==\"boolean\";return p.isFunction(a)&&p.isFunction(b)?bW.apply(this,arguments):this.each(function(){(c?a:bY(this))?p(this).show():p(this).hide()})}}),p.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bH(a,\"opacity\");return c===\"\"?\"1\":c}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":p.support.cssFloat?\"cssFloat\":\"styleFloat\"},style:function(a,c,d,e){if(!a||a.nodeType===3||a.nodeType===8||!a.style)return;var f,g,h,i=p.camelCase(c),j=a.style;c=p.cssProps[i]||(p.cssProps[i]=bX(j,i)),h=p.cssHooks[c]||p.cssHooks[i];if(d===b)return h&&\"get\"in h&&(f=h.get(a,!1,e))!==b?f:j[c];g=typeof d,g===\"string\"&&(f=bQ.exec(d))&&(d=(f[1]+1)*f[2]+parseFloat(p.css(a,c)),g=\"number\");if(d==null||g===\"number\"&&isNaN(d))return;g===\"number\"&&!p.cssNumber[i]&&(d+=\"px\");if(!h||!(\"set\"in h)||(d=h.set(a,d,e))!==b)try{j[c]=d}catch(k){}},css:function(a,c,d,e){var f,g,h,i=p.camelCase(c);return c=p.cssProps[i]||(p.cssProps[i]=bX(a.style,i)),h=p.cssHooks[c]||p.cssHooks[i],h&&\"get\"in h&&(f=h.get(a,!0,e)),f===b&&(f=bH(a,c)),f===\"normal\"&&c in bT&&(f=bT[c]),d||e!==b?(g=parseFloat(f),d||p.isNumeric(g)?g||0:f):f},swap:function(a,b,c){var d,e,f={};for(e in b)f[e]=a.style[e],a.style[e]=b[e];d=c.call(a);for(e in b)a.style[e]=f[e];return d}}),a.getComputedStyle?bH=function(a,b){var c,d,e,f,g=getComputedStyle(a,null),h=a.style;return g&&(c=g[b],c===\"\"&&!p.contains(a.ownerDocument.documentElement,a)&&(c=p.style(a,b)),bP.test(c)&&bN.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=c,c=g.width,h.width=d,h.minWidth=e,h.maxWidth=f)),c}:e.documentElement.currentStyle&&(bH=function(a,b){var c,d,e=a.currentStyle&&a.currentStyle[b],f=a.style;return e==null&&f&&f[b]&&(e=f[b]),bP.test(e)&&!bM.test(b)&&(c=f.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b===\"fontSize\"?\"1em\":e,e=f.pixelLeft+\"px\",f.left=c,d&&(a.runtimeStyle.left=d)),e===\"\"?\"auto\":e}),p.each([\"height\",\"width\"],function(a,b){p.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth!==0||bH(a,\"display\")!==\"none\"?ca(a,b,d):p.swap(a,bS,function(){return ca(a,b,d)})},set:function(a,c,d){return b$(a,c,d?b_(a,b,d,p.support.boxSizing&&p.css(a,\"boxSizing\")===\"border-box\"):0)}}}),p.support.opacity||(p.cssHooks.opacity={get:function(a,b){return bL.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||\"\")?.01*parseFloat(RegExp.$1)+\"\":b?\"1\":\"\"},set:function(a,b){var c=a.style,d=a.currentStyle,e=p.isNumeric(b)?\"alpha(opacity=\"+b*100+\")\":\"\",f=d&&d.filter||c.filter||\"\";c.zoom=1;if(b>=1&&p.trim(f.replace(bK,\"\"))===\"\"&&c.removeAttribute){c.removeAttribute(\"filter\");if(d&&!d.filter)return}c.filter=bK.test(f)?f.replace(bK,e):f+\" \"+e}}),p(function(){p.support.reliableMarginRight||(p.cssHooks.marginRight={get:function(a,b){return p.swap(a,{display:\"inline-block\"},function(){if(b)return bH(a,\"marginRight\")})}}),!p.support.pixelPosition&&p.fn.position&&p.each([\"top\",\"left\"],function(a,b){p.cssHooks[b]={get:function(a,c){if(c){var d=bH(a,b);return bP.test(d)?p(a).position()[b]+\"px\":d}}}})}),p.expr&&p.expr.filters&&(p.expr.filters.hidden=function(a){return a.offsetWidth===0&&a.offsetHeight===0||!p.support.reliableHiddenOffsets&&(a.style&&a.style.display||bH(a,\"display\"))===\"none\"},p.expr.filters.visible=function(a){return!p.expr.filters.hidden(a)}),p.each({margin:\"\",padding:\"\",border:\"Width\"},function(a,b){p.cssHooks[a+b]={expand:function(c){var d,e=typeof c==\"string\"?c.split(\" \"):[c],f={};for(d=0;d)0?4:0,f&&(u=cB(l,x,f));if(a>=200&&a"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/coffee_pc_demo/pro-con.js","permalink":"//aolliu.win/assets/demo/coffee_pc_demo/pro-con.js","excerpt":"","text":"// Generated by CoffeeScript 1.4.0 (function() { var N, ProCon, func, procon; N = 10; func = function(a, b) { if (a == null) { a = 4; } if (b == null) { b = 6; } return a + b; }; ProCon = (function() { function ProCon() {} ProCon.prototype.data = { mutex: 1, empty: N, full: 0, front: 0, rear: 0, buf: [] }; ProCon.prototype.init = function() { var i, newDom, _this = this; i = 0; while (i < N) { newDom = $('' + i + '' + i + ''); $('#buf').append(newDom); this.data.buf.push('e'); i++; } $('#produce').click(function() { return _this.producer(); }); return $('#consume').click(function() { return _this.consumer(); }); }; ProCon.prototype.p = function(num) { return --num; }; ProCon.prototype.v = function(num) { return ++num; }; ProCon.prototype.produceItem = function() { $('生产了产品').insertBefore($(\"#des p:first\")); return 'm'; }; ProCon.prototype.consumeItem = function() { return $('消费了产品').insertBefore($(\"#des p:first\")); }; ProCon.prototype.enterItem = function(item) { var str; this.data.front = (this.data.front + 1) % N; this.data.buf[this.data.front] = item; str = \"存入产品\" + this.data.buf[this.data.front] + \"到缓冲区\" + this.data.front; $(\"\" + str + \"\").insertBefore($(\"#des p:first\")); return $($('.bufCover')[this.data.front]).animate({ \"height\": \"50px\" }); }; ProCon.prototype.removeItem = function() { var str; this.data.rear = (this.data.rear + 1) % N; this.data.buf[this.data.rear] = 'e'; str = \"取出产品\" + this.data.buf[this.data.rear] + \"从缓冲区\" + this.data.rear; $(\"\" + str + \"\").insertBefore($(\"#des p:first\")); return $($('.bufCover')[this.data.rear]).animate({ \"height\": \"0px\" }); }; ProCon.prototype.producer = function() { var item; if (this.data.full === N) { $(\"缓冲区已全满\").insertBefore($(\"#des p:first\")); return; } item = this.produceItem(); this.data.empty = this.p(this.data.empty); this.data.mutex = this.p(this.data.mutex); this.enterItem(item); this.data.mutex = this.v(this.data.mutex); return this.data.full = this.v(this.data.full); }; ProCon.prototype.consumer = function() { if (this.data.empty === N) { $(\"缓冲区已空\").insertBefore($(\"#des p:first\")); return; } this.data.full = this.p(this.data.full); this.data.mutex = this.p(this.data.mutex); this.removeItem(); this.data.mutex = this.v(this.data.mutex); this.data.empty = this.v(this.data.empty); return this.consumeItem(); }; return ProCon; })(); procon = new ProCon; procon.init(); }).call(this);"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/coffee_pc_demo/pro-con.html","permalink":"//aolliu.win/assets/demo/coffee_pc_demo/pro-con.html","excerpt":"","text":"body{ background: #fff; } .bufBox{ float: left; width: 50px; height: 50px; background: #ddd; border-radius: 5px; text-align: center; line-height: 50px; margin: 0 5px; position:relative; overflow: hidden; } .bufCover{ width: 100%; height: 0; background: #f0f; border-radius: 5px; position: absolute; } #buf{ height: 60px; } #des p{ padding: 4px 0; margin: 0; font-size: 14px; } #des .desPro{ color: #333; background: #EEE; } #des .desCon{ color: #EEE; background: #333; } #des .desSpe{ background: #BBB; } 生产 消费"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/gift/index.html","permalink":"//aolliu.win/assets/demo/gift/index.html","excerpt":"","text":"礼物 - 3.8 3.8节礼物，来了… 首先，你要输入我的生日 接着，摇一摇… 最后，这就是见证奇迹的时刻… 3.8节快乐！ 祝身体健康,平安长乐 请打开音量收听… var Main = (function() { function playAudio(src) { if (typeof Audio != \"undefined\") { new Audio(src).play() ; } else if (typeof device != \"undefined\") { if (device.platform == 'Android') { console.log(src); } var mediaRes = new Media(src, function onSuccess() { mediaRes.release(); }, function onError(e){ console.log(\"error playing sound: \" + JSON.stringify(e)); }); mediaRes.play(); } else { alert(\"no sound API to play: \" + src); } } window.addEventListener('shake', autoRun, false); function autoRun(){ if($(\"#myBir\").val() == \"0425\"){ $(\"#se1\").hide(); $(\"#se2\").show(); playAudio(\"media/gift.ogg\"); }else{ alert(\"生日错误\"); } } var init = function() { } return { init: init } })(); $(Main.init());"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/mediator/mediator.js","permalink":"//aolliu.win/assets/demo/mediator/mediator.js","excerpt":"","text":"// Generated by CoffeeScript 1.4.0 (function() { var Player, mediator, scoreboard; Player = function(name) { this.points = 0; return this.name = name; }; Player.prototype.play = function() { this.points++; return mediator.played(); }; scoreboard = { element: document.getElementById(\"results\"), update: function(score) { var diff, key, msg, value; msg = ''; for (key in score) { value = score[key]; if (score.hasOwnProperty(key)) { msg = msg + (\"\" + key + \":\" + value + \"\"); } } this.element.innerHTML = msg; diff = score.Home - score.Guest; if (diff > 15) { alert(\"Home Win!\"); return location.reload(); } else if (diff < -15) { alert(\"Guest Win!\"); return location.reload(); } else { return document.getElementById('barGuest').style.width = 150 + (diff * 10) + 'px'; } } }; mediator = { players: {}, setup: function() { var players; players = this.players; players.home = new Player('Home'); return players.guest = new Player('Guest'); }, played: function() { var players, score; players = this.players; score = { Home: players.home.points, Guest: players.guest.points }; return scoreboard.update(score); }, keypress: function(e) { var keycode; e = e || window.event; keycode = e.which; if (keycode === 102) { mediator.players.home.play(); return; } if (keycode === 106) { mediator.players.guest.play(); } } }; mediator.setup(); window.onkeypress = mediator.keypress; }).call(this);"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/my_news_reader/index.html","permalink":"//aolliu.win/assets/demo/my_news_reader/index.html","excerpt":"","text":"myReader *{ margin: 0; padding: 0; } body{ background: #eee; overflow-x : hidden; overflow-y : hidden; } #container{ width: 600px; height: 400px; background: #eee; position: relative; } .tag{ position: absolute; } 点击变化布局"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/mediator/demo.html","permalink":"//aolliu.win/assets/demo/mediator/demo.html","excerpt":"","text":"*{ margin:0; padding:0; } #textBox{ position: absolute; left: 0; top: 0; z-index: -999; } #bg{ background: url(sgws.jpg) -50px; width:500px; height: 314px; text-align: center; position: relative; -webkit-animation:roll 3s infinite ease ; -moz-animation:roll 3s infinite ease ; -ms-animation:roll 3s infinite ease ; -o-animation:roll 3s infinite ease ; animation:roll 3s infinite ease ; } #barHome{ width: 300px; height: 10px; background: #f00; overflow: hidden; position: absolute; bottom: 45px; left: 50%; margin-left: -150px; } #barGuest{ width: 150px; height: 10px; background: #00f; } #results{ width: 300px; position: absolute; bottom: 65px; left: 50%; margin-left: -150px; color: #fff; } #results span{ margin: 50px; } @-webkit-keyframes roll {0%{background-position: -90px;}50%{background-position: -10px;}100%{background-position: -90px;}} @-moz-keyframes roll {0%{background-position: -90px;}50%{background-position: -10px;}100%{background-position: -90px;}} @-ms-keyframes roll {0%{background-position: -90px;}50%{background-position: -10px;}100%{background-position: -90px;}} @-o-keyframes roll {0%{background-position: -90px;}50%{background-position: -10px;}100%{background-position: -90px;}} @keyframes roll {0%{background-position: -90px;}50%{background-position: -10px;}100%{background-position: -90px;}} mediator 请按F键与J键"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/pre_css3_demo/demo.html","permalink":"//aolliu.win/assets/demo/pre_css3_demo/demo.html","excerpt":"","text":"*{ margin:0; padding: 0; } body{ overflow: hidden; } #textBox{ position: absolute; left: 0; top: 0; z-index: -999; } .showRoll #frame { border-color: hsl(0,0%,70%); position: absolute; } #box{ width: 641px; height: 483px; background: url(bg.jpg); border: 1px solid #ddd; position: relative; color: #fff; overflow: hidden; } #frame { width: 70px; height: 92px; left:370px; top:240px; position: absolute; border: 1px solid transparent; background: url(mhxy.png) no-repeat left top; -webkit-animation: anm-down 1s steps(8) infinite; -moz-animation: anm-down 1s steps(8) infinite; -ms-animation: anm-down 1s steps(8) infinite; -o-animation: anm-down 1s steps(8) infinite; animation: anm-down 1s steps(8) infinite; } @-webkit-keyframes anm-down { 0% { background-position: 0px 0; } 100% { background-position: -560px 0; } } @-moz-keyframes anm-down { 0% { background-position: 0px 0; } 100% { background-position: -560px 0; } } @-ms-keyframes anm-down { 0% { background-position: 0px 0; } 100% { background-position: -560px 0; } } @-o-keyframes anm-down { 0% { background-position: 0px 0; } 100% { background-position: -560px 0; } } @keyframes anm-down { 0% { background-position: 0px 0; } 100% { background-position: -560px 0; } } @-webkit-keyframes anm-left { 0% { background-position: 0px -92px; } 100% { background-position: -560px -92px; } } @-moz-keyframes anm-left { 0% { background-position: 0px -92px; } 100% { background-position: -560px -92px; } } @-ms-keyframes anm-left { 0% { background-position: 0px -92px; } 100% { background-position: -560px -92px; } } @-o-keyframes anm-left { 0% { background-position: 0px -92px; } 100% { background-position: -560px -92px; } } @keyframes anm-left { 0% { background-position: 0px -92px; } 100% { background-position: -560px -92px; } } @-webkit-keyframes anm-right { 0% { background-position: 0px -184px; } 100% { background-position: -560px -184px; } } @-moz-keyframes anm-right { 0% { background-position: 0px -184px; } 100% { background-position: -560px -184px; } } @-ms-keyframes anm-right { 0% { background-position: 0px -184px; } 100% { background-position: -560px -184px; } } @-o-keyframes anm-right { 0% { background-position: 0px -184px; } 100% { background-position: -560px -184px; } } @keyframes anm-right { 0% { background-position: 0px -184px; } 100% { background-position: -560px -184px; } } @-webkit-keyframes anm-up { 0% { background-position: 0px -276px; } 100% { background-position: -560px -276px; } } @-moz-keyframes anm-up { 0% { background-position: 0px -276px; } 100% { background-position: -560px -276px; } } @-ms-keyframes anm-up { 0% { background-position: 0px -276px; } 100% { background-position: -560px -276px; } } @-o-keyframes anm-up { 0% { background-position: 0px -276px; } 100% { background-position: -560px -276px; } } @keyframes anm-up { 0% { background-position: 0px -276px; } 100% { background-position: -560px -276px; } } @-webkit-keyframes anm-ld { 0% { background-position: 0px -368px; } 100% { background-position: -560px -368px; } } @-moz-keyframes anm-ld { 0% { background-position: 0px -368px; } 100% { background-position: -560px -368px; } } @-ms-keyframes anm-ld { 0% { background-position: 0px -368px; } 100% { background-position: -560px -368px; } } @-o-keyframes anm-ld { 0% { background-position: 0px -368px; } 100% { background-position: -560px -368px; } } @keyframes anm-ld { 0% { background-position: 0px -368px; } 100% { background-position: -560px -368px; } } @-webkit-keyframes anm-rd { 0% { background-position: 0px -460px; } 100% { background-position: -560px -460px; } } @-moz-keyframes anm-rd { 0% { background-position: 0px -460px; } 100% { background-position: -560px -460px; } } @-ms-keyframes anm-rd { 0% { background-position: 0px -460px; } 100% { background-position: -560px -460px; } } @-o-keyframes anm-rd { 0% { background-position: 0px -460px; } 100% { background-position: -560px -460px; } } @keyframes anm-rd { 0% { background-position: 0px -460px; } 100% { background-position: -560px -460px; } } @-webkit-keyframes anm-lu { 0% { background-position: 0px -552px; } 100% { background-position: -560px -552px; } } @-moz-keyframes anm-lu { 0% { background-position: 0px -552px; } 100% { background-position: -560px -552px; } } @-ms-keyframes anm-lu { 0% { background-position: 0px -552px; } 100% { background-position: -560px -552px; } } @-o-keyframes anm-lu { 0% { background-position: 0px -552px; } 100% { background-position: -560px -552px; } } @keyframes anm-lu { 0% { background-position: 0px -552px; } 100% { background-position: -560px -552px; } } @-webkit-keyframes anm-ru { 0% { background-position: 0px -644px; } 100% { background-position: -560px -644px; } } @-moz-keyframes anm-ru { 0% { background-position: 0px -644px; } 100% { background-position: -560px -644px; } } @-ms-keyframes anm-ru { 0% { background-position: 0px -644px; } 100% { background-position: -560px -644px; } } @-o-keyframes anm-ru { 0% { background-position: 0px -644px; } 100% { background-position: -560px -644px; } } @keyframes anm-ru { 0% { background-position: 0px -644px; } 100% { background-position: -560px -644px; } } test function setAnm (str){ switch (str){ case 'left':{ $(\"#frame\").css({\"animation\":\"anm-left 1s steps(8) infinite\"}); break; } case 'right':{ $(\"#frame\").css({\"animation\":\"anm-right 1s steps(8) infinite\"}); break; } case 'up':{ $(\"#frame\").css({\"animation\":\"anm-up 1s steps(8) infinite\"}); break; } case 'down':{ $(\"#frame\").css({\"animation\":\"anm-down 1s steps(8) infinite\"}); break; } case 'lu':{ $(\"#frame\").css({\"animation\":\"anm-lu 1s steps(8) infinite\"}); break; } case 'ld':{ $(\"#frame\").css({\"animation\":\"anm-ld 1s steps(8) infinite\"}); break; } case 'ru':{ $(\"#frame\").css({\"animation\":\"anm-ru 1s steps(8) infinite\"}); break; } case 'rd':{ $(\"#frame\").css({\"animation\":\"anm-rd 1s steps(8) infinite\"}); break; } } } var data = { x:0, y:0, l:false, r:false, u:false, d:false, time:null } function move(){ trans = \"translate(\"+data.x*50+\"px,\"+data.y*50+\"px)\"; $('#frame').css({\"transform\":trans,\"transition\":\"all 0.3s linear\"}); } function diff(){ var newTime = +new Date; if(!data.time){ data.time = newTime; } var diff = newTime-data.time; return diff; } $(window).keydown(function(event){ var keycode = event.which; if(keycode==37){ if(data.l) return; var isRun = diff(); console.log(isRun); data.l=true; if(data.u){ setAnm(\"lu\"); data.x--; if(isRun>480) data.y--; }else if(data.d){ setAnm(\"ld\"); data.x--; if(isRun>480) data.y++; }else{ setAnm(\"left\"); data.x--; } }else if(keycode==38){ if(data.u) return; var isRun = diff(); console.log(isRun); data.u=true; if(data.l){ setAnm(\"lu\"); if(isRun>480) data.x--; data.y--; }else if(data.r){ setAnm(\"ru\"); if(isRun>480) data.x++; data.y--; }else{ setAnm(\"up\"); data.y--; } }else if(keycode==39){ if(data.r) return; var isRun = diff(); console.log(isRun); data.r=true; if(data.u){ setAnm(\"ru\"); data.x++; if(isRun>480) data.y--; }else if(data.d){ setAnm(\"rd\"); data.x++; if(isRun>480) data.y++; }else{ setAnm(\"right\"); data.x++; } }else if(keycode==40){ if(data.d) return; var isRun = diff(); console.log(isRun); data.d=true; if(data.l){ setAnm(\"ld\"); if(isRun>480) data.x--; data.y++; }else if(data.r){ setAnm(\"rd\"); if(isRun>480) data.x++; data.y++; }else{ setAnm(\"down\"); data.y++; } } move(); }).keyup(function(){ data.l = data.r = data.u = data.d = false; data.time = null; });"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/gift/js/index.main.js","permalink":"//aolliu.win/assets/demo/gift/js/index.main.js","excerpt":"","text":""},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/gift/css/index.css","permalink":"//aolliu.win/assets/demo/gift/css/index.css","excerpt":"","text":"body{background:#f7f7f5;font-family:\"Helvetica Neue\",Helvetica,STHeiTi,sans-serif}header{height:44px;border-bottom:1px solid #000;background:#272c2f}header p{color:#fff;text-align:center;font-size:20px;line-height:40px}.hide{display:none}.paper-t{display:block;height:16px;width:100%;background:url(../img/paper.jpg) repeat-x;background-size:320px 15px}.paper-b{display:block;height:19px;width:100%;background:url(../img/paper-b.jpg) repeat-x;background-size:100% 19px;position:absolute;bottom:0px}.main{color:#2495e1;margin:-61px 8px 0px;height:100%;position:relative}.main .main-top{padding-top:61px;font-weight:500}.main .main-top .main-top-l{float:left}.main .main-top .main-top-r{float:right}.main .main-top:after{content:\"\";display:block;clear:both}.main .main-middle{font-size:98px;font-weight:500;text-align:center;line-height:141px}.main .main-bottom{width:100%;position:absolute;bottom:8px}.main .main-bottom nav{border:1px solid #2495e1;border-radius:3px;height:25px}.main .main-bottom nav span{float:left;display:inline-block;border-right:1px solid #2495e1;height:100%;width:33.1%;text-align:center;font-size:14px;line-height:26px}.main .main-bottom nav span:last-child{border-right:none}.main .main-bottom nav span.cur{background:#2495e1;color:#fff}.main .main-bottom .good-bad{height:140px;padding:20px 10px 10px}.main .main-bottom .good-bad em{display:inline-block;width:30px;height:30px;border-radius:15px;color:#fff;background:#2495e1;text-align:center;line-height:30px;float:left}.main .main-bottom .good-bad ul{padding-left:45px}.main .main-bottom .good-bad ul li{margin-bottom:13px}.main .main-bottom .good-bad ul p{font-size:18px;font-weight:500}.main .main-bottom .good-bad ul h3{font-size:30px;margin:23px 0px}.main .main-bottom .good-bad ul span{font-size:13px;color:#808080;margin-left:12px;display:block}.main .main-bottom .good-bad ul span:before{width:13px;height:11px;font-size:20px;font-weight:400;font-family:Georgia;content:\"\\201C\";position:absolute;color:#808080;left:56px}.main .main-bottom .good{border-bottom:1px solid #dfdfdf}.main .main-bottom .nav-chose .good{border-bottom:1px solid rgba(0,0,0,0)}.nav-chose .good-bad{text-align:center}.nav-chose .good-bad img{width:130px;margin-top:28px}.nav-chose .good-bad h2{margin:4px}.nav-chose .good-bad span{color:#666;margin:0 5px}.nav-chose .good-bad section{display:none}.nav-chose .good-bad section h3{display:none}.nav-chose .good-bad section.active{display:block} .top2{ text-align: center; margin-top: 40px; } .top2 p{ margin: 10px 0px; color:#2495e1; } .top2 input{ height: 30px; padding: 5px; border-radius: 3px; border: 2px solid #2495e1; outline: none; } .top2 img{ width: 43%; }"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/gift/css/reset.css","permalink":"//aolliu.win/assets/demo/gift/css/reset.css","excerpt":"","text":"html{color:#000}blockquote,body,code,dd,div,dl,dt,fieldset,form,h1,h2,h3,h4,h5,h6,input,legend,li,menu,ol,p,pre,td,textarea,th,ul{margin:0;padding:0}table{border-collapse:collapse;border-spacing:0}fieldset,img{border:0}address,caption,cite,code,dfn,em,strong,th,var{font-style:normal;font-weight:400}ol,ul{list-style:none}caption,th{text-align:left}h1,h2,h3,h4,h5,h6{font-size:100%;font-weight:400}q:after,q:before{content:''}abbr,acronym{border:0;font-variant:normal}sup{vertical-align:text-top}sub{vertical-align:text-bottom}input,select,textarea{font-family:inherit;font-size:inherit;font-weight:inherit;*font-size:100%}legend{color:#000}body,html{-webkit-text-size-adjust:none;-webkit-touch-callout:none;vertical-align:middle;font-size:16px;background:#e6e6e6;position:relative;height:100%;font-family:Tahoma,Arial,\"Microsoft Yahei\",sans-serif}.clearfix:after{content:\" \";display:block;clear:both;visibility:hidden;line-height:0;height:0}input::-webkit-input-placeholder{color:#aaa}a,div{-webkit-tap-highlight-color:rgba(0,0,0,0)}a,a:active,a:hover{color:#0057af;text-decoration:none}"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/gift/js/shake.js","permalink":"//aolliu.win/assets/demo/gift/js/shake.js","excerpt":"","text":"/* * * Find more about this plugin by visiting * http://alxgbsn.co.uk/ * * Copyright (c) 2010-2012 Alex Gibson * Released under MIT license * */ (function (window, document) { function Shake() { //feature detect this.hasDeviceMotion = 'ondevicemotion' in window; //default velocity threshold for shake to register this.threshold = 15; //use date to prevent multiple shakes firing this.lastTime = new Date(); //accelerometer values this.lastX = null; this.lastY = null; this.lastZ = null; //create custom event if (typeof document.CustomEvent === \"function\") { this.event = new document.CustomEvent('shake', { bubbles: true, cancelable: true }); } else if (typeof document.createEvent === \"function\") { this.event = document.createEvent('Event'); this.event.initEvent('shake', true, true); } else { return false; } } //reset timer values Shake.prototype.reset = function () { this.lastTime = new Date(); this.lastX = null; this.lastY = null; this.lastZ = null; }; //start listening for devicemotion Shake.prototype.start = function () { this.reset(); if (this.hasDeviceMotion) { window.addEventListener('devicemotion', this, false); } }; //stop listening for devicemotion Shake.prototype.stop = function () { if (this.hasDeviceMotion) { window.removeEventListener('devicemotion', this, false); } this.reset(); }; //calculates if shake did occur Shake.prototype.devicemotion = function (e) { var current = e.accelerationIncludingGravity, currentTime, timeDifference, deltaX = 0, deltaY = 0, deltaZ = 0; if ((this.lastX === null) && (this.lastY === null) && (this.lastZ === null)) { this.lastX = current.x; this.lastY = current.y; this.lastZ = current.z; return; } deltaX = Math.abs(this.lastX - current.x); deltaY = Math.abs(this.lastY - current.y); deltaZ = Math.abs(this.lastZ - current.z); if (((deltaX > this.threshold) && (deltaY > this.threshold)) || ((deltaX > this.threshold) && (deltaZ > this.threshold)) || ((deltaY > this.threshold) && (deltaZ > this.threshold))) { //calculate time in milliseconds since last shake registered currentTime = new Date(); timeDifference = currentTime.getTime() - this.lastTime.getTime(); if (timeDifference > 1000) { window.dispatchEvent(this.event); this.lastTime = new Date(); } } this.lastX = current.x; this.lastY = current.y; this.lastZ = current.z; }; //event handler Shake.prototype.handleEvent = function (e) { if (typeof (this[e.type]) === 'function') { return this[e.type](e); } }; //create a new instance of shake.js. var myShakeEvent = new Shake(); myShakeEvent && myShakeEvent.start(); }(window, document));"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/gift/js/zepto.min.js","permalink":"//aolliu.win/assets/demo/gift/js/zepto.min.js","excerpt":"","text":"/* Zepto v1.1.3 - zepto event ajax form ie - zeptojs.com/license */ var Zepto=function(){function L(t){return null==t?String(t):j[T.call(t)]||\"object\"}function Z(t){return\"function\"==L(t)}function $(t){return null!=t&&t==t.window}function _(t){return null!=t&&t.nodeType==t.DOCUMENT_NODE}function D(t){return\"object\"==L(t)}function R(t){return D(t)&&!$(t)&&Object.getPrototypeOf(t)==Object.prototype}function M(t){return\"number\"==typeof t.length}function k(t){return s.call(t,function(t){return null!=t})}function z(t){return t.length>0?n.fn.concat.apply([],t):t}function F(t){return t.replace(/::/g,\"/\").replace(/([A-Z]+)([A-Z][a-z])/g,\"$1_$2\").replace(/([a-z\\d])([A-Z])/g,\"$1_$2\").replace(/_/g,\"-\").toLowerCase()}function q(t){return t in f?f[t]:f[t]=new RegExp(\"(^|\\\\s)\"+t+\"(\\\\s|$)\")}function H(t,e){return\"number\"!=typeof e||c[F(t)]?e:e+\"px\"}function I(t){var e,n;return u[t]||(e=a.createElement(t),a.body.appendChild(e),n=getComputedStyle(e,\"\").getPropertyValue(\"display\"),e.parentNode.removeChild(e),\"none\"==n&&(n=\"block\"),u[t]=n),u[t]}function V(t){return\"children\"in t?o.call(t.children):n.map(t.childNodes,function(t){return 1==t.nodeType?t:void 0})}function U(n,i,r){for(e in i)r&&(R(i[e])||A(i[e]))?(R(i[e])&&!R(n[e])&&(n[e]={}),A(i[e])&&!A(n[e])&&(n[e]=[]),U(n[e],i[e],r)):i[e]!==t&&(n[e]=i[e])}function B(t,e){return null==e?n(t):n(t).filter(e)}function J(t,e,n,i){return Z(e)?e.call(t,n,i):e}function X(t,e,n){null==n?t.removeAttribute(e):t.setAttribute(e,n)}function W(e,n){var i=e.className,r=i&&i.baseVal!==t;return n===t?r?i.baseVal:i:void(r?i.baseVal=n:e.className=n)}function Y(t){var e;try{return t?\"true\"==t||(\"false\"==t?!1:\"null\"==t?null:/^0/.test(t)||isNaN(e=Number(t))?/^[\\[\\{]/.test(t)?n.parseJSON(t):t:e):t}catch(i){return t}}function G(t,e){e(t);for(var n in t.childNodes)G(t.childNodes[n],e)}var t,e,n,i,C,N,r=[],o=r.slice,s=r.filter,a=window.document,u={},f={},c={\"column-count\":1,columns:1,\"font-weight\":1,\"line-height\":1,opacity:1,\"z-index\":1,zoom:1},l=/^\\s*]*>/,h=/^(?:|)$/,p=/]*)\\/>/gi,d=/^(?:body|html)$/i,m=/([A-Z])/g,g=[\"val\",\"css\",\"html\",\"text\",\"data\",\"width\",\"height\",\"offset\"],v=[\"after\",\"prepend\",\"before\",\"append\"],y=a.createElement(\"table\"),x=a.createElement(\"tr\"),b={tr:a.createElement(\"tbody\"),tbody:y,thead:y,tfoot:y,td:x,th:x,\"*\":a.createElement(\"div\")},w=/complete|loaded|interactive/,E=/^[\\w-]*$/,j={},T=j.toString,S={},O=a.createElement(\"div\"),P={tabindex:\"tabIndex\",readonly:\"readOnly\",\"for\":\"htmlFor\",\"class\":\"className\",maxlength:\"maxLength\",cellspacing:\"cellSpacing\",cellpadding:\"cellPadding\",rowspan:\"rowSpan\",colspan:\"colSpan\",usemap:\"useMap\",frameborder:\"frameBorder\",contenteditable:\"contentEditable\"},A=Array.isArray||function(t){return t instanceof Array};return S.matches=function(t,e){if(!e||!t||1!==t.nodeType)return!1;var n=t.webkitMatchesSelector||t.mozMatchesSelector||t.oMatchesSelector||t.matchesSelector;if(n)return n.call(t,e);var i,r=t.parentNode,o=!r;return o&&(r=O).appendChild(t),i=~S.qsa(r,e).indexOf(t),o&&O.removeChild(t),i},C=function(t){return t.replace(/-+(.)?/g,function(t,e){return e?e.toUpperCase():\"\"})},N=function(t){return s.call(t,function(e,n){return t.indexOf(e)==n})},S.fragment=function(e,i,r){var s,u,f;return h.test(e)&&(s=n(a.createElement(RegExp.$1))),s||(e.replace&&(e=e.replace(p,\"\")),i===t&&(i=l.test(e)&&RegExp.$1),i in b||(i=\"*\"),f=b[i],f.innerHTML=\"\"+e,s=n.each(o.call(f.childNodes),function(){f.removeChild(this)})),R(r)&&(u=n(s),n.each(r,function(t,e){g.indexOf(t)>-1?u[t](e):u.attr(t,e)})),s},S.Z=function(t,e){return t=t||[],t.__proto__=n.fn,t.selector=e||\"\",t},S.isZ=function(t){return t instanceof S.Z},S.init=function(e,i){var r;if(!e)return S.Z();if(\"string\"==typeof e)if(e=e.trim(),\"1;return r.length)-1&&(u=u.split(\",\",2)[0]),d.overrideMimeType&&d.overrideMimeType(u)),(n.contentType||n.contentType!==!1&&n.data&&\"GET\"!=n.type.toUpperCase())&&l(\"Content-Type\",n.contentType||\"application/x-www-form-urlencoded\"),n.headers)for(r in n.headers)l(r,n.headers[r]);if(d.setRequestHeader=l,d.onreadystatechange=function(){if(4==d.readyState){d.onreadystatechange=x,clearTimeout(j);var e,i=!1;if(d.status>=200&&d.status0&&(j=setTimeout(function(){d.onreadystatechange=x,d.abort(),v(null,\"timeout\",d,n,o)},n.timeout)),d.send(n.data?n.data:null),d},t.get=function(){return t.ajax(j.apply(null,arguments))},t.post=function(){var e=j.apply(null,arguments);return e.type=\"POST\",t.ajax(e)},t.getJSON=function(){var e=j.apply(null,arguments);return e.dataType=\"json\",t.ajax(e)},t.fn.load=function(e,n,i){if(!this.length)return this;var a,r=this,s=e.split(/\\s/),u=j(e,n,i),f=u.success;return s.length>1&&(u.url=s[0],a=s[1]),u.success=function(e){r.html(a?t(\"\").html(e.replace(o,\"\")).find(a):e),f&&f.apply(r,arguments)},t.ajax(u),this};var T=encodeURIComponent;t.param=function(t,e){var n=[];return n.add=function(t,e){this.push(T(t)+\"=\"+T(e))},S(n,t,e),n.join(\"&\").replace(/%20/g,\"+\")}}(Zepto),function(t){t.fn.serializeArray=function(){var n,e=[];return t([].slice.call(this.get(0).elements)).each(function(){n=t(this);var i=n.attr(\"type\");\"fieldset\"!=this.nodeName.toLowerCase()&&!this.disabled&&\"submit\"!=i&&\"reset\"!=i&&\"button\"!=i&&(\"radio\"!=i&&\"checkbox\"!=i||this.checked)&&e.push({name:n.attr(\"name\"),value:n.val()})}),e},t.fn.serialize=function(){var t=[];return this.serializeArray().forEach(function(e){t.push(encodeURIComponent(e.name)+\"=\"+encodeURIComponent(e.value))}),t.join(\"&\")},t.fn.submit=function(e){if(e)this.bind(\"submit\",e);else if(this.length){var n=t.Event(\"submit\");this.eq(0).trigger(n),n.isDefaultPrevented()||this.get(0).submit()}return this}}(Zepto),function(t){\"__proto__\"in{}||t.extend(t.zepto,{Z:function(e,n){return e=e||[],t.extend(e,t.fn),e.selector=n||\"\",e.__Z=!0,e},isZ:function(e){return\"array\"===t.type(e)&&\"__Z\"in e}});try{getComputedStyle(void 0)}catch(e){var n=getComputedStyle;window.getComputedStyle=function(t){try{return n(t)}catch(e){return null}}}}(Zepto);"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/my_news_reader/js/tagConfig.js","permalink":"//aolliu.win/assets/demo/my_news_reader/js/tagConfig.js","excerpt":"","text":"window.tagConfig = { areas: { cols_40_60: [{ width: 40, rows: [{ height: 100 }] }, { width: 60, rows: [{ height: 100 }] }], cols_50_50: [{ width: 50, rows: [{ height: 100 }] }, { width: 50, rows: [{ height: 100 }] }], cols_32_32_36: [{ width: 32, rows: [{ height: 100 }] }, { width: 32, rows: [{ height: 100 }] }, { width: 36, rows: [{ height: 100 }] }] } }, window.tagConfig.pageLayout = { top: 0, left: 0, width: 100, height: 100, random: !1, cols: [{ width: 45, rows: [{ random: !1, height: 100, rows: [{ height: 45, cols: [{ width: 100 }] }, { height: 30, cols: [{ width: 100 }] }, { height: 25, cols: [{ width: 100, cols: [{ width: 35, rows: [{ height: 100 }] }, { width: 25, rows: [{ height: 30 }, { height: 40 }, { height: 30 }] }, { width: 15, rows: [{ height: 40 }, { height: 60 }] }, { width: 25, rows: [{ height: 35 }, { height: 25 }, { height: 40 }] }] }] }] }] }, { width: 55, random: !1, rows: [{ height: 50, cols: [{ width: 45, rows: [{ height: 35, cols: window.tagConfig.areas.cols_50_50 }, { height: 35, cols: window.tagConfig.areas.cols_40_60 }, { height: 30 }] }, { width: 55, rows: [{ height: 50 }, { height: 50 }] }] }, { height: 28, cols: [{ width: 30, rows: [{ height: 100 }] }, { width: 30, rows: [{ height: 40 }, { height: 60, cols: window.tagConfig.areas.cols_40_60 }] }, { width: 40, rows: [{ height: 50, cols: window.tagConfig.areas.cols_50_50 }, { height: 50, cols: window.tagConfig.areas.cols_32_32_36 }] }] }, { height: 22, cols: [{ width: 35, rows: [{ height: 100 }] }, { width: 15, rows: [{ height: 50 }, { height: 50 }] }, { width: 15, rows: [{ height: 50 }, { height: 50 }] }, { width: 20, rows: [{ height: 32 }, { height: 32 }, { height: 36 }] }, { width: 15, rows: [{ height: 50 }, { height: 50 }] }] }] }] }, window.tagConfig.colorPatterns = [[{ backgrounds: [\"#ce5f52\", \"#e37063\"], fontColor: \"#FFF\", borderColor: \"#5c666f\" }, { backgrounds: [\"#6c5d56\", \"#746760\"], fontColor: \"#FFF\", borderColor: \"#5c666f\" }, { backgrounds: [\"#c8b66a\", \"#dbc877\"], fontColor: \"#FFF\", borderColor: \"#5c666f\" }, { backgrounds: [\"#6e96b1\", \"#82a8bf\"], fontColor: \"#FFF\", borderColor: \"#5c666f\" }]];"},{"title":"","date":"2017-11-17T06:58:17.000Z","updated":"2017-07-28T03:51:08.000Z","comments":true,"path":"assets/demo/my_news_reader/js/main.js","permalink":"//aolliu.win/assets/demo/my_news_reader/js/main.js","excerpt":"","text":"function H$(i){return document.getElementById(i);} function H$$(c,p){ if(p) return p.getElementsByTagName(c); else return document.getElementsByTagName(c); } var tagElems = []; (function() { function ranOrNot(e, t) { var n = []; typeof t == \"undefined\" && (t = e, e = 0); for (; e < t; e++) n.push(e); return n } Array.prototype.randomEach = function(t) { if (typeof t != \"function\") throw new TypeError; var n = this.length, r = ranOrNot(n); while (n) { var i = Math.floor(Math.random() * n--); if (t(this[r[i]]) === !1) break; r[i] = r[n] } }, Array.prototype.forEach || (Array.prototype.forEach = function(e) { var t = this.length; if (typeof e != \"function\") throw new TypeError; var n = arguments[1]; for (var r = 0; r < t; r++) r in this && e.call(n, this[r], r, this) }) } )(); function _shadowClone(e) { var t = {}; for (var n in e) e.hasOwnProperty(n) && (t[n] = e[n]); return t; } function attrStyle(elem,attr){ if(elem.style[attr]){ return elem.style[attr]; }else if(elem.currentStyle){ return elem.currentStyle[attr]; }else if(document.defaultView && document.defaultView.getComputedStyle){ attr=attr.replace(/([A-Z])/g,'-$1').toLowerCase(); return document.defaultView.getComputedStyle(elem,null).getPropertyValue(attr); }else{ return null; } } /////////////////////////// function AutoLoader(fun, timeout) { if (typeof fun != \"function\") throw new TypeError; this._generator = fun; this._timeout = timeout; this._context = arguments[2]; this._pool = []; } AutoLoader.prototype._load = function() { var e = this; clearTimeout(this._loading); this._loading = setTimeout(function() { e._pool.push(e._generator.apply(e._context)) }, this._timeout); } AutoLoader.prototype.get = function() { var e; clearTimeout(this._loading); this._pool.length > 0 ? e = this._pool.pop() : e = this._generator.apply(this._context); return e; } function _cutGrid(tag, funcJudge) { function a(a) { function h(cutLength) { var u, a = _shadowClone(cutLength); c++, u = c === l ? tag[cutType2.measure] - s: Math.floor(cutLength[cutType2.measure] * tag[cutType2.measure] / 100), a[cutType1.offset] = i + tag[cutType1.offset], a[cutType2.offset] = s + tag[cutType2.offset], a[cutType1.measure] = f, a[cutType2.measure] = u, a.colorPattern = tag.colorPattern, funcJudge(a), s += u } var f, l = a[cutType2.name].length, c = 0; u++, f = u === cutLength ? tag[cutType1.measure] - i: Math.floor(a[cutType1.measure] * tag[cutType1.measure] / 100), a.random === !1 ? a[cutType2.name].forEach(h) : a[cutType2.name].randomEach(h), s = 0, i += f } /*根据大块是否有rows属性，定义两种切割方式*/ var cutType1, cutType2; tag.rows ? (cutType1 = { name: \"rows\", measure: \"height\", offset: \"top\" }, cutType2 = { name: \"cols\", measure: \"width\", offset: \"left\" }) : (cutType1 = { name: \"cols\", measure: \"width\", offset: \"left\" }, cutType2 = { name: \"rows\", measure: \"height\", offset: \"top\" }); var i = 0, s = 0, cutLength = tag[cutType1.name].length, u = 0; tag.random === !1 ? tag[cutType1.name].forEach(a) : tag[cutType1.name].randomEach(a) } function _getGrids(tag) { var t = [], colorCount = 0, fontScale = .18, colorArr = tag.colorPatterns[0]; _cutGrid(tag.pageLayout, function(tag) { /*如果是新的大块，则colorPattern不存在，使用新的颜色。*/ tag.colorPattern || (tag.colorPattern = colorArr[colorCount++]); /*tagConfig本来没有rows或cols，是大块。执行else部分*/ if (tag.rows || tag.cols) { _cutGrid(tag, arguments.callee); } else { var s = tag.colorPattern, o = s.backgrounds, u = o.length, a = s.fontColor; tag.fontSize = Math.floor(Math.sqrt(tag.width * tag.height) * fontScale); tag.backgroundColor = o[Math.floor(Math.random() * u)]; tag.fontColor = a; t.push(tag); } } ); return t; } var myReader = function(){ function inits(o){ this.dom = H$(o.domId); this.len = o.len; this.block = o.block; this.fillStage(H$(\"container\")); this.clickEve(); } inits.prototype={ clickEve:function(){ var _this=this; var dom = H$$(\"button\"); dom[0].onclick=function(){ H$(\"container\").innerHTML=\"\"; _this.fillStage(H$(\"container\")); } }, reflowTagElem:function(dom, t,sw,sh) { dom.style.top = t.top*sh + \"px\"; dom.style.left = t.left*sw + \"px\"; dom.style.width = t.width*sw - 2 + \"px\"; dom.style.height = t.height*sh - 2 + \"px\"; dom.style.fontSize = t.fontSize*sw + \"px\"; dom.style.color = t.fontColor; dom.style.backgroundColor = t.backgroundColor; dom.order = t.width*sw * t.height*sh; }, fillStage:function(dom) { var _this=this; var data = _getGrids(window.tagConfig); data.forEach(function(data) { var div = document.createElement(\"div\"); div.className = \"tag\"; _this.reflowTagElem(div, data,6,4); dom.appendChild(div); tagElems.push(div); }); } } return inits; }(); var myData = { domId:\"container\" } new myReader(myData);"}],"posts":[{"title":"React Native集成到现有项目问题","slug":"React-Native集成到现有项目问题","date":"2016-08-24T13:39:09.000Z","updated":"2017-11-20T08:07:51.000Z","comments":true,"path":"2016/08/24/React-Native集成到现有项目问题/","link":"","permalink":"//aolliu.win/2016/08/24/React-Native集成到现有项目问题/","excerpt":"最近将写写的一个React-Native界面,集成到现有的项目中,在这个过程中遇到了问题,但是从网上没有看到答案,经过尝试,最后解决了,感觉大家在今后的开发中可能会也遇到同样的方法 一,React-Native集成到现有项目1.参考: 网上有很多集成的步骤,而且写的很详细,我参考的是这篇文章,其他文章都和这篇文章大同小异","text":"最近将写写的一个React-Native界面,集成到现有的项目中,在这个过程中遇到了问题,但是从网上没有看到答案,经过尝试,最后解决了,感觉大家在今后的开发中可能会也遇到同样的方法 一,React-Native集成到现有项目1.参考: 网上有很多集成的步骤,而且写的很详细,我参考的是这篇文章,其他文章都和这篇文章大同小异 2.问题: 从本人集成过程中发现了问题,也不知道其他同学有没有遇见,所以… 1.文中 到这一步确实会报很多错误,但是我按文中说把对应的库JavaScriptCore.framework引入,还是报错的,报错如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748Ld /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/Project.app/Project normal x86_64 cd /Users/liuwei/Desktop/Demo/Project export IPHONEOS_DEPLOYMENT_TARGET=9.3 export PATH=&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin&quot; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.3.sdk -L/Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator -F/Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator -filelist /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Intermediates/Project.build/Debug-iphonesimulator/Project.build/Objects-normal/x86_64/Project.LinkFileList -Xlinker -rpath -Xlinker @executable_path/Frameworks -mios-simulator-version-min=9.3 -Xlinker -no_deduplicate -Xlinker -objc_abi_version -Xlinker 2 -fobjc-arc -fobjc-link-runtime /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libReact.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTActionSheet.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTGeolocation.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTImage.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTLinking.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTNetwork.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTSettings.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTText.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTVibration.a /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/libRCTWebSocket.a -Xlinker -dependency_info -Xlinker /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Intermediates/Project.build/Debug-iphonesimulator/Project.build/Objects-normal/x86_64/Project_dependency_info.dat -o /Users/liuwei/Library/Developer/Xcode/DerivedData/Project-ayrfjucpjfizeidykzmsvsmbblkn/Build/Products/Debug-iphonesimulator/Project.app/ProjectUndefined symbols for architecture x86_64: &quot;std::__1::__next_prime(unsigned long)&quot;, referenced from: std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::rehash(unsigned long) in libReact.a(RCTJSCExecutor.o) &quot;std::__1::mutex::lock()&quot;, referenced from: -[RCTModuleData setUpInstanceAndBridge] in libReact.a(RCTModuleData.o) &quot;std::__1::mutex::unlock()&quot;, referenced from: -[RCTModuleData setUpInstanceAndBridge] in libReact.a(RCTModuleData.o) &quot;std::__1::mutex::~mutex()&quot;, referenced from: -[RCTModuleData .cxx_destruct] in libReact.a(RCTModuleData.o) &quot;std::terminate()&quot;, referenced from: ___clang_call_terminate in libReact.a(RCTJSCExecutor.o) &quot;operator delete[](void*)&quot;, referenced from: -[RCTJSCExecutor dealloc] in libReact.a(RCTJSCExecutor.o) executeRandomAccessModule(RCTJSCExecutor*, unsigned int, unsigned long, unsigned long) in libReact.a(RCTJSCExecutor.o) readRAMBundle(std::__1::unique_ptr&lt;__sFILE, int (*)(__sFILE*)&gt;, RandomAccessBundleData&amp;) in libReact.a(RCTJSCExecutor.o) RandomAccessBundleData::~RandomAccessBundleData() in libReact.a(RCTJSCExecutor.o) &quot;operator delete(void*)&quot;, referenced from: std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::~__hash_table() in libReact.a(RCTJSCExecutor.o) std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::__deallocate(std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, void*&gt;*) in libReact.a(RCTJSCExecutor.o) std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::__insert_unique&lt;std::__1::pair&lt;unsigned long const, unsigned long&gt; const&amp;&gt;(std::__1::pair&lt;unsigned long const, unsigned long&gt; const&amp;&amp;&amp;) in libReact.a(RCTJSCExecutor.o) std::__1::unique_ptr&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, void*&gt;, std::__1::__hash_node_destructor&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, void*&gt; &gt; &gt; &gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;unsigned long const, unsigned long&gt; const&amp;&gt;(std::__1::pair&lt;unsigned long const, unsigned long&gt; const&amp;&amp;&amp;) in libReact.a(RCTJSCExecutor.o) std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::__rehash(unsigned long) in libReact.a(RCTJSCExecutor.o) std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::erase(std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, void*&gt;*&gt;) in libReact.a(RCTJSCExecutor.o) &quot;operator new[](unsigned long)&quot;, referenced from: executeRandomAccessModule(RCTJSCExecutor*, unsigned int, unsigned long, unsigned long) in libReact.a(RCTJSCExecutor.o) readRAMBundle(std::__1::unique_ptr&lt;__sFILE, int (*)(__sFILE*)&gt;, RandomAccessBundleData&amp;) in libReact.a(RCTJSCExecutor.o) &quot;operator new(unsigned long)&quot;, referenced from: std::__1::unique_ptr&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, void*&gt;, std::__1::__hash_node_destructor&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, void*&gt; &gt; &gt; &gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::__construct_node&lt;std::__1::pair&lt;unsigned long const, unsigned long&gt; const&amp;&gt;(std::__1::pair&lt;unsigned long const, unsigned long&gt; const&amp;&amp;&amp;) in libReact.a(RCTJSCExecutor.o) std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::__unordered_map_hasher&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::hash&lt;unsigned long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long, std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long, unsigned long&gt; &gt; &gt;::__rehash(unsigned long) in libReact.a(RCTJSCExecutor.o) &quot;___cxa_begin_catch&quot;, referenced from: ___clang_call_terminate in libReact.a(RCTJSCExecutor.o) &quot;___gxx_personality_v0&quot;, referenced from: -[RCTJavaScriptContext initWithJSContext:onThread:] in libReact.a(RCTJSCExecutor.o) -[RCTJavaScriptContext init] in libReact.a(RCTJSCExecutor.o) -[RCTJavaScriptContext invalidate] in libReact.a(RCTJSCExecutor.o) +[RCTJSCExecutor runRunLoopThread] in libReact.a(RCTJSCExecutor.o) -[RCTJSCExecutor setBridge:] in libReact.a(RCTJSCExecutor.o) -[RCTJSCExecutor init] in libReact.a(RCTJSCExecutor.o) -[RCTJSCExecutor initWithUseCustomJSCLibrary:] in libReact.a(RCTJSCExecutor.o) ...ld: symbol(s) not found for architecture x86_64clang: error: linker command failed with exit code 1 (use -v to see invocation) 2.解决方法如下: 3.运行,大功告成!","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记十","slug":"React-Native学习笔记十","date":"2016-08-22T13:08:41.000Z","updated":"2017-11-20T08:06:52.000Z","comments":true,"path":"2016/08/22/React-Native学习笔记十/","link":"","permalink":"//aolliu.win/2016/08/22/React-Native学习笔记十/","excerpt":"","text":"自己写了几个界面,写的不是很好,主要是为了学习,大家可以参考LVRNShopDemoLVNewsDemo","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记九","slug":"React-Native学习笔记九","date":"2016-08-20T07:38:34.000Z","updated":"2017-11-20T08:04:58.000Z","comments":true,"path":"2016/08/20/React-Native学习笔记九/","link":"","permalink":"//aolliu.win/2016/08/20/React-Native学习笔记九/","excerpt":"一.延展操作符(…)RN是面向组件开发的,我们会在该组件的defaultProps中公开一些属性方便外界进行数据传递,如果只有几个props直接传递即可,但是当传递大量的props时会显得很乱,容易出错,那么...(延展操作符,取出参数对象的所有可遍历属性)来进行传递是一种很好的选择. 1.常规写法123456&lt;HomeNav title = &quot;首页&quot; subTitle = &quot;子标题&quot; intro = &quot;首页简介&quot; detail = &quot;首页详情介绍&quot;/&gt;","text":"一.延展操作符(…)RN是面向组件开发的,我们会在该组件的defaultProps中公开一些属性方便外界进行数据传递,如果只有几个props直接传递即可,但是当传递大量的props时会显得很乱,容易出错,那么...(延展操作符,取出参数对象的所有可遍历属性)来进行传递是一种很好的选择. 1.常规写法123456&lt;HomeNav title = &quot;首页&quot; subTitle = &quot;子标题&quot; intro = &quot;首页简介&quot; detail = &quot;首页详情介绍&quot;/&gt; 2.使用延展符操作符写法 12345678910var params = &#123; title = &quot;首页&quot;, subTitle = &quot;子标题&quot;, intro = &quot;首页简介&quot;, detail = &quot;首页详情介绍&quot;,&#125;;return ( &lt;HomeNav &#123;...params&#125;/&gt;); 二.真机调试iOS: 1.让运行的手机和电脑的WIFI在同一个局域网,获取到电脑的IP地址 2.打开Xcode,在AppDelegate中添加如下代码: 123456789101112131415161718NSURL *jsCodeLocation; [RCTBundleURLProvider sharedSettings].jsLocation = @&quot;192.168.20.123&quot;;//ip 地址 jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil]; RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation moduleName:@&quot;Project&quot; initialProperties:nil launchOptions:launchOptions]; rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1]; self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds]; UIViewController *rootViewController = [UIViewController new]; rootViewController.view = rootView; self.window.rootViewController = rootViewController; [self.window makeKeyAndVisible]; return YES; 3.run即可 Android: 1.Android 5.0 以上版本,可以直接通过adb reverse运行调试; 2.在Android设备上打开USB debugging并连接上电脑启动调试; 3.打开终端,命令react-native run-android编译运行项目; 4.保证手机电脑在同一局域网(摇一摇 - Dev Setting - Debug server host for device - 输入当前电脑ip地址 = 点击Reload JS) 三.ref深入用ref可以获取到真实的Dom节点,其实ref还有更加高级的用法,他的属性值不仅仅可以是string,也可以是function 1234567render()&#123; return &lt;View ref=&#123;(e) =&gt; this._view = e&#125;/&gt; //将组件View作为参数赋值给了this._view&#125;componentDidMount()&#123; this._view.style = &#123;backgroundColor:&apos;red&apos;,width:100,height:200&#125;&#125; ref在RN中左右相当于CSS中的选择器,我们可以任意去拿任何组件,从而获取他的属性和方法做相应的操作. 四.优化界面切换卡顿1.如果使用NavigatorIOS来进行界面切换很流畅,因为动画是在主线程上运行的,但如果使用Navigator有时会卡顿,因为他是跑在js线程上的,切换动画会使JS线程出现严重的掉帧 2.在RN中有一个InteractionManager组件,其作用让一些js操作在过渡动画完成之后执行,保证了动画的流程性,这是典型的牺牲时间换空间从而保证了帧数的高复用,比如界面的跳转: 1234567891011dealWithGoView(obj)&#123; let detailUrl = obj.detailUrl; const &#123;navigator&#125; = this.props; InteractionManager.runAfterInterations(() =&gt; &#123; navigator.push(&#123; component:GoDetailView, name:&apos;Login&apos;, props:&#123;detailUrl&#125; &#125;); &#125;);&#125; 五.让组件做到局部刷新1.利用RN的状态机机制,可以通过this.setState来控制界面刷新,但是一定会触发render方法,那如何保证不调用render方法还能做到局部刷新呢? 2.那就是通过setNativeProps,不适用state和props,直接修改RN自带的组件,比如View,Text,Image…而且可以做到不触发RN组件生命周期中的方法. 123456789101112131415var HomePage = React.creatClass(&#123; setNativeProps(nativeProps)&#123; this._view.setNativeProps(&#123; width:50, height:50, backgroundColor:&apos;yellow&apos; &#125;); &#125;, render()&#123; return( &lt;View ref=&#123;(e) =&gt; this._view = e&#125;/&gt; ) &#125;&#125;)","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记八","slug":"React-Native学习笔记八","date":"2016-08-16T12:58:15.000Z","updated":"2017-11-20T08:37:45.000Z","comments":true,"path":"2016/08/16/React-Native学习笔记八/","link":"","permalink":"//aolliu.win/2016/08/16/React-Native学习笔记八/","excerpt":"在开发中TabBar应用及其广泛,那么在React Native中如何做呢,使用TabBarIOS,可以看到是iOS的,Android是不可以用的,随后封装一个既可以在iOS上运行,又能在安卓上运行的TabBar 一.TabBarIOS常见的属性 1.View所有的属性都被继承 2.barTinColor color 设置tabBar的背景颜色 3.tintColor color 设置tabBar上被选中图标的颜色 4.translucent bool 设置tabBar栏是不是半透明的效果","text":"在开发中TabBar应用及其广泛,那么在React Native中如何做呢,使用TabBarIOS,可以看到是iOS的,Android是不可以用的,随后封装一个既可以在iOS上运行,又能在安卓上运行的TabBar 一.TabBarIOS常见的属性 1.View所有的属性都被继承 2.barTinColor color 设置tabBar的背景颜色 3.tintColor color 设置tabBar上被选中图标的颜色 4.translucent bool 设置tabBar栏是不是半透明的效果 二.TabBarIOS.Item常见属性 1.badge number 在图标右上方显示的红色小点 2.icon image.propTypes.source Tab按钮自定义图标,如果systemicon属性被定义了,该属性会被忽略 3.onPress function 当Tab按钮被选中的时候进行调用,你可以设置selected={true}来设置组件被选中 4.selected bool 该属性标志子页面是否可见,如果是一个空白的内容页,那么一定是忘了选中任何一个页面的标签Tab 5.selectedIcon image.propTypes.source 设置当Tab按钮选中的时候显示的自定义图标,如果systemicon属性被定义了,该属性会被忽略,如果定义了icon属性,但是当前的selectedIcon属性没有设置,那么该图标会被设置为蓝色 6.style 设置样式风格,继承view的样式各种风格 7.systemIcon enum(‘bookmarks’,’contacts’,’downloads’,’favorites’等),系统预定义的图标,如果是使用这些图标,那么你上面设置的标题,选中的图标都会被覆盖 8.title string 在tab图标下显示的标题,如果systemicon属性被定义了,该属性会被忽略 在开发中我们需要多个界面切换,这时候需要一个Navigate来实现各种效果的切换,在ReactNative中有两个组件实现这一效果Navigator和 NavigatorIOS,Navigator适配Android和iOS,而NavigatorIOS是包装了 UIKit中的导航功能,可以实现左滑返回 一.Navigator 如何实现不同页面(场景)的切换呢,他是通过路由对象来分辨不同的场景的,我们采用renderScene方法,根据指定的路由来渲染 1.常用属性 1.initialRoute={name:’home’,component:HomeScene}这个指定了默认的页面,也就是启动的组件页面 2.configureScene={()=&gt;{returnNavigator.SceneConfigs.HorizontalSwipeJump;}}页面之间跳转时候的动画手势,可以看这个目录:node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorSceneConfigs.js,比如:PushFromRight FloatFromRight FloatFromLeft FloatFromBottom FloatFromBottomAndroid HorizontalSwipeJump HorizontalSwipeJumpFromRight VerticalUpSwipeJump VerticalDownSwipeJump 等等 3.renderScene具体方法:(route,navigator)=&gt;&lt;MySceneComponent title={route.title}navigator={navigator}/&gt;两个参数中的route包含的是inital的时候传递的name和component,而navigator是一个我们需要用的Navigator的对象;所以当我们拿到route中的component的时候,我们就可以将navigator传递给她,正因为如此,我们的HomeScene才能通过this.props.navigator,拿到路由. 4.initialRouteStack[object]参数对象数组,这是一个初始化的路由数组进行初始化,如果initialRoute属性没有设置的话,就必须设置initialRouteStack属性,使用该最后一项作为初始路由,如果initialRouteStack属性没有设置的话,会生成值包含initialRoute值的数组 5.navigatorBar-node可选参数,在页面切换中用来提供一个导航栏 6.navigatorBar-object可选参数,可以从父类导航其中获取导航器对象 7.sceneStyle样式风格该属性继承View所有样式,用于设置每个页面容器的样式 2. 常用导航器方法当获取了导航器对象的引用,我们可以进行调用一下方法实现页面导航功能: 1.getCurrentRoutes() 该方法进行返回存在的路由列表信息 2.jumpBack() 该方法进行回退操作,但是该方法不会卸载(删除)当前的页面 3.jumpForward() 该方法进行跳转到相当于当前页面的下一个页面 4.jumpTo(route) 根据传入的一个路由信息,跳转到一个指定的页面(该页面不会被卸载和删除) 5.push(route) 导航切换到一个新的页面中,新的页面进行压入栈,通过jumpForward()方法可以回退回去 6.pop() 当前页面弹出来,跳转到栈中下一个页面,并且会卸载删除当前页面 7.replace(route) 只用传入的路由的指定页面进行替换掉当前的页面 8.replaceAtIndex(route,index) 传入路由以及位置索引,使用该路由指定的页面跳转到指定的页面 9.replacePrevious(route) 传入路由,通过指定路由的页面替换掉前一个页面 10.resetTo(route) 进行导航到新的界面,并且重置整个路由栈 11.immediatelyResetRouteStack(routeStack) 该方法通过一个路由页面数组来进行重置路由栈 12.popToRoute(route) 进行弹出相关页面,跳转到指定路由的页面,弹出来的页面会被卸载删除 13.popToTop()进行弹出页面,导航到栈中的第一个页面,弹出来的所有页面会被卸载删除 3. 默认写法12345678910111213&lt;Navigator initialRoute=&#123;&#123; name:defaultName, component:defaultComponent, &#125;&#125; configureScene=&#123;(route)=&gt;&#123; return Navigator.SceneConfigs.HorizontalSwipeJumpFromRight; &#125;&#125; renderScene=&#123;(route,navigator)=&gt;&#123; let component = route.Component; return &lt;Component &#123;...route.params&#125; navigator=&#123;navigator&#125;/&gt; &#125;&#125; /&gt; 二.Navigator.IOSNavigator.IOS 包装了UIKit的导航功能,可以使用左滑返回上一个界面 1.常用方法 1.push(route) 跳转到一个新的路由 2.pop()回到上一个页面 3.popN(n) 回到N页之前,当N=1时,效果和pop()一样 4.replace(route) 替换当前路由,并立即加载新路由的视图 5.replacePrevious(route) 替换上一页的路由/视图 6.replacePreviousAndPop(route) 替换上一页的路由/视图并且立即切换到上一页 7.resetTo(route) 替换最顶级的路由并且回到他, 8.popToRoute(route) 一直回到某个指定的路由 9.popToTop() 回到最顶层的路由 2.常用属性 1.barTintColor string 导航条的背景颜色 2.initialRoute 1234567891011121314initialRoute&#123; component:function,//路由到对应的板块 title:sting,//标题 passProps:object,//传递的参数 backButtonIcon:image.propTypes.source,//返回按钮 backButtonTitle:string,//返回按钮标题 leftButtonIcon:image.propTypes.source, leftButtonTitle:string, onLeftButtonPress:function, rightButtonIcon:image.propTypes.source, rightButtonTitle:string, onRightButtonPress:function, wrapperStyle:[object Object],&#125; NavigatorIOS使用路由对象来包含要渲染的子视图,他们的属性,以及导航条配置,push和任何其他的导航函数的参数都是这样的路由对象,例如 1234567pushToNewsDetail(rowData)&#123; this.props.navigator.push(&#123; title:&apos;新闻详情页&apos;, component:&apos;LVNewsDetail&apos;, passProps:&#123;rowData&#125;, &#125;);&#125; 3.itemWrapperStyle View #style 导航器中的组件的默认属性,一个常见的用途是设置所有页面的背景颜色 4.navigationBarHidden bool 决定导航条是否隐藏 5.shadowHidden bool 决定是否隐藏1像素的阴影 6.tintColor sting 导航栏上按钮的颜色 7.titleTextColor string 导航器标题的文字颜色 8.translucent bool 决定导航条是否半透明","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记七","slug":"React-Native学习笔记七","date":"2016-08-15T12:38:10.000Z","updated":"2017-11-20T08:01:09.000Z","comments":true,"path":"2016/08/15/React-Native学习笔记七/","link":"","permalink":"//aolliu.win/2016/08/15/React-Native学习笔记七/","excerpt":"简介: ES5,ES6都是对ECMAScript规范的补充,ES5已经大规模的使用,ES6目前可能在个别平台存在浏览器兼容问题. 他们之间的区别:1.创建组件: ES5: 1234567891011//创建组件类 ES5var LVFirstDemoFirstItem = React.createClass(&#123; render() &#123;//返回对应创建的控件 JSX语法 界面搭建 return ( &lt;View&gt; &lt;Text&gt;我是第一个应用ES5创建的组件&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;)","text":"简介: ES5,ES6都是对ECMAScript规范的补充,ES5已经大规模的使用,ES6目前可能在个别平台存在浏览器兼容问题. 他们之间的区别:1.创建组件: ES5: 1234567891011//创建组件类 ES5var LVFirstDemoFirstItem = React.createClass(&#123; render() &#123;//返回对应创建的控件 JSX语法 界面搭建 return ( &lt;View&gt; &lt;Text&gt;我是第一个应用ES5创建的组件&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;) ES6: 123456789101112//创建组件类 ES6class LVFirstDemoSecondItem extends React.Component &#123; //相当于viewdidload render() &#123;//返回对应创建的控件 JSX语法 界面搭建 return ( //只能返回一个顶级的view 封装控件 &lt;View&gt; &lt;Text&gt;我是第一个应用ES6创建的组件&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125; 2.组件的属性props所在位置不同在ES6中,props为属性:defaultProps可以标识static定义在class内,也可以定义在class外),而在ES5中,其为方法:getDefaultProps:function(){return{name:value}}; ES5: 12345678910111213141516171819202122//创建组件类 ES5var LVFirstDemoFirstItem = React.createClass(&#123; getDefaultProps()&#123; return&#123; name:&apos;liuwei&apos;, &#125; &#125;, propTypes()&#123; name:React.PropTypes.string &#125;,//属性校验器,说明name必须是string render() &#123;//返回对应创建的控件 JSX语法 界面搭建 return ( &lt;View&gt; &lt;Text&gt;我是第一个应用ES5创建的组件&lt;/Text&gt; &#123;/*变量用大括号标示*/&#125; &lt;Text&gt;my name is &#123;this.props.name&#125;&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;) ES6: 12345678910111213141516//创建组件类 ES6class LVFirstDemoSecondItem extends React.Component &#123; //相当于viewdidload render() &#123;//不能再定义组件的时候定义一个属性 return ( &lt;View&gt; &lt;Text&gt;我是第一个应用ES6创建的组件&lt;/Text&gt; &#123;/*变量用大括号标示*/&#125; &lt;Text&gt;my name is &#123;this.props.name&#125;&lt;/Text&gt; &lt;/View&gt; );//开头的花括号一定和小括号隔开一个空格,否则识别不出来 &#125;&#125;LVFirstDemoSecondItem.defaultProps=&#123;name:&apos;liuwei&apos;&#125;;//默认属性值LVFirstDemoSecondItem.prototype=&#123;name:React.PropTypes.string&#125;;//属性校验器,说明name必须是string 3.组件的状态state ES5: 12345678910111213141516171819202122232425262728//创建组件类 ES5var LVFirstDemoFirstItem = React.createClass(&#123; getDefaultProps()&#123; return&#123; name:&apos;liuwei&apos;, &#125; &#125;, propTypes()&#123; name:React.PropTypes.string &#125;,//属性校验器,说明name必须是string getInitialState()&#123; return&#123; boy:false &#125; &#125;, render() &#123;//返回对应创建的控件 JSX语法 界面搭建 return ( &lt;View&gt; &lt;Text&gt;我是第一个应用ES5创建的组件&lt;/Text&gt; &#123;/*变量用大括号标示*/&#125; &lt;Text&gt;my name is &#123;this.props.name&#125;&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;) ES6: 1234567891011121314151617181920//创建组件类 ES6class LVFirstDemoSecondItem extends React.Component &#123; //构造 constructor(props)&#123; super(props); //初始状态 this.state=&#123;boy:false&#125; &#125; //相当于viewdidload render() &#123;//不能再定义组件的时候定义一个属性 return ( &lt;View&gt; &lt;Text&gt;我是第一个应用ES6创建的组件&lt;/Text&gt; &#123;/*变量用大括号标示*/&#125; &lt;Text&gt;my name is &#123;this.props.name&#125;&lt;/Text&gt; &lt;/View&gt; );//开头的花括号一定和小括号隔开一个空格,否则识别不出来 &#125;&#125;","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记六","slug":"React-Native学习笔记六","date":"2016-08-12T13:48:06.000Z","updated":"2017-11-20T07:59:38.000Z","comments":true,"path":"2016/08/12/React-Native学习笔记六/","link":"","permalink":"//aolliu.win/2016/08/12/React-Native学习笔记六/","excerpt":"在oc中生命周期:oc:loadview viewdidload viewwillappear 等等 React Native中的组件也是有生命周期的,可以根据下图的执行顺序在对应的函数中做对应的操作,可以大致分为3个阶段","text":"在oc中生命周期:oc:loadview viewdidload viewwillappear 等等 React Native中的组件也是有生命周期的,可以根据下图的执行顺序在对应的函数中做对应的操作,可以大致分为3个阶段 一.实例化阶段:1. getDefaultProps : 创建展示作用: 1.该函数用户初始化一些默认的属性,通常会将固定的内容放到这个函数中进行初始化和赋值 2.上下界面传值 描述:在组件中,可以使用this.props获取在这里初始化他的属性,由于组件初始化后,再次使用该组件不会调用这个函数,所以组件自己不可以自己修改props(只读),只可以由其他组件外部调用他时在外部修改 2.getinitialState: 设置可改变的值作用: 该函数是用于对组件的一些状态进行初始化; 描述:一旦调用了this.setState方法.组件一定会调用render方法,对组件进行再次渲染,不过React框架会自动根据DOM的状态来判断是否需要真正的渲染,局部刷新 由于该函数不同于getDefaultProps,在以后的工程中,会再次调用,所以可以将控制控件的状态的一些变量放到这里初始化,如控件上显示的文字,可以通过this.state来获取,通过this.setState来修改state的值,比如: 12345changeValue()&#123; this.setState(&#123; age:this.state.age+1 &#125;);&#125; 3.componentWillMount:相当于viewWillAppear4.render:描述: render是一个组件中必须有的方法,本质是一个函数,并返回JSX或其他组件来构成DOM,和Android的XML布局类似. 只能返回一个顶级的元素 在render函数中,只可以通过this.state和this.props来访问在之前函数中初始化的数据值 5.componentDidMount描述: 在调用了render方法后,组件加载成功并被成功渲染出来以后,所要执行的后续操作,一般会这个函数中处理网络请求等加载数据的操作因为UI已经成功被渲染出来,所以放在这个函数中进行请求操作,不会出现UI上的错误 12345678910111213141516componentDidMout()&#123; this.fetchData();&#125;,fetchData()&#123; var me = this; fetch(me.props.api) .then(( response) =&gt; response.json()) .then(( responseData) =&gt; &#123; me.setState(&#123; dataSource: responseData.data &#125;); &#125;) .done(function()&#123; me.start(); &#125;);&#125; 二.存在阶段:循环 运行中三.销毁阶段总结:一:this.state 开发中会与用户交互,React的一个创新就是将组件看成一个状态机,一开始有一个初始状态,然后交互,导致状态改变,从而触发重新渲染UI,例如如果用户点击组件,导致状态改变this.setState方法修改状态值,每次修改调用render方法再次渲染组件 注意:this.props表示那些一旦定义就不会再改变的特性,而this.state会随着与用户的交互发生改变 二.获取真是的DOM节点 在React Native中,组件并不是真是的Dom节点,而是存在于内存之中的一种数据结构,叫做虚拟Dom(virtual Dom) 只有当它插入文档中以后才会变成真正的Dom react中所有的Dom操作都是现在虚拟的Dom上发生,然后在将实际变动的部分反映到真实的Dom上,这种算法叫做Dom diff它可以极大的提高应用的性能 从组件中获取真实的Dom,需要ref属性,比如点击按钮让其中的输入框获得焦点 1.先给组件绑定一个ref属性&lt;TextInput ref=&#39;nameText&#39;/&gt; 2.点击事件,获取真实Dom,获取焦点 123buttonClick()&#123; this.refs.nameText.focus();&#125; 如果想拿到输入框中的内容,就必须获取真实的Dom,虚拟的Dom是拿不到用户输入的","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记五","slug":"React-Native学习笔记五","date":"2016-08-10T12:18:01.000Z","updated":"2017-11-20T07:57:37.000Z","comments":true,"path":"2016/08/10/React-Native学习笔记五/","link":"","permalink":"//aolliu.win/2016/08/10/React-Native学习笔记五/","excerpt":"Navigator React Native目前有几个内置的导航器组件，一般来说首推Navigator。它使用纯JavaScript实现了一个导航栈，因此可以跨平台工作，同时也便于定制。 场景(Scene)的概念与使用 无论是View中包含Text，还是一个排满了图片的ScrollView，渲染各种组件现在来说应该已经得心应手了。这些摆放在一个屏幕中的组件，就共同构成了一个“场景（Scene）”。 场景简单来说其实就是一个全屏的React组件。","text":"Navigator React Native目前有几个内置的导航器组件，一般来说首推Navigator。它使用纯JavaScript实现了一个导航栈，因此可以跨平台工作，同时也便于定制。 场景(Scene)的概念与使用 无论是View中包含Text，还是一个排满了图片的ScrollView，渲染各种组件现在来说应该已经得心应手了。这些摆放在一个屏幕中的组件，就共同构成了一个“场景（Scene）”。 场景简单来说其实就是一个全屏的React组件。 123456789101112export default class MyScene extends Component&#123; static defaultProps = &#123; title:&apos;myScene&apos; &#125;; render() &#123; return ( &lt;View style=&#123;&#123;paddingTop:22,paddingBottom:5,justifyContent:&apos;center&apos;,alignItems:&apos;center&apos;,backgroundColor:&apos;red&apos;&#125;&#125;&gt; &lt;Text&gt;this is &#123;this.props.title&#125;&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125; 注意组件声明前面的export default关键字。它的意思是导出(export)当前组件，以允许其他组件引入(import)和使用当前组件，就像下面这样 1234567891011121314151617import React, &#123; Component &#125; from &apos;react&apos;;import &#123; AppRegistry &#125; from &apos;react-native&apos;;// ./MyScene表示的是当前目录下的MyScene.js文件，也就是我们刚刚创建的文件// 注意即便当前文件和MyScene.js在同一个目录中，&quot;./&quot;两个符号也是不能省略的！// 但是.js后缀是可以省略的import MyScene from &apos;./MyScene&apos;;class YoDawgApp extends Component &#123; render() &#123; return ( &lt;MyScene /&gt; ) &#125;&#125;AppRegistry.registerComponent(&apos;YoDawgApp&apos;, () =&gt; YoDawgApp); 现在已经创建了只有单个场景的App。其中的MyScene同时也是一个可复用的Reac组件。 使用Navigator 首先要做的是渲染一个Navigator组件，然后通过此组件的renderScene属性方法来渲染其他场景。 12345678910render() &#123; return ( &lt;Navigator initialRoute=&#123;&#123; title: &apos;My Initial Scene&apos;, index: 0 &#125;&#125; renderScene=&#123;(route, navigator) =&gt; &#123; &lt;MyScene title=&#123;route.title&#125; /&gt; &#125;&#125; /&gt; );&#125; 使用导航器经常会碰到“路由(route)”的概念。“路由”抽象自现实生活中的路牌，在RN中专指包含了场景信息的对象。renderScene方法是完全根据路由提供的信息来渲染场景的。你可以在路由中任意自定义参数以区分标记不同的场景. 将场景推入导航栈","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记四","slug":"React-Native学习笔记四","date":"2016-08-06T13:12:57.000Z","updated":"2017-11-20T07:55:13.000Z","comments":true,"path":"2016/08/06/React-Native学习笔记四/","link":"","permalink":"//aolliu.win/2016/08/06/React-Native学习笔记四/","excerpt":"网络请求 在开发中,从网络上加载数据是重点难点,尤其是在做细节优化方面,在React Native中通常使用Ajax请求从服务器获取数据,然后在componenrDidMount方法中创建Ajax请求,等到请求成功,再调用this.setState方法重新渲染UI. 什么是fetch fetch目前还不是W3C规范.与Ajax不同的是,他的API不是事件机制,而是采用了目前流行的Promise方法处理 fetch学习资料","text":"网络请求 在开发中,从网络上加载数据是重点难点,尤其是在做细节优化方面,在React Native中通常使用Ajax请求从服务器获取数据,然后在componenrDidMount方法中创建Ajax请求,等到请求成功,再调用this.setState方法重新渲染UI. 什么是fetch fetch目前还不是W3C规范.与Ajax不同的是,他的API不是事件机制,而是采用了目前流行的Promise方法处理 fetch学习资料 使用fetch React Native提供了和web标准一致的Fetch API，用于满足开发者访问网络的需求。 发起网络请求 要从任意地址获取内容的话，只需简单地将网址作为参数传递给fetch方法即可:fetch(&#39;https://www.baidu.com&#39;) Fetch还有可选的第二个参数，可以用来定制HTTP请求一些参数。你可以指定header参数，或是指定使用POST方法，又或是提交数据等等; 1234567891011fetch(&apos;http://www.baidu.com&apos;,&#123; method: &apos;POST&apos;, header: &#123; &apos;Accept&apos;:&apos;application/json&apos;, &apos;Content-Type&apos;:&apos;application/json&apos;, &#125;, body:JSON.stringify(&#123; firstParam:&apos;yourValue&apos;, SecondParam:&apos;yourOtherValue&apos;, &#125;)&#125;) 译注：如果你的服务器无法识别上面POST的数据格式，那么可以尝试传统的form格式，示例如下： 1234567fetch(&apos;http://www.baidu.com&apos;,&#123; method:&apos;POST&apos;, header:&#123; &apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;, &#125;, body:&apos;key1=value1&amp;key2=value2&apos;&#125;) 处理服务器的响应数据 网络请求天然是一种异步操作,fetch方法会返回一个Promise,这中模式可以简化异步风格的代码. 1234567891011121314151617181920getMoviesFromApiAsync()&#123; return fetch(&apos;http://http://facebook.github.io/react-native/movies.json&apos;) .then((response) =&gt; response.json()) .then((responseJson) =&gt; &#123; resultData.shopData = responseJson.data; this.setState(&#123; dataSource:this.getDataSource(responseJson.data), &#125;); &lt;!--return responseJson.movies;--&gt; &#125;) .catch((error) =&gt; &#123; console.error(error); resultData.shopData = undifined; this.setState(&#123; dataSource:this.getDataSource([]), isLoading:false &#125;); &#125;); .done();&#125; 也可以在React Native应用中使用async/await 语法: 1234567891011//注意在这个方法前面有async关键字 async getMoviesFromApi()&#123; try&#123; //注意这里的await语句,器所在的函数必须有async关键字声明 let response = await fetch(&apos;http://http://facebook.github.io/react-native/movies.json&apos;); let responseJson = await response.json(); return responseJson.movies; &#125;catch(error)&#123; console.error(error) &#125; &#125; 在这里catch住fetch可能抛出的异常,不然出错的时候看不到任何的提示. 其他的网络库 React Native中已经内置了XMLHttpRequest API(也就是俗称的ajax)。一些基于XMLHttpRequest封装的第三方库也可以使用，例如frisbee或是axios等。但注意不能使用jQuery，因为jQuery中还使用了很多浏览器中才有而RN中没有的东西（所以也不是所有web中的ajax库都可以直接使用）。 123456789101112131415var request = new XMLHttpRequest();request.onreadystatechange = (e) =&gt; &#123; if (request.readyState !== 4) &#123; return; &#125; if (request.status === 200) &#123; console.log(&apos;success&apos;, request.responseText); &#125; else &#123; console.warn(&apos;error&apos;); &#125;&#125;;request.open(&apos;GET&apos;, &apos;https://mywebsite.com/endpoint/&apos;);request.send(); 注意:安全机制与网页环境有所不同,在应用中你可以访问任何网站,没有跨域的限制. WebSocket支持 React Native还支持WebSocket,这种协议可以在当个TCP连接上提供双工的通信信道. 12345678910111213 var ws = new WebSocket(&apos;ws://host.com/path&apos;); ws.onopen = () =&gt; &#123;//打开一个链接 ws.send(&apos;something&apos;);//发送一条消息&#125;; ws.onmessage = (e) =&gt; &#123;//接受到了一条消息 console.log(e.data);&#125;; ws.onerror = (e) =&gt; &#123;//发生了一个错误 console.log(e.message);&#125;; ws.onclose = (e) =&gt; &#123;//连接被关闭 console.log(e.code,e.reason);&#125;;","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记三","slug":"React-Native学习笔记三","date":"2016-08-05T12:27:52.000Z","updated":"2017-11-20T07:53:28.000Z","comments":true,"path":"2016/08/05/React-Native学习笔记三/","link":"","permalink":"//aolliu.win/2016/08/05/React-Native学习笔记三/","excerpt":"ScrollView ScrollView是一个通用的可滚动的容器，你可以在其中放入多个组件和视图，而且这些组件并不需要是同类型的。ScrollView不仅可以垂直滚动，还能水平滚动（通过horizontal属性来设置）。 ScrollView适合用来显示数量不多的滚动元素。放置在ScollView中的所有组件都会被渲染，哪怕有些组件因为内容太长被挤出了屏幕外。如果你需要显示较长的滚动列表，那么应该使用功能差不多但性能更好的ListView组件。","text":"ScrollView ScrollView是一个通用的可滚动的容器，你可以在其中放入多个组件和视图，而且这些组件并不需要是同类型的。ScrollView不仅可以垂直滚动，还能水平滚动（通过horizontal属性来设置）。 ScrollView适合用来显示数量不多的滚动元素。放置在ScollView中的所有组件都会被渲染，哪怕有些组件因为内容太长被挤出了屏幕外。如果你需要显示较长的滚动列表，那么应该使用功能差不多但性能更好的ListView组件。 ListView ListView组件用于显示一个垂直的滚动列表，其中的元素之间结构近似而仅数据不同。 ListView更适于长列表数据，且元素个数可以增删。和ScrollView不同的是，ListView并不立即渲染所有元素，而是优先渲染屏幕上可见的元素。 ListView组件必须的两个属性是dataSource和renderRow。dataSource是列表的数据源，而renderRow则逐个解析数据源中的数据，然后返回一个设定好格式的组件来渲染。 下面的例子创建了一个简单的ListView，并预设了一些模拟数据。首先是初始化ListView所需的dataSource，其中的每一项（行）数据之后都在renderRow中被渲染成了Text组件，最后构成整个ListView。 rowHasChanged函数也是ListView的必需属性。这里我们只是简单的比较两行数据是否是同一个数据（===符号只比较基本类型数据的值，和引用类型的地址）来判断某行数据是否变化了。 12345678910111213141516171819202122class QRCodePay extends Component&#123; // 初始化模拟数据 constructor(props) &#123; super(props); const ds = new ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;); this.state = &#123; dataSource: ds.cloneWithRows([ &apos;John&apos;, &apos;Joel&apos;, &apos;James&apos;, &apos;Jimmy&apos;, &apos;Jackson&apos;, &apos;Jillian&apos;, &apos;Julie&apos;, &apos;Devin&apos; ]) &#125;; &#125; render() &#123; return ( &lt;View style=&#123;&#123;flex:1,paddingTop:22&#125;&#125;&gt; &lt;ListView dataSource = &#123;this.state.dataSource&#125; renderRow = &#123;(rowData)=&gt; &lt;Text&gt;&#123;rowData&#125;&lt;/Text&gt;&#125; style = &#123;&#123;height:40,backgroundColor:&apos;red&apos;,marginTop:5&#125;&#125; /&gt; &lt;/View&gt; ); &#125;&#125; ListView 组件ListView组件是React Native核心组件之一,应用十分的广泛,主要是高效的展示列表数据 一.基本使用1.首先创建一个ListView.DataSource数据源,然后给它传递一个普通的数据数组 因为数据源在初始化后会改变,所以放到getInitialState方法中,代码如下 2.使用数据源(dataSource)实例化一个ListView组件,定义一个renderRow回调函数,这个函数会接受数组中的每个数据作为参数,返回一个可渲染的组件(就是listView每一行的item)1234567891011121314151617181920212223242526272829303132333435363738394041var LVList = React.createClass(&#123; // 初始化模拟数据 getInitialState: function() &#123; //创建数据源 DataSource是大写 返回新数据的条件是当且仅当两行数据不一样的时候返回新数据 var ds = new ListView.DataSource(&#123;rowHasChanged: (r1, r2) =&gt; r1 !== r2&#125;); this.state = &#123; //构造假数据 固定写法,传一个普通的数组 dataSource: ds.cloneWithRows([&apos;row 1&apos;, &apos;row 2&apos;,&apos;row 3&apos;]), &#125;; &#125;, render() &#123; return ( &lt;View style=&#123;&#123;flex:1&#125;&#125;&gt; &lt;ListView dataSource=&#123;this.state.dataSource&#125; renderRow=&#123;this.renderRow&#125; /&gt; &lt;/View&gt; ); &#125;, //返回每一行的组件 renderRow: function(rowData: string, sectionID: number, rowID: number) &#123; return ( //添加点击事件 &lt;TouchableOpacity onPress=&#123;()=&gt;&#123;alert(&apos;点击了第&apos;+sectionID+&apos;组的第&apos;+rowID+&apos;行&apos;)&#125;&#125; &gt; &lt;View style=&#123;styles.rowContainer&#125;&gt; &lt;View style=&#123;styles.row&#125;&gt; &lt;Image style=&#123;styles.thumb&#125; source=&#123;&#123;uri:Imgs[0]&#125;&#125; /&gt; &lt;Text style=&#123;&#123;flex:1,fontSize:16,color:&apos;blue&apos;,marginLeft:50,&#125;&#125;&gt; &#123;rowData + &apos;测试~&apos;&#125; &lt;/Text&gt; &lt;/View&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; );&#125;,&#125;) 二.常用属性 1.ScrolView的相关属性样式都全部继承 2.dataSource:ListViewDataSource设置ListView的数据源 3.initialListSize:(number) 设置ListView组件刚刚加载的时候渲染的列表行数,用这个属性确认首页加载的数据数量,而不是花大量的时间渲染大量的数据,提高性能 4.onChangeVisiableRows: (funtion) (visiableRows,changeRows)=&gt;Void 当可变的行发生变化时回调该方法. 5.onEndReachedThreshold:(number) 当偏移量达到设置的临界值时调用ononEndReached 6.ononEndReached:(function) 当所有的数据行被渲染之后,并且列表往下进行滚动,一直滚动到距离底部onEndReachedThreshold设置的值进行回调该方法,原生的滚动时间进行传递(通过参数的形式) 7.pageSize:(number) 每一次事件的循环渲染的行数 8.removeClippedSubviews:(bool) 该属性用于提供大数据列表的滚动性能,该使用的时候需要给每一行(row)的布局挺添加over:hidden样式,该属性默认是开启状态. 9.renderFooter:(function)方法 ()=&gt;renderable 在每次渲染过程中头和尾会重新进行渲染,如果发现该重新绘制的性能开销比较大的时候可以使用StaticContainer容器或者其他合适的组件. 10,renderHeader:(function)方法 (rowData,sectionID,rowID,highlightRow)=&gt;renderable 该方法有四个参数,其中分别为数据源中的一条数据,分组id,行id,以及标记是否是高亮选中状态信息 11.renderScrollComponent:(function)方法 (props)=&gt;renderable 该方法可以返回一个可以滚动的组件,默认返回一个ScrollView 12.renderSectionHeader(function)方法 (sectionData,sectionID)=&gt;renderable 如果设置了该方法,这样会为每一个section渲染一个粘性的header试图,该试图粘性的效果是当刚刚被渲染开始的时候,该试图会处于对应的内容的顶部,然后开始滑动的时候,会跑到屏幕的顶部,知道滑动到下一个section的header,知道被替换 13.renderSeparator (function)方法 (sectionID,rowID,adjacentRowHighlighted)=&gt;renderable 如果设置了该方法,会在被每一行的下面渲染一个组件作为分割,除了每一个section分组的头部试图前面的最后一行 14,scrollRenderAheadDistance(number) 进行设置当改行进入屏幕多少像素之后就开始渲染 三.高级特性 listView有一些高级特性,包括设置每一组的头部,支持设置列表的header以及footer试图,当数据列表滑动到最底部的时候支持onEndReached方法回调,设备屏幕列表可见的试图数据发生变化的时候回调onChangeVisiableRows以及一些性能方面的优化特性 当需要动态加载非常多的数据的时候,可以使用下面的一些性能优化的方法,让滚动更加平滑: 1).只更新渲染数据变化的那一行,rowHasChanged方法会告诉ListView组件是否需要重新渲染当前那一行 2).选择渲染的频率.默认情况下每一个event-loop(事件循环)只会渲染一行(可以同pageSize自定义属性设置),这样可以把大的工作量分割,提高整体的渲染性能. 四.注意事项 在React Native中ScrollView组件可以使用stickyHeaderIndices轻松实现sticky效果,而是用ListView时,使用不生效. 如何实现滚动时每个section header会吸顶呢 在ListView中要实现sticky,需要使用cloneWithRowsAndSections方法,将dataBlob(object),sectionIDs(array),rowIDs(array)三者传进去 1&gt;dataBlob 它包含ListView所需的所有的数据(section header 和rows),在listView渲染数据的时候,使用getSectionData和getRowData来渲染每一行的数据,dataBlob的key值包含 sectionID + rowID 2&gt;sectionIDs:用于标识每组的seciton 3&gt;rowIDs:用于描述每个section里面的每行数据的位置及是否需要渲染,在ListView渲染时,会先遍历rowIDs 获取到对应的dataBlob数据.","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记二","slug":"React-Native学习笔记二","date":"2016-08-03T14:17:00.000Z","updated":"2017-11-20T07:52:10.000Z","comments":true,"path":"2016/08/03/React-Native学习笔记二/","link":"","permalink":"//aolliu.win/2016/08/03/React-Native学习笔记二/","excerpt":"Props（属性） 大多数组件在创建时就可以使用各种参数来进行定制。用于定制的这些参数就称为props（属性）。 以常见的基础组件Image为例，在创建一个图片时，可以传入一个名为source的prop来指定要显示的图片的地址，以及使用名为style的prop来控制其尺寸。 请注意{pic}外围有一层括号，我们需要用括号来把pic这个变量嵌入到JSX语句中。括号的意思是括号内部为一个js变量或表达式，需要执行后取值。因此我们可以把任意合法的JavaScript表达式通过括号嵌入到JSX语句中。 自定义的组件也可以使用props。通过在不同的场景使用不同的属性定制，可以尽量提高自定义组件的复用范畴。只需在render函数中引用this.props，然后按需处理即可。","text":"Props（属性） 大多数组件在创建时就可以使用各种参数来进行定制。用于定制的这些参数就称为props（属性）。 以常见的基础组件Image为例，在创建一个图片时，可以传入一个名为source的prop来指定要显示的图片的地址，以及使用名为style的prop来控制其尺寸。 请注意{pic}外围有一层括号，我们需要用括号来把pic这个变量嵌入到JSX语句中。括号的意思是括号内部为一个js变量或表达式，需要执行后取值。因此我们可以把任意合法的JavaScript表达式通过括号嵌入到JSX语句中。 自定义的组件也可以使用props。通过在不同的场景使用不同的属性定制，可以尽量提高自定义组件的复用范畴。只需在render函数中引用this.props，然后按需处理即可。 12345678910111213141516171819class Greeting extends Component &#123; render() &#123; return ( &lt;Text&gt;Hello &#123;this.props.name&#125;!&lt;/Text&gt; ); &#125;&#125;class LotsOfGreetings extends Component &#123; render() &#123; return ( &lt;View style=&#123;&#123;alignItems: &apos;center&apos;&#125;&#125;&gt; &lt;Greeting name=&apos;Rexxar&apos; /&gt; &lt;Greeting name=&apos;Jaina&apos; /&gt; &lt;Greeting name=&apos;Valeera&apos; /&gt; &lt;/View&gt; ); &#125;&#125; image:加载方式 1.从当前项目中加载图片:静态图片资源 12// ./ 跳到根目录 ../跳到上一级目录&lt;Image source=&#123;require(&apos;路径&apos;)&#125;/&gt; 2.加载app中的图片 1&lt;Image source=&#123;require(&apos;image!图片名&apos;)&#125;/&gt; 3.加载网络图片 12//网络图片一定要指定图片大小&lt;Image source=&#123;&#123;uri:&apos;地址&apos;&#125;&#125; style=&#123;&#123;width:120,heitht:80&#125;/&gt; 4.从app中加载图片(另一种方式) 12//网络图片一定要指定图片大小&lt;Image source=&#123;&#123;uri:&apos;图片名&apos;&#125;&#125; style=&#123;&#123;width:120,heitht:80&#125;/&gt; 5.把图片设置为背景 1234&lt;Image source=&#123;require(&apos;./image/img_03.jpg&apos;)&#125;&gt; &lt;Text style=&#123;&#123;marginTop:30,backgroundColor:&apos;rgba(0,0,0,0)&apos;&#125;&#125;&gt;我是文字1&lt;/Text&gt; &lt;Text style=&#123;&#123;marginTop:30,backgroundColor:&apos;transparent&apos;&#125;&#125;&gt;我是文字2&lt;/Text&gt;&lt;/Image&gt; -6.设置图片的内容模式 1.cover:图片居中显示,没有被拉伸,超出部分被截取 2.contain:容器完全容纳图片,图片等比例拉伸 3.stretch:图片被拉伸适应容器大小,有可能会变形 12// ./ 跳到根目录 ../跳到上一级目录&lt;Image source=&#123;require(&apos;路径&apos;)&#125; style=&#123;&#123;width:120,height:150,resizeMode:&apos;cover&apos; &#125;&#125;/&gt; 常见属性: onLayout(function)当image布局发生改变时调用该方法 State（状态） 我们使用两种数据来控制一个组件：props和state。props是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。 对于需要改变的数据，我们需要使用state. 一般来说，需要在constructor中初始化state，然后在需要修改时调用setState方法。 1234567891011121314151617181920212223242526272829303132class Blink extends Component &#123; constructor(props) &#123; super(props); this.state = &#123; showText: true &#125;; // 每1000毫秒对showText状态做一次取反操作 setInterval(() =&gt; &#123; this.setState(&#123; showText: !this.state.showText &#125;); &#125;, 1000); &#125; render() &#123; // 根据当前showText的值决定是否显示text内容 let display = this.state.showText ? this.props.text : &apos; &apos;; return ( &lt;Text&gt;&#123;display&#125;&lt;/Text&gt; ); &#125;&#125;class BlinkApp extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;Blink text=&apos;I love to blink&apos; /&gt; &lt;Blink text=&apos;Yes blinking is so great&apos; /&gt; &lt;Blink text=&apos;Why did they ever take this out of HTML&apos; /&gt; &lt;Blink text=&apos;Look at me look at me look at me&apos; /&gt; &lt;/View&gt; ); &#125;&#125; 处理文本框的输入 TextInput是一个允许用户输入文本的基本组件,他有一个onChangeText属性,此属性接受一个函数,这个函数在文本变化的时候会被调用,还有一个onSubmitEditing的属性,在文本被提交后调用. 在下面例子中,text保存到state中,因为会随着时间变化 123456789101112131415161718192021class QRCodePay extends Component&#123; constructor(props) &#123; super(props); this.state = &#123;text: &apos;&apos;&#125;; &#125; render() &#123; return ( &lt;View style=&#123;&#123;padding: 10&#125;&#125;&gt; &lt;TextInput style=&#123;&#123;height: 40&#125;&#125; placeholder=&quot;Type here to translate!&quot; onChangeText=&#123;(text) =&gt; this.setState(&#123;text&#125;)&#125; /&gt; &lt;Text style=&#123;&#123;padding: 10, fontSize: 42&#125;&#125;&gt; &#123;this.state.text.split(&apos; &apos;).map((word) =&gt; word &amp;&amp; &apos;🍕&apos;).join(&apos; &apos;)&#125; &lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native学习笔记一","slug":"React-Native学习笔记一","date":"2016-08-03T12:36:38.000Z","updated":"2017-11-20T07:49:30.000Z","comments":true,"path":"2016/08/03/React-Native学习笔记一/","link":"","permalink":"//aolliu.win/2016/08/03/React-Native学习笔记一/","excerpt":"React Native的第一个应用一.执行命令react-native init 项目名称,生成一个工程 注意:第一次创建项目的时候,之后再创建就会很快,这个过程可能很长很长时间,一定要有耐心,可以先做别的,然后随后再回来看看. 二.目录结构分析 1.默认生成android和ios两个平台的原生项目; 2.其中index.Android.js和index.ios.js文件为Android和ios的空壳应用文件; 3.此外,node_modules文件夹是为Node.js存放和管理npm包资源,也包含React Native框架文件","text":"React Native的第一个应用一.执行命令react-native init 项目名称,生成一个工程 注意:第一次创建项目的时候,之后再创建就会很快,这个过程可能很长很长时间,一定要有耐心,可以先做别的,然后随后再回来看看. 二.目录结构分析 1.默认生成android和ios两个平台的原生项目; 2.其中index.Android.js和index.ios.js文件为Android和ios的空壳应用文件; 3.此外,node_modules文件夹是为Node.js存放和管理npm包资源,也包含React Native框架文件 三.运行工程文件 打开Xcode，运行你的第一个React Native创建的iOS应用 把React Native创建的应用跑在Android上 四.管理React Native库的版本 在开发中，会经常的去控制React Native的版本库，得以适配各种条件下的开发，那该如何查看、控制ReactNative的版本呢？ 1.命令行输入react-native --version查看本地的React Native的版本 2.命令行输入npm update -g react-native-cli更新本地的React Native的版本 3.命令行输入npm info react-native查询react-native的npm包最新版本 4.升级或者降级npm包的版本.npm install --save react-native@0.26 五.WebStom设置React Native代码提示 在WebStom中是没有React Native代码提示的,可以从网上下载xml插件 1.从gitHub上下载xml插件 2.安装将ReactNative.xml复制到~/Library/Preferences/WebStorm10/templates，然后重启 WebStrom 注意如果没有templates可以自己创建一个叫做templates的文件件,然后复制粘贴进去","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React组件化思想与Flux架构模式","slug":"React组件化思想与Flux架构模式","date":"2016-08-01T15:56:25.000Z","updated":"2017-11-20T07:48:15.000Z","comments":true,"path":"2016/08/01/React组件化思想与Flux架构模式/","link":"","permalink":"//aolliu.win/2016/08/01/React组件化思想与Flux架构模式/","excerpt":"ReactReact倾向于做传统MVC架构中的View 一,划分组件 React中划分组件的依据是单一责任原则,组件划分的越细,负责的事越少,维护越简单,逻辑越清晰 二.编写静态版本 React一个重要原则就是,让组件尽可能的是无状态的,大多数情况下,组件自身是没有状态的,只是从父组件接受一下属性,根据这些属性进行渲染,父组件自身维护了一些状态,通过props来传给子组件,而使UI发生变化.","text":"ReactReact倾向于做传统MVC架构中的View 一,划分组件 React中划分组件的依据是单一责任原则,组件划分的越细,负责的事越少,维护越简单,逻辑越清晰 二.编写静态版本 React一个重要原则就是,让组件尽可能的是无状态的,大多数情况下,组件自身是没有状态的,只是从父组件接受一下属性,根据这些属性进行渲染,父组件自身维护了一些状态,通过props来传给子组件,而使UI发生变化. 三.添加状态 状态需要包含那些仅与自身有关(不需要父组件决定),并且在组件的回调函数中会发生变化(指的是用户的行为导致变化),并且会体现在UI上的信息 四.通讯 我们不是把一些小的组件直接组合起来形成一个完整的App,而是将这些组件又组合到一个组合的集合,这样做就是希望这个组件集合体负责业务逻辑,整合信息,避免在小组件中UI渲染和业务逻辑的杂糅,提高的通用性,降低了后期业务逻辑发生变化带来的维护成本 如何通讯 React完成父-子组件通讯通过props完成,子-父通讯通过绑定一个回调函数来完成,但是祖孙,兄弟,或者灭有明显关系的情况如何处理? Flux架构推荐我们使用事件订阅的方式来完成这样的通讯,具体完成方式见后面拓展 Flux React相当于MVC中的V,Flux相当于添加M和C,他是一套架构模式 主要内容:(比喻有点儿不恰当,但是方便理解) Dispatcher:处理动作分发,维护Store直接的依赖关系,相当于一个物流中心,主管分发货物 Store:数据和逻辑部分,相当于一个商店,卖东西 Views:React组件,可以看做是controller-view,作为试图同时响应事件,相当于购物者,买东西 Action:提供给dispatcher传递数据给store,可以看成是货物 核心概念:单向数据流 Action -&gt;Dispatcher-&gt;Store-&gt;View-&gt;Action 大致流程如下: 首先由action,定义一些方法,用来提供给dispatcher,相当于有工场生产商品,提供给物流中心 用户通过与view交互触发事件,相当于用户打电话说我要什么东西 Dispatcher会分发触发的Action给所有注册的Store的回调函数,相当于物流中心不知道用于具体在哪,只能把货物同时给了在他这里注册过的商店(不很恰当) Store回调函数根据接受到的Action更新自身数据之后会触发一个change事件通知View数据改变了,相当于货物到达商店时,商店先把自己的货架更新了,然后打电话告诉用户来货了 View会监听这个change事件,拿到对应的新数据并调用setState更新组件UI,相当于用户一直在等这个电话,收到货到的电话时,就去商店拿到对应的货物,然后开开心心的拿着东西去打游戏了 所有的状态都是由Store维护,通过Action传递数据,构成了上述单向数据循环,所以在应用中各部分分工明确,高度解耦 一.Dispatcher 一个应用只需要一个 dispatcher 作为分发中心，管理所有数据流向，分发动作给 Store，没有太多其他的逻辑 dispatcher 只是一个粘合剂，剩余的 Store、View、Action 就需要按具体需求去实现了。 Dispatcher分发动作给 Store 注册的回调函数，这和一般的订阅/发布模式不同的地方在于： 1.回调函数不是订阅到某一个特定的事件/频道，每个动作会分发给所有注册的回调函数 2.回调函数可以指定在其他回调之后调用 Dispatcher 提供的 API : 1.register(function callback): string 注册回调函数，返回一个 token 供在 waitFor() 使用 2.unregister(string id): void 通过 token 移除回调 3.waitFor(array ids): void 在指定的回调函数执行之后才执行当前回调。这个方法只能在分发动作的回调函数中使用 4.dispatch(object payload): void 分发动作 payload 给所有注册回调 5.isDispatching(): boolean 返回 Dispatcher 当前是否处在分发的状态 二.Action 首先要创建动作，通过定义一些 action creator 方法来创建，这些方法用来暴露给外部调用，通过 dispatch 分发对应的动作，所以 action creator 也称作 dispatcher helper methods 辅助 dipatcher 分发. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374var AppDispatcher = require(&apos;../dispatcher/AppDispatcher&apos;);var TodoConstants = require(&apos;../constants/TodoConstants&apos;);var TodoActions = &#123; /** * @param &#123;string&#125; text */ create: function(text) &#123; AppDispatcher.dispatch(&#123; actionType: TodoConstants.TODO_CREATE, text: text &#125;); &#125;, /** * @param &#123;string&#125; id The ID of the ToDo item * @param &#123;string&#125; text */ updateText: function(id, text) &#123; AppDispatcher.dispatch(&#123; actionType: TodoConstants.TODO_UPDATE_TEXT, id: id, text: text &#125;); &#125;, /** * Toggle whether a single ToDo is complete * @param &#123;object&#125; todo */ toggleComplete: function(todo) &#123; var id = todo.id; var actionType = todo.complete ? TodoConstants.TODO_UNDO_COMPLETE : TodoConstants.TODO_COMPLETE; AppDispatcher.dispatch(&#123; actionType: actionType, id: id &#125;); &#125;, /** * Mark all ToDos as complete */ toggleCompleteAll: function() &#123; AppDispatcher.dispatch(&#123; actionType: TodoConstants.TODO_TOGGLE_COMPLETE_ALL &#125;); &#125;, /** * @param &#123;string&#125; id */ destroy: function(id) &#123; AppDispatcher.dispatch(&#123; actionType: TodoConstants.TODO_DESTROY, id: id &#125;); &#125;, /** * Delete all the completed ToDos */ destroyCompleted: function() &#123; AppDispatcher.dispatch(&#123; actionType: TodoConstants.TODO_DESTROY_COMPLETED &#125;); &#125;&#125;;module.exports = TodoActions; AppDispatcher 直接继承自 Dispatcher.js，在这个例子中没有提供什么额外的功能。TodoConstants 定义了动作的类型名称常量。 类似 create、updateText 就是 action creator，这两个动作会通过 View 上的用户交互触发。除了用户交互会创建动作，服务端接口调用也可以用来创建动作，比如通过Ajax请求的一些初始数据也可以创建动作提供给 dispatcher，再分发给 store 使用这些初始数据。 可以看到所谓动作就是用来封装传递数据的，动作只是一个简单的对象，包含两部分：payload（数据）和 type（类型），type 是一个字符串常量，用来标识动作。 三.Store Stores 包含应用的状态和逻辑，不同的Store管理应用中不同部分的状态。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163var AppDispatcher = require(&apos;../dispatcher/AppDispatcher&apos;);var EventEmitter = require(&apos;events&apos;).EventEmitter;var TodoConstants = require(&apos;../constants/TodoConstants&apos;);var assign = require(&apos;object-assign&apos;);var CHANGE_EVENT = &apos;change&apos;;var _todos = &#123;&#125;;/** * Create a TODO item. * @param &#123;string&#125; text The content of the TODO */function create(text) &#123; // Hand waving here -- not showing how this interacts with XHR or persistent // server-side storage. // Using the current timestamp + random number in place of a real id. var id = (+new Date() + Math.floor(Math.random() * 999999)).toString(36); _todos[id] = &#123; id: id, complete: false, text: text &#125;;&#125;/** * Update a TODO item. * @param &#123;string&#125; id * @param &#123;object&#125; updates An object literal containing only the data to be * updated. */function update(id, updates) &#123; _todos[id] = assign(&#123;&#125;, _todos[id], updates);&#125;/** * Update all of the TODO items with the same object. * @param &#123;object&#125; updates An object literal containing only the data to be * updated. */function updateAll(updates) &#123; for (var id in _todos) &#123; update(id, updates); &#125;&#125;/** * Delete a TODO item. * @param &#123;string&#125; id */function destroy(id) &#123; delete _todos[id];&#125;/** * Delete all the completed TODO items. */function destroyCompleted() &#123; for (var id in _todos) &#123; if (_todos[id].complete) &#123; destroy(id); &#125; &#125;&#125;var TodoStore = assign(&#123;&#125;, EventEmitter.prototype, &#123; /** * Tests whether all the remaining TODO items are marked as completed. * @return &#123;boolean&#125; */ areAllComplete: function() &#123; for (var id in _todos) &#123; if (!_todos[id].complete) &#123; return false; &#125; &#125; return true; &#125;, /** * Get the entire collection of TODOs. * @return &#123;object&#125; */ getAll: function() &#123; return _todos; &#125;, emitChange: function() &#123; this.emit(CHANGE_EVENT); &#125;, /** * @param &#123;function&#125; callback */ addChangeListener: function(callback) &#123; this.on(CHANGE_EVENT, callback); &#125;, /** * @param &#123;function&#125; callback */ removeChangeListener: function(callback) &#123; this.removeListener(CHANGE_EVENT, callback); &#125;&#125;);// Register callback to handle all updatesAppDispatcher.register(function(action) &#123; var text; switch(action.actionType) &#123; case TodoConstants.TODO_CREATE: text = action.text.trim(); if (text !== &apos;&apos;) &#123; create(text); TodoStore.emitChange(); &#125; break; case TodoConstants.TODO_TOGGLE_COMPLETE_ALL: if (TodoStore.areAllComplete()) &#123; updateAll(&#123;complete: false&#125;); &#125; else &#123; updateAll(&#123;complete: true&#125;); &#125; TodoStore.emitChange(); break; case TodoConstants.TODO_UNDO_COMPLETE: update(action.id, &#123;complete: false&#125;); TodoStore.emitChange(); break; case TodoConstants.TODO_COMPLETE: update(action.id, &#123;complete: true&#125;); TodoStore.emitChange(); break; case TodoConstants.TODO_UPDATE_TEXT: text = action.text.trim(); if (text !== &apos;&apos;) &#123; update(action.id, &#123;text: text&#125;); TodoStore.emitChange(); &#125; break; case TodoConstants.TODO_DESTROY: destroy(action.id); TodoStore.emitChange(); break; case TodoConstants.TODO_DESTROY_COMPLETED: destroyCompleted(); TodoStore.emitChange(); break; default: // no op &#125;&#125;);module.exports = TodoStore; 在 Store 注册给 dispatcher 的回调函数中会接受到分发的 action，因为每个 action 都会分发给所有注册的回调，所以回调函数里面要判断这个 action 的 type 并调用相关的内部方法处理更新 action 带过来的数据（payload），再通知 view 数据变更。 Store 里面不会暴露直接操作数据的方法给外部，暴露给外部调用的方法都是 Getter 方法，没有 Setter 方法，唯一更新数据的手段就是通过在 dispatcher 注册的回调函数。 四.ViewView就是React组件,从Store获取状态(数据),绑定change事件处理, 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657var Footer = require(&apos;./Footer.react&apos;);var Header = require(&apos;./Header.react&apos;);var MainSection = require(&apos;./MainSection.react&apos;);var React = require(&apos;react&apos;);var TodoStore = require(&apos;../stores/TodoStore&apos;);/** * Retrieve the current TODO data from the TodoStore */function getTodoState() &#123; return &#123; allTodos: TodoStore.getAll(), areAllComplete: TodoStore.areAllComplete() &#125;;&#125;var TodoApp = React.createClass(&#123; getInitialState: function() &#123; return getTodoState(); &#125;, componentDidMount: function() &#123; TodoStore.addChangeListener(this._onChange); &#125;, componentWillUnmount: function() &#123; TodoStore.removeChangeListener(this._onChange); &#125;, /** * @return &#123;object&#125; */ render: function() &#123; return ( &lt;div&gt; &lt;Header /&gt; &lt;MainSection allTodos=&#123;this.state.allTodos&#125; areAllComplete=&#123;this.state.areAllComplete&#125; /&gt; &lt;Footer allTodos=&#123;this.state.allTodos&#125; /&gt; &lt;/div&gt; ); &#125;, /** * Event handler for &apos;change&apos; events coming from the TodoStore */ _onChange: function() &#123; this.setState(getTodoState()); &#125;&#125;);module.exports = TodoApp; 一个 View 可能关联多个 Store 来管理不同部分的状态，得益于 React 更新 View 如此简单（setState），复杂的逻辑都被 Store 隔离了。","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"React Native 之 安装配置","slug":"React-Native-之-安装配置","date":"2016-08-01T15:36:12.000Z","updated":"2017-11-20T07:45:33.000Z","comments":true,"path":"2016/08/01/React-Native-之-安装配置/","link":"","permalink":"//aolliu.win/2016/08/01/React-Native-之-安装配置/","excerpt":"前言: 2015年3月React Native for iOS发布,同年9月React Native for Android发布,React Native真正的可以实现了跨平台开发,代码多端复用,实时热部署. ReactNative需要安装配置很多依赖的工具，相对比较麻烦。所以这里主要环境的配置问题.","text":"前言: 2015年3月React Native for iOS发布,同年9月React Native for Android发布,React Native真正的可以实现了跨平台开发,代码多端复用,实时热部署. ReactNative需要安装配置很多依赖的工具，相对比较麻烦。所以这里主要环境的配置问题. 环境配置1.Homebrew废话提示: 本人安装时安装失败,按照网上某篇文章进行解决,没有考虑直接按文章在命令行输入命令,但是沙比了,电脑上所有的配置文件都没有了,后来看了下原来命令是删除所有的配置文件然后重新进行安装,拷,这不坑跌吗,由于之前没有进行备份处理,所有的应用都跟刚安装上一样,太坑了,由此希望大家引以为戒,第一,在遇到问题从网上找解决方案时一定要先仔细看下,到底是干什么的,是否真的能解决你遇到的问题,第二,一定要对数据进行备份,苹果自带的Time Machine就是一个很好的做备份的应用 1.在终端输入命令brew -v,查看之前是否安装过.如果安装过如下显示: 1.1,如果之前安装过最好在终端输入命令升级一下brew update,因为如果版本低,可能会影响后续软件的安装. 2.如果没有安装在终端输入命令进行安装/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 2.1再在终端输入命令brew -v查看如果有了版本号就说明安装成功 HomeBrew官网 2.Node.js 1.Node.js 安装需要首先安装nvm,有两种方式 1)在终端输入命令:$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.25.2/install.sh | bash 2)利用Homebrew,在终端输入命令:brew install nvm 2.安装Node.js,有两种方式 1)在终端输入命令:nvm install node &amp;&amp; nvm alias default node 2)下载安装包安装:下载地址 3.在终端分别输入命令node -v和npm -v,如果显示下图表示安装成功 3.安装 watchman 和 flow 1.安装watchman,在终端输入brew install watchman,显示下图安装成功 2.安装flow,在终端输入brew install flow,显示下图安装成功 4.安装 React-Native 终端输入命令npm install -g react-native-cli如果显示失败显示下图,说明没有权限: 那么在终端输入命令sudo npm install -g react-native-cli获取权限安装这个过程需要输入密码获取权限,如果显示下图则安装成功 相关文章链接:React Native: 配置和起步React Native开发环境配置","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"Weex 和 React Native","slug":"Weex-和-React-Native","date":"2016-08-01T13:35:52.000Z","updated":"2017-11-20T07:42:24.000Z","comments":true,"path":"2016/08/01/Weex-和-React-Native/","link":"","permalink":"//aolliu.win/2016/08/01/Weex-和-React-Native/","excerpt":"写在前面 目前主流的应用大体分成三类：Native App, Web App, Hybrid App.","text":"写在前面 目前主流的应用大体分成三类：Native App, Web App, Hybrid App. Native App特点: 性能好 完美的用户体验 开发成本高，无法跨平台 升级困难(审核),维护成本高 Web App特点: 开发成本低,更新快,版本升级容易,自动升级 跨平台，Write Once , Run Anywhere 无法调用系统级的API 临时入口，用户留存度低 性能差,体验差,设计受限制 相比Native App，Web App体验中受限于以上5个因素：网络环境，渲染性能，平台特性，受限于浏览器，系统限制。 Hybrid App特点: Native App 和 Web App 折中的方案，保留了 Native App 和 Web App 的优点。 但是还是性能差。页面渲染效率低，在Webview中绘制界面，实现动画，资源消耗都比较大,受限于技术,网速等因素 为了解决上述问题,一套高效率,高性能的跨平台方案成为了大家热衷的话题,也就有了下面要比较的weex和react native. 基本概念 weex 简介:weex是阿里巴巴公司与2016年6月开源的一种用于构建移动跨平台的UI框架 特点: 1.Lightweight:轻量级,语法简单,易于使用 2.Extendable:可扩展,丰富内置组件,可扩展的API, 3.High Performance:高性能 核心理念: Write Once Run Everywhere 基于JS开发框架: weex基于vue.js React Native 简介: Facebook在2015年3月在F8开发者大会上开源的跨平台UI框架 核心理念:LEARN ONCE, WRITE ANYWHERE 基于JS开发框架: React Native基于React 知识拓展:vue.js和ReactVue: 是一个构建数据驱动的 web 界面的库。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件. React: 基于HTML的前端界面开发正变得越来越复杂，其本质问题基本都可以归结于如何将来自于服务器端或者用户输入的动态数据高效的反映到复杂的用户界面上。而来自Facebook的React框架正是完全面向此问题的一个解决方案，按官网描述，其出发点为：用于开发数据不断变化的大型应用程序。相比传统型的前端开发，React开辟了一个相当另类的途径，实现了前端界面的高效率高性能开发。 Vue.js和React的异同:Vue和React的区别 Weex和React Native的异同相同点: 都采用Web的开发模式，使用JS开发； 都可以直接在Chrome中调试JS代码； 都支持跨平台的开发； 都可以实现hot reload，边更新代码边查看效果； 不同点:JS引擎什么是JS引擎 学习成本 1.环境配置： ReactNative需要按照文档安装配置很多依赖的工具，相对比较麻烦。 weex安装cli之后就可以使用 2.vue vs react:上面已经做过对比 react模板JSX学习使用有一定的成本 vue更接近常用的web开发方式，模板就是普通的html，数据绑定使用mustache风格，样式直接使用css 社区支持 Weex开源较晚，互联网上相关资料还比较少，社区规模较小； React Native社区则比较活跃，可以参考的项目和资料也比较丰富 一张图:从渲染时间,内存使用,CPU占用,帧率(图形处理器每秒钟能够刷新几次,高的帧率可以得到更流畅、更逼真的动画。每秒钟帧数 （fps） 愈多，所显示的动作就会愈流畅。) 文章推荐 weex vs react-nativeWeex &amp; ReactNative &amp; JSPatchWeex和react native对比对无线电商动态化方案的思考（一）系列文章","categories":[],"tags":[{"name":"跨平台开发","slug":"跨平台开发","permalink":"//aolliu.win/tags/跨平台开发/"}]},{"title":"3DTouch","slug":"3DTouch","date":"2015-11-20T12:35:50.000Z","updated":"2017-11-20T04:12:01.000Z","comments":true,"path":"2015/11/20/3DTouch/","link":"","permalink":"//aolliu.win/2015/11/20/3DTouch/","excerpt":"3D Touch的三大模块 在我们app中使用3D Touch 功能,主要分为以下3个模块,在下面会一一介绍 1.Home Screen Quick Actions 通过主屏幕的icon,我们可以使用3D Touch呼出一个菜单,进行快速定位应用功能模块 iOS9为我们提供了两种屏幕标签,静态标签和动态标签 静态标签:静态标签是我们在项目的配置plist文件中配置的标签，在用户安装程序后就可以使用，并且排序会在动态标签的前面。 动态标签:动态标签是我们在程序中，通过代码添加的，与之相关的类，主要有三个： UIApplicationShortcutItem 创建3DTouch标签的类 UIMutableApplicationShortcutItem 创建可变的3DTouch标签的类 UIApplicationShortcutIcon 创建标签中图片Icon的类 具体实现:","text":"3D Touch的三大模块 在我们app中使用3D Touch 功能,主要分为以下3个模块,在下面会一一介绍 1.Home Screen Quick Actions 通过主屏幕的icon,我们可以使用3D Touch呼出一个菜单,进行快速定位应用功能模块 iOS9为我们提供了两种屏幕标签,静态标签和动态标签 静态标签:静态标签是我们在项目的配置plist文件中配置的标签，在用户安装程序后就可以使用，并且排序会在动态标签的前面。 动态标签:动态标签是我们在程序中，通过代码添加的，与之相关的类，主要有三个： UIApplicationShortcutItem 创建3DTouch标签的类 UIMutableApplicationShortcutItem 创建可变的3DTouch标签的类 UIApplicationShortcutIcon 创建标签中图片Icon的类 具体实现: APPIcon深按弹窗 1.appdelegate方法中实现设置和监听 123456789101112131415161718192021222324252627282930313233- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;// 设置图标长按时,弹出的样式// iconWithTypedef: 图标的类型 这里可以跳到头文件中看icon是可以自己通过图片生成的 UIApplicationShortcutIcon * icon0 = [UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeAdd]; UIApplicationShortcutIcon * icon1 = [UIApplicationShortcutIcon iconWithType:UIApplicationShortcutIconTypeLove]; /* 第一个参数:type,类型,一个字符串,可以随便写,到后面通过监听类型来做对应的事情 第二个参数:标题 第三个参数:子标题 第四个参数:就是图标,可以自定义,也可以使用系统的 第五个参数:就是想传出去的信息 */ UIApplicationShortcutItem * item0 = [[UIApplicationShortcutItem alloc]initWithType:@\"type0\" localizedTitle:@\"添加\" localizedSubtitle:@\"真的添加\" icon:icon0 userInfo:@&#123;@\"wenxiaoli\" : @\"你叫什么名字\"&#125;]; UIApplicationShortcutItem *item1 = [[UIApplicationShortcutItem alloc]initWithType:@\"type2\" localizedTitle:@\"删除\" localizedSubtitle:@\"真的删除\" icon:icon1 userInfo:@&#123;@\"hahaha\" : @\"管你什么事\"&#125;]; application.shortcutItems = @[item0,item1]; return YES;&#125;//监听弹窗的点击- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem completionHandler:(void (^)(BOOL))completionHandler&#123; if ([shortcutItem.type isEqualToString:@\"type1\"]) &#123; NSLog(@\"%@ \",shortcutItem.userInfo[@\"liuwei\"]); &#125;else&#123; NSLog(@\"%@ \",shortcutItem.userInfo[@\"liuwei\"]); &#125;&#125; peak and pop 这个功能是一套全新的用户交互机制,在使用会有3个交互阶段 1.提示用户这里用3D Touch的交互,会使交互控件周围模糊 2.继续深按,会出现预览试图 3.通过试图上的交互控件进一步交互 1.判断当前设备是否支持3DTouch,注册3DTouch123456789101112131415- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; static NSString * cellID = @\"cell\"; LVHeroCell * cell = [tableView dequeueReusableCellWithIdentifier:cellID]; // 1.判断是否支持3DTouch if (self.traitCollection.forceTouchCapability == UIForceTouchCapabilityAvailable) &#123;// 注册cell,支持3DTouch,并设置预览代理 [self registerForPreviewingWithDelegate:self sourceView:cell]; &#125; cell.heroModel = self.heroes[indexPath.row]; return cell;&#125; 2.遵守协议实现代理方法123456789101112131415161718192021222324252627#pragma mark - 预览代理//轻按,中按时调用- (UIViewController *)previewingContext:(id&lt;UIViewControllerPreviewing&gt;)previewingContext viewControllerForLocation:(CGPoint)location&#123;// 1.获取sourceView LVHeroCell * sourceView = (LVHeroCell *)[previewingContext sourceView]; // 2.设置弹出的位置 [previewingContext setSourceRect:sourceView.bounds]; // 3.设置弹框的view LVDetailViewController *detailVC = [[LVDetailViewController alloc]init]; detailVC.preferredContentSize = CGSizeMake(0, 500); detailVC.heroModel = sourceView.heroModel; __weak typeof(detailVC) weakDetailVc = detailVC; detailVC.toDetailVcBlock = ^()&#123; [self.navigationController pushViewController:weakDetailVc animated:YES]; &#125;; return detailVC;&#125;//弹窗出现后继续重按时调用- (void)previewingContext:(id&lt;UIViewControllerPreviewing&gt;)previewingContext commitViewController:(UIViewController *)viewControllerToCommit&#123; [self showViewController:viewControllerToCommit sender:self];&#125; 3.设置控制器在弹窗时候,下面输出的数组,在需要弹出的控制器中123456789101112131415161718192021//设置控制器在弹窗的情况,下面输出的数组- (NSArray&lt;id&lt;UIPreviewActionItem&gt;&gt; *)previewActionItems&#123; UIPreviewAction *action1 = [UIPreviewAction actionWithTitle:@\"进入\" style:UIPreviewActionStyleDefault handler:^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController) &#123; // 因为当前控制器不能自己push自己,那么就得是他的父控制器知道什么时候push他,给她定义一个block属性,在父控制器中拿到block属性设置,在这里调用block LVDetailViewController *detailVc = (LVDetailViewController *)previewViewController; detailVc.toDetailVcBlock();// // LVDetailViewController *vc = [[LVDetailViewController alloc]init];// [self presentViewController:vc animated:true completion:nil]; &#125;]; UIPreviewAction *action2 = [UIPreviewAction actionWithTitle:@\"取消\" style:UIPreviewActionStyleDestructive handler:^(UIPreviewAction * _Nonnull action, UIViewController * _Nonnull previewViewController) &#123; NSLog(@\"取消\"); &#125;]; return @[action1,action2];&#125; Force properties :新的交互参数:力度,通过检测力度值,来做对应的交互处理 暂未总结","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"cocoapods安装","slug":"cocoapods安装","date":"2015-09-20T14:53:59.000Z","updated":"2017-11-20T07:16:35.000Z","comments":true,"path":"2015/09/20/cocoapods安装/","link":"","permalink":"//aolliu.win/2015/09/20/cocoapods安装/","excerpt":"git的安装安装cocoapods总会遇见问题,如何能够正确安装呢,请一步一步执行,就好了 1.先升级Gem sudo gem update –system 2.切换cocoapods的数据源【先删除，再添加，查看】 gem sources – remove https://rubygems.org/ gem sources -a https://ruby.taobao.org/ gem sources -l 3.安装cocoapods sudo gem install cocoapods 或者（如10.11系统）sudo gem install -n /usr/local/bin cocoapods","text":"git的安装安装cocoapods总会遇见问题,如何能够正确安装呢,请一步一步执行,就好了 1.先升级Gem sudo gem update –system 2.切换cocoapods的数据源【先删除，再添加，查看】 gem sources – remove https://rubygems.org/ gem sources -a https://ruby.taobao.org/ gem sources -l 3.安装cocoapods sudo gem install cocoapods 或者（如10.11系统）sudo gem install -n /usr/local/bin cocoapods 4.将Podspec文件托管地址从github切换到国内的oschina（该步骤可以省略）【先删除，再添加，再更新】 pod repo remove master pod repo add master http://git.oschina.net/akuandev/Specs.git pod repo add master https://gitcafe.com/akuandev/Specs.git pod repo update 5.设置pod仓库 pod setup 5.1pod setup这一步可能会很慢,大概200多兆,Cocoapods在将它的信息下载到~/.cocoapods目录下,你可以进入目录中查看当前下载进度,可以试着cd到那个目录，用du -sh *来查看下载进度 6.测试【如果有版本号，则说明已经安装成功】 pod –version 7.利用cocoapods来安装第三方框架 01 进入要安装框架的项目的.xcodeproj同级文件夹 02 在该文件夹中新建一个文件podfile 03 在文件中告诉cocoapods需要安装的框架信息 a.该框架支持的平台 b.适用的iOS版本 c.框架的名称 d.框架的版本 8.安装 pod install –no-repo-update pod update –no-repo-update 9.说明 platform :ios, ‘8.0’ 用来设置所有第三方库所支持的iOS最低版本 pod ‘SDWebImage’,’~&gt;2.6’ 设置框架的名称和版本号 版本号的规则： ‘&gt;1.0’ 可以安装任何高于1.0的版本 ‘&gt;=1.0’ 可以安装任何高于或等于1.0的版本 ‘&lt;1.0’ 任何低于1.0的版本 ‘&lt;=1.0’ 任何低于或等于1.0的版本 ‘~&gt;0.1’ 任何高于或等于0.1的版本，但是不包含高于1.0的版本 ‘~&gt;0’ 任何版本，相当于不指定版本，默认采用最新版本号 10.使用pod install命令安装框架后的大致过程： 01 分析依赖:该步骤会分析Podfile,查看不同类库之间的依赖情况。如果有多个类库依赖于同一个类库，但是依赖于不同的版本，那么cocoaPods会自动设置一个兼容的版本。 02 下载依赖:根据分析依赖的结果，下载指定版本的类库到本地项目中。 03 生成Pods项目：创建一个Pods项目专门用来编译和管理第三方框架，CocoaPods会将所需的框架，库等内容添加到项目中，并且进行相应的配置。 04 整合Pods项目：将Pods和项目整合到一个工作空间中，并且设置文件链接。 cocoaPods安装可能遇到的问题 在pod install时，遇到如下提示 “The dependency ‘SDWebImage’ is not used in any concrete target ”。这些依赖没有被任何一个target使用。 这个问题可能出现在使用老版本的podfile文件时出现。现在新的podfile文件都会使用target NAME do来说明在哪个target中使用依赖。比如这样： target ‘MikeAppDemo’ do pod ‘baiduMap’, ‘~&gt; 2.8’ end 只要指定好使用依赖的target，问题就可以解决了。 http://blog.csdn.net/nb_killer/article/details/51393865tagerthttp://www.cnblogs.com/wujy/p/5545680.html","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"load方法和initialize方法","slug":"load方法和initialize方法","date":"2015-09-01T15:54:16.000Z","updated":"2017-11-20T06:51:35.000Z","comments":true,"path":"2015/09/01/load方法和initialize方法/","link":"","permalink":"//aolliu.win/2015/09/01/load方法和initialize方法/","excerpt":"有时候我们希望类先执行某些一次性的初始化操作再使用,NSObject根类中有两个可以实现这种初始化操作的方法,这就是+Load和+initailze方法 +Load调用时机对于加入运行期系统的每个类以及它的分类来说,必定会调用此方法,而且只会被调用一次,通常是在应用程序启动的时候,执行时机在main函数之前!并且先调用父类的+load再调用子类的. 123456789101112131415@implementation FatherClass+(void)load &#123; NSLog(@&quot;%s&quot;,__func__);&#125;@end@interface SonClass : FatherClass@end@implementation SonClass+(void)load &#123; NSLog(@&quot;%s&quot;,__func__);&#125;@end//输出台:+[FatherClass load]+[SonClass load] 如果分类中也实现了该方法,那么先调用本类的再调用分类的","text":"有时候我们希望类先执行某些一次性的初始化操作再使用,NSObject根类中有两个可以实现这种初始化操作的方法,这就是+Load和+initailze方法 +Load调用时机对于加入运行期系统的每个类以及它的分类来说,必定会调用此方法,而且只会被调用一次,通常是在应用程序启动的时候,执行时机在main函数之前!并且先调用父类的+load再调用子类的. 123456789101112131415@implementation FatherClass+(void)load &#123; NSLog(@&quot;%s&quot;,__func__);&#125;@end@interface SonClass : FatherClass@end@implementation SonClass+(void)load &#123; NSLog(@&quot;%s&quot;,__func__);&#125;@end//输出台:+[FatherClass load]+[SonClass load] 如果分类中也实现了该方法,那么先调用本类的再调用分类的 12345678910111213@implementation FatherClass+(void)load &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@end@implementation FatherClass (category)+(void)load &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@end输出台://+[FatherClass load],FatherClass//+[FatherClass(category) load],FatherClass 如果两个没有继承关系的类都实现了+load方法,那么它的调用顺序取决于谁先被加到运行期环境中 上图中的AnyObject类与FatherClass类都继承自NSObject,但是FatherClass先被加入进运行期环境,所以它的+load方法会先被执行. 1234输出台:+[FatherClass load]+[SonClass load]+[AnyObject load] 使用注意点: 在+load的调用时机,系统还处于”脆弱”状态,虽然系统的库已经被加载进运行期系统,但是我们自己编写的类,或者引用的其他的类库中的类不一定已经可以使用,所以在+load中要尽量避免初始化其他的对象. 比如下面的代码就是不安全的 1234567@implementation FatherClass+(void)load &#123; NSLog(@&quot;%s&quot;,__func__); AnyObject *anyObject = [AnyObject new];// use anyObject...&#125;@end 当然AnyObject这个类使我们自己写的,我们可能通过Complie Sources知道它加载的顺序(这不是一个好办法),但是是用其他类库我们就不得而知.如果恰好在AnyObject中使用了+load方法来进行某些初始化操作来赋予这个类某些特性,并且这个类被载入的晚,那么这就有问题了. +load方法不像普通的方法那样遵循继承规则,如果一个类本身没有实现+load方法,那么无论其各级超类是否实现此方法系统都不会调动.这句话应该这样理解:正常我们给一个对象或者类发消息,如果这个对象(或类)本身没有实现该方法,那么系统会通过isa指针找到父类的实现.但是+load方法不同,子类如果没有实现该方法那么也不会去父类中找.也就是说你实现了系统就调用,你没实现就算了.但是如果在+load中显式的调用[super load];那么就会去调用父类方法了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//普通方法,子类实现@implementation FatherClass- (void)eat &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@end@implementation SonClass- (void)eat &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@endSonClass *son = [SonClass new];[son eat];输出台://-[SonClass eat],&lt;SonClass: 0x600000017970&gt;//子类未实现@implementation FatherClass- (void)eat &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@en@implementation SonClass@endSonClass *son = [SonClass new];[son eat];输出台://-[FatherClass eat],&lt;SonClass: 0x600000001600&gt;//+load方法,子类实现@implementation FatherClass+(void)load &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@end@implementation SonClass+(void)load &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);@end输出台://+[FatherClass load],FatherClass//+[SonClass load],SonClass//子类未实现@implementation FatherClass+(void)load &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@end@implementation SonClass@end输出台://+[FatherClass load],FatherClass 在+load方法中的实现务必精简,尽量减少里面所执行的操作,因为整个应用在执行+load方法时都会阻塞,如果在+load中进行繁杂的代码,那么应用程序在执行期间就会变得无响应,不要调用可能会加锁的方法.实际上但凡是通过+load方法实现的某些任务,基本上都做得不对,真正的用途仅在于调试程序,比如可以再分类中实现+load来看该分类是否已经正确载入系统中.+initialize调用时机对于每个类来说,该方法会在程序第一次使用该类或者该类的子类时被调用,并且只会调用一次.如果子类没有实现,那么会调用父类的该方法 1234567891011121314151617181920212223242526272829303132333435//子类实现@implementation FatherClass+ (void)initialize &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;- (void)eat &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@end@implementation SonClass+ (void)initialize &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@endSonClass *son = [SonClass new];[son eat];输出台://+[FatherClass initialize],FatherClass//+[SonClass initialize],SonClass//子类不实现@implementation FatherClass+ (void)initialize &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;- (void)eat &#123; NSLog(@&quot;%s,%@&quot;,__func__,self);&#125;@end@implementation SonClass@endSonClass *son = [SonClass new];[son eat];输出台://+[FatherClass initialize],FatherClass//+[FatherClass initialize],SonClass 我们发现子类如果实现了就走子类的方法,子类没有实现就走父类的方法.这与普通的方法是相同的,都遵循集成规则,这个与+load不同.那我们如果不想因为子类而调用到父类的方法该怎么办呢? 123456789@implementation FatherClass+ (void)initialize &#123; if (self == [FatherClass class]) &#123; NSLog(@&quot;%s,%@&quot;,__func__,self); &#125;&#125;@end输出台//+[FatherClass initialize],FatherClass +load与+initalize方法的区别 +initalize 是惰性调用,只有当给该类或者该类的派生类被使用时才会被调用. +load方法,应用会阻塞并等待所有类的+load执行完才会继续执行. +initalize方法是线程安全的.所以不用担心对该类第一次发消息的线程问题. +load不遵循继承规则 +load方法运行环境不是安全的,但是+initalize方法运行时可以调用任何类的任何方法;","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"JS中面对对象(OOP)继承及原型链","slug":"JS中面对对象-OOP-继承及原型链","date":"2015-08-24T13:38:44.000Z","updated":"2017-11-20T07:15:34.000Z","comments":true,"path":"2015/08/24/JS中面对对象-OOP-继承及原型链/","link":"","permalink":"//aolliu.win/2015/08/24/JS中面对对象-OOP-继承及原型链/","excerpt":"几大特性:封装 继承 多态 抽象","text":"几大特性:封装 继承 多态 抽象 继承12345678910111213141516171819202122232425262728293031323334353637383940414243444546function Person(name,age)&#123;//person类,里面有两个属性 this.name = name; this.age = age;&#125;//每一个类都有一个prototype对象属性,给这个对象属性添加一个hi属性,并给hi属性赋值一个方法Person.prototype.hi = funtion()&#123; console.log(&quot;Hi,my name is&quot; + this.name +&quot;,I am&quot; + this.age +&quot;years old now.&quot;);&#125;//同样给这个prototype对象属性添加一个walk属性,并给这个属性赋值一个方法Person.prototype.walk = function()&#123; console.log(this.name + &quot;is walking...&quot;);&#125;//同上Person.prototype.LEGS_NUM = 2;Person.prototype.ARMS_NUM = 2;//创建了一个Student类function Student(name,age,className)&#123; Person.call(this,name,age);//先调用下父类的call方法,把this作为person里的this以及将name,age传进去 this.className = className;&#125;// Object.creat(对象)是创建一个空对象,这里是将person的prototype属性&apos;赋值&apos;给student的prototype属性,说赋值是不对的,应该说是继承给,这里用Object.creat()这种方法,而不用Student.prototype = Person.prototype;主要是如果这样的话如果给student添加属性,Person也会相应的增加这个属性,这不是我们想要的,现在这样做是不会影响Person中的属性的Student.prototype = Object.creat(Person.prototype);Student.prototype.constructor = Student;//这条语句没有必要写,因为本来就是StudentStudent.prototype.hi = function()&#123; console.log(&quot;Hi,my name is&quot; + this.name +&quot;,I am&quot; + this.age +&quot;years old now and from&quot; + this.className + &quot;.&quot;);&#125;//这里是给student.prototype添加一个learn属性,并且给他赋值一个函数对象Student.prototype.learn = function(subject)&#123; console.log(this.name + &quot;is learning&quot; + subject + &quot;at&quot; + this.className)&#125;//test//创建一个实例对象wenxiaolivar wenxiaoli = new Student(&apos;wenxiali&apos;,27,&apos;Class 3,grade 2&apos;);wenxiaoli.hi();//Hi,my name is wenxiaoli,I am 27 years old now,and form Class 3,grade 2wenxiaoli.LEGS_NUM;//2wenxiaoli.walk();//wenxiaoli is walking...wenxiaoli.learn(&quot;math&quot;);//wenxiali is learning math,at Class 3, grade 2 JS的继承是在原型链的基础上实现的,所以更深刻的理解JS里面的继承必须理解原型链的概念,对于上面的例子可以表现为下图","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"//aolliu.win/tags/web开发/"}]},{"title":"Ajax网络请求与跨越问题","slug":"Ajax网络请求与跨越问题","date":"2015-08-20T13:47:42.000Z","updated":"2017-11-20T05:14:54.000Z","comments":true,"path":"2015/08/20/Ajax网络请求与跨越问题/","link":"","permalink":"//aolliu.win/2015/08/20/Ajax网络请求与跨越问题/","excerpt":"基础知识:AJAX:异步的JavaScript和XML,是一种在无需重新加载整个界面的情况下能够更新部分网页的技术 HTTP请求: 1.建立TCP链接 2.Web浏览器向Web服务器发送请求命令 3.Web浏览器发送请求头信息 4.Web服务器应答 5.Web服务器发送应答头信息 6.Web服务器向浏览器发送数据 7.Web服务器关闭TCP链接","text":"基础知识:AJAX:异步的JavaScript和XML,是一种在无需重新加载整个界面的情况下能够更新部分网页的技术 HTTP请求: 1.建立TCP链接 2.Web浏览器向Web服务器发送请求命令 3.Web浏览器发送请求头信息 4.Web服务器应答 5.Web服务器发送应答头信息 6.Web服务器向浏览器发送数据 7.Web服务器关闭TCP链接 XHR发送一个网络请求 open(method,url,async)//第三个表示请求是否异步,默认true send(string) //发送请求 responseText:获得字符串形式的响应数据 responseXML:获得xml形式的响应数据 status和statusText:以数字和文本形式返回HTTP状态码 getAllResponseHeader():获取所有的响应报头 getResponseHeader():查询响应中的某个字段的值 readyState属性;通过监听属性变化获取请求的信息 0:请求未初始化,open还没有调用 1:服务器链接已建立,open已经调用了 2.请求已接受,也就是接收到了头信息 3.请求处理中,接受到请求主体了 4.请求已经完成,响应就绪,响应完成了 12345678910var request = new XMLHttpRequest();request.open(&quot;Post&quot;,&quot;get.php&quot;,true);request.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www.form-urlencoded&quot;);request.send();//发送请求request.onreadystatechange = function()&#123; if(request.readyState === 4 &amp;&amp; request.status === 200)&#123; //做事情 request.responseText &#125;&#125; jQuery 一般发送网络请求都是用第三方库来做,简单易懂,这里不再说了 跨域 一个域名地址的组成 当协议,子域名,主域名,端口号中的任意一个不相同的时候,就算做在不同的域 不同域之间相互请求资源就算作是跨域 JavaScript出于安全问题的考虑,不允许跨域调用其他页面的对象 JavaScript同源策略的限制,a.com域名下的js无法操作b.com域名下的对象 解决方法1.通过代理 通过在同域名的web服务器端创建一个代理: 北京服务器 www.beijing.com 广州服务器 www.shanghai.com 这里需要后台做些事情,比如北京的web的后台,来调用上海服务器的服务,然后再把响应结果返回给前端,这样北京的前端调用北京同域名的服务就和调用广州的服务效果一样了,当然这需要后台来做些事情. 2.jsonP 注意:只能解决主流浏览器的get请求的跨域问题 需要服务器和前端合作实现1234567891011121314151617181920$(function()&#123; $(#search).click(function()&#123; $.ajax(&#123; type:&quot;GET&quot;, url:&quot;http://....&quot;, dataType:&quot;jsonp&quot;, //这里讲返回类型改为jsonp,服务器需要改造返回的数据为jsonp格式 jsonp:&quot;callBack&quot;, //增加一个属性,这里前端参数是什么后台就获取什么 success:function(data)&#123; if(data.success)&#123; alet(&quot;成功&quot;); &#125;else&#123; alet(&quot;错误&quot;); &#125; &#125; error:function(jqXHR)&#123; alet(&quot;错误&quot;); &#125; &#125;) &#125;)&#125;) XHR2 H5提供的XMLHttpRequest Level2已经实现了跨域访问以及其他的一些新功能,但是IE10以下的版本不支持,如果忽略IE浏览器可以使用该方法,这样前端无需改动,只需要在服务器做一些小小改造就可以了,更多知识看官方文档 12header(&apos;Access-Control-Allow-Origin:*&apos;);header(&apos;Access-Control-Allow-Methods:POST,GET&apos;);","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"//aolliu.win/tags/web开发/"}]},{"title":"网页请求中出现自定义HTTP头部","slug":"网页请求中出现自定义HTTP头部","date":"2015-08-16T12:03:17.000Z","updated":"2017-11-20T09:07:06.000Z","comments":true,"path":"2015/08/16/网页请求中出现自定义HTTP头部/","link":"","permalink":"//aolliu.win/2015/08/16/网页请求中出现自定义HTTP头部/","excerpt":"近期项目中网页请求中遇到了自定义HTTP头部信息的请求,查了相关资料Ajax资料,不但网页请求需要注意跨域问题,还要考虑如果是自定义头部信息需要和服务器协商解决 带预检(Preflighted)的跨域请求需要浏览器在发送真实HTTP请求之前先发送一个OPTIONS的预检请求，检测服务器端是否支持真实请求进行跨域资源访问，真实请求的信息在OPTIONS请求中通过Access-Control-Request-Method Header和Access-Control-Request-Headers Header描述，此外与简单跨域请求一样，浏览器也会添加Origin Header。服务器端接到预检请求后，根据资源权限配置，在响应头中放入Access-Control-Allow-Origin Header、Access-Control-Allow-Methods和Access-Control-Allow-Headers Header，分别表示允许跨域资源请求的域、请求方法和请求头。此外，服务器端还可以加入Access-Control-Max-Age Header，允许浏览器在指定时间内，无需再发送预检请求进行协商，直接用本次协商结果即可。浏览器根据OPTIONS请求返回的结果来决定是否继续发送真实的请求进行跨域资源访问。这个过程对真实请求的调用者来说是透明的。XMLHttpRequest支持通过withCredentials属性实现在跨域请求携带身份信息(Credential，例如Cookie或者HTTP认证信息)。浏览器将携带Cookie Header的请求发送到服务器端后，如果服务器没有响应Access-Control-Allow-Credentials Header，那么浏览器会忽略掉这次响应。","text":"近期项目中网页请求中遇到了自定义HTTP头部信息的请求,查了相关资料Ajax资料,不但网页请求需要注意跨域问题,还要考虑如果是自定义头部信息需要和服务器协商解决 带预检(Preflighted)的跨域请求需要浏览器在发送真实HTTP请求之前先发送一个OPTIONS的预检请求，检测服务器端是否支持真实请求进行跨域资源访问，真实请求的信息在OPTIONS请求中通过Access-Control-Request-Method Header和Access-Control-Request-Headers Header描述，此外与简单跨域请求一样，浏览器也会添加Origin Header。服务器端接到预检请求后，根据资源权限配置，在响应头中放入Access-Control-Allow-Origin Header、Access-Control-Allow-Methods和Access-Control-Allow-Headers Header，分别表示允许跨域资源请求的域、请求方法和请求头。此外，服务器端还可以加入Access-Control-Max-Age Header，允许浏览器在指定时间内，无需再发送预检请求进行协商，直接用本次协商结果即可。浏览器根据OPTIONS请求返回的结果来决定是否继续发送真实的请求进行跨域资源访问。这个过程对真实请求的调用者来说是透明的。XMLHttpRequest支持通过withCredentials属性实现在跨域请求携带身份信息(Credential，例如Cookie或者HTTP认证信息)。浏览器将携带Cookie Header的请求发送到服务器端后，如果服务器没有响应Access-Control-Allow-Credentials Header，那么浏览器会忽略掉这次响应。 这里讨论的HTTP请求是指由Ajax XMLHttpRequest对象发起的，所有的CORS HTTP请求头都可由浏览器填充，无需在XMLHttpRequest对象中设置。以下是CORS协议规定的HTTP头，用来进行浏览器发起跨域资源请求时进行协商： 1 Origin。HTTP请求头，任何涉及CORS的请求都必需携带。 2 Access-Control-Request-Method。HTTP请求头，在带预检(Preflighted)的跨域请求中用来表示真实请求的方法。 3 Access-Control-Request-Headers。HTTP请求头，在带预检(Preflighted)的跨域请求中用来表示真实请求的自定义Header列表。 4 Access-Control-Allow-Origin。HTTP响应头，指定服务器端允许进行跨域资源访问的来源域。可以用通配符*表示允许任何域的JavaScript访问资源，但是在响应一个携带身份信息(Credential)的HTTP请求时，Access-Control-Allow-Origin必需指定具体的域，不能用通配符。 5 Access-Control-Allow-Methods。HTTP响应头，指定服务器允许进行跨域资源访问的请求方法列表，一般用在响应预检请求上。 6 Access-Control-Allow-Headers。HTTP响应头，指定服务器允许进行跨域资源访问的请求头列表，一般用在响应预检请求上。 7 Access-Control-Max-Age。HTTP响应头，用在响应预检请求上，表示本次预检响应的有效时间。在此时间内，浏览器都可以根据此次协商结果决定是否有必要直接发送真实请求，而无需再次发送预检请求。 8 Access-Control-Allow-Credentials。HTTP响应头，凡是浏览器请求中携带了身份信息，而响应头中没有返回Access-Control-Allow-Credentials: true的，浏览器都会忽略此次响应。 总结： 只要是带自定义header的跨域请求，在发送真实请求前都会先发送OPTIONS请求，浏览器根据OPTIONS请求返回的结果来决定是否继续发送真实的请求进行跨域资源访问。所以复杂请求肯定会两次请求服务端。","categories":[],"tags":[{"name":"web开发","slug":"web开发","permalink":"//aolliu.win/tags/web开发/"}]},{"title":"处世之道","slug":"处世之道","date":"2015-04-07T14:17:19.000Z","updated":"2017-11-20T04:29:33.000Z","comments":true,"path":"2015/04/07/处世之道/","link":"","permalink":"//aolliu.win/2015/04/07/处世之道/","excerpt":"","text":"什么样的人在你心里才是真正的朋友，什么样的人能让你真心对一个人，怎样才能处理好这种关系，感觉好复杂，既不能委屈自己，又不能让对方不开心，感觉和人相处是最最麻烦的事情，只有一个人懂很难维持下去，只有大家都明白才能很有分寸的处理，让大家开开心心的在一起","categories":[],"tags":[{"name":"感悟","slug":"感悟","permalink":"//aolliu.win/tags/感悟/"}]},{"title":"CoreData","slug":"CoreData","date":"2015-03-20T13:20:35.000Z","updated":"2017-11-20T04:17:43.000Z","comments":true,"path":"2015/03/20/CoreData/","link":"","permalink":"//aolliu.win/2015/03/20/CoreData/","excerpt":"Core Data 是对SQLite的封装,会自动生成SQLite语句,性能不是太好 Core Data中3个重要的组成部分 NSManagerObject:实体对象(1个类对应一张表,1个对象对应表中的1条记录) NSPersistenStoreCoordinator:存储器,决定了你的数据存储在什么地方(SQLite/XML/其他文件) NSManageObjectContext:操作数据库","text":"Core Data 是对SQLite的封装,会自动生成SQLite语句,性能不是太好 Core Data中3个重要的组成部分 NSManagerObject:实体对象(1个类对应一张表,1个对象对应表中的1条记录) NSPersistenStoreCoordinator:存储器,决定了你的数据存储在什么地方(SQLite/XML/其他文件) NSManageObjectContext:操作数据库 Core Data的基本使用 1.新建一个项目,创建一个data model,并且在model中添加字段 2.再创建一个NSManagerObject subclass 3.在storyboard中托四个按钮分别做增删改查 4.导入头文件 12#import &lt;CoreData/CoreData.h&gt;#import \"Entity.h\" 5.在控制器中viewdidload方法中 1.创建上下文对象,用来操作数据库 NSManageObjectContext 2.创建模型对象 NSManageObjectModel 3.初始化一个持久化对象,需要表明数据持久化到哪里,指出数据库的路径,告诉数据库存放到那个位置 NSPersistenStoreCoordinator 4.将数据持久化 5.将上下文保存 123456789101112131415161718192021222324252627282930313233343536373839404142434445@interface ViewController ()&#123; NSManagedObjectContext *_context;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // 创建上下文对象 _context = [[NSManagedObjectContext alloc]init]; // 创建模型对象 NSManagedObjectModel *model = [NSManagedObjectModel mergedModelFromBundles:nil]; // 初始化一个持久化对象 NSPersistentStoreCoordinator *storeCoor = [[NSPersistentStoreCoordinator alloc]initWithManagedObjectModel:model]; // 需要表明数据持久化到哪里 NSError *error = nil; // 文档路径 NSString *doc = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject]; // 数据库的路径 NSString *path = [doc stringByAppendingPathComponent:@\"wenxiaoli.sqlite\"]; NSLog(@\"path = %@\" , path); // url 告诉数据库存放到哪个位置 [storeCoor addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:[NSURL fileURLWithPath:path] options:nil error:&amp;error]; if (error) &#123; NSLog(@\"数据库持久化失败\"); &#125; // 将数据持久化 _context.persistentStoreCoordinator = storeCoor; NSError *saveError = nil; // 将上下文保存 [_context save:&amp;saveError]; if (saveError) &#123; NSLog(@\"上下文保存失败\"); &#125; &#125; 6增. 12345678910// 增- (IBAction)addMember:(id)sender &#123; for (int i = 0 ; i &lt; 15; i ++) &#123; Entity *entity = [NSEntityDescription insertNewObjectForEntityForName:@\"Entity\" inManagedObjectContext:_context]; entity.name = [NSString stringWithFormat:@\"zhangsan%d\",i]; entity.height = @(178 + i); entity.age = [NSDate date]; [_context save:nil]; &#125;&#125; 7.查 1.获取数据对象 2.添加过滤条件 3.排序 4.查询结果 5.打印结果 1234567891011121314151617181920212223242526272829// 查- (IBAction)searchMember:(id)sender &#123; // 获取数据对象 获取到Entity里面的数据 NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"Entity\"]; // 过滤条件\\ 注意点 zhangsan要写在外面 // 过滤查询 // request.predicate = [NSPredicate predicateWithFormat:@\"name ==%@\",@\"zhangsan\"]; // 模糊查询// request.predicate = [NSPredicate predicateWithFormat:@\"name BEGINSWITH%@\",@\"lisi\"];// request.predicate = [NSPredicate predicateWithFormat:@\"name ENDSWITH%@\",@\"2\"]; request.predicate = [NSPredicate predicateWithFormat:@\"name CONTAINS%@\",@\"s\"]; // 排序 YES 是升序 NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@\"height\" ascending:YES]; request.sortDescriptors = @[sort]; // 查询结果\\ 数组里面存放都是Entity这个类型的对象 NSArray *arr = [_context executeFetchRequest:request error:nil]; for (Entity *e in arr) &#123; NSLog(@\"%@ %@\",e.name,e.height); &#125; &#125; 8.删,先查后删 1234567891011121314151617181920// 删- (IBAction)deleteMember:(id)sender &#123; // 获取数据对象 获取到Entity里面的数据 NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"Entity\"]; // 过滤条件\\ 注意点 zhangsan要写在外面 request.predicate = [NSPredicate predicateWithFormat:@\"name ==%@\",@\"zhangsan\"]; // 排序 YES 是升序 NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@\"height\" ascending:YES]; request.sortDescriptors = @[sort]; // 查询结果\\ 数组里面存放都是Entity这个类型的对象 NSArray *arr = [_context executeFetchRequest:request error:nil]; for (Entity *e in arr) &#123; [_context deleteObject:e]; &#125;&#125; 8.改(先查后改) 123456789101112131415161718192021222324// 改(update)- (IBAction)updateMember:(id)sender &#123; // 获取数据对象 获取到Entity里面的数据 NSFetchRequest *request = [NSFetchRequest fetchRequestWithEntityName:@\"Entity\"]; // 过滤条件\\ 注意点 zhangsan要写在外面 request.predicate = [NSPredicate predicateWithFormat:@\"name ==%@\",@\"zhangsan2\"]; // 排序 YES 是升序 NSSortDescriptor *sort = [NSSortDescriptor sortDescriptorWithKey:@\"height\" ascending:YES]; request.sortDescriptors = @[sort]; // 查询结果\\ 数组里面存放都是Entity这个类型的对象 NSArray *arr = [_context executeFetchRequest:request error:nil]; for (Entity *e in arr) &#123; e.name = @\"lisi2\"; e.name = @\"lisi2\"; // 保存更新 [_context save:nil]; &#125;&#125;","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"SDWebImage学习","slug":"SDWebImage学习","date":"2015-03-10T11:36:16.000Z","updated":"2017-11-20T05:17:18.000Z","comments":true,"path":"2015/03/10/SDWebImage学习/","link":"","permalink":"//aolliu.win/2015/03/10/SDWebImage学习/","excerpt":"SDWebImage的简单介绍: 优秀的图片缓存,下载框架,没有警告 SDWebImage的详细介绍:首先SDWebImage的实现原理 SDWebImager核心是SDWebImageManger类 SDWebImageManger 是两个类的集合体: 一个负责下载网络图片,SDWebImageDownloader 一个处理缓存的类SDImageCache","text":"SDWebImage的简单介绍: 优秀的图片缓存,下载框架,没有警告 SDWebImage的详细介绍:首先SDWebImage的实现原理 SDWebImager核心是SDWebImageManger类 SDWebImageManger 是两个类的集合体: 一个负责下载网络图片,SDWebImageDownloader 一个处理缓存的类SDImageCache SDWebImage提供了如下三个category来进行缓存。 MKAnnotationView + WebCache 地图大头针 UIButton + WebCache 给按钮设置图片 UIImageView + WebCache imageView的图片 SDWebImage的常用方法介绍 在给tableView设置图片时可以用到SDWebImage中UIImageView + WebCache分类中下面一个重要的方法- (void)sd_setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholder options:(SDWebImageOptions)options progress:(SDWebImageDownloaderProgressBlock)progressBlock completed:(SDWebImageCompletionBlock)completedBlock; 这个方法在以前是没有sd_前缀的,这个方法里面的参数很容易理解,这里重点介绍一下options这个参数:这个参数是SDWebImageOptions类型的枚举类型,里面有10个选项,下面一一进行介绍 SDWebImageRetryFailed = 1 &lt;&lt; 0, 默认情况下，当一个 URL 下载失败，会将该 URL 放在黑名单中，不再尝试下载,当使用这个标记时就会 ,取消黑名单意思是即使下载失败也不会被加入黑名单 SDWebImageLowPriority = 1 &lt;&lt; 1, 默认情况下，在 UI 交互时也会启动图像下载, 当时用这个标记时, 用户拖动tableView时不会进行图片的下载,当没有交互时才会下载 SDWebImageCacheMemoryOnly = 1 &lt;&lt; 2, 此标记取消磁盘缓存,仅做内存缓存 SDWebImageProgressiveDownload = 1 &lt;&lt; 3, 默认情况下，图像会在下载完成后一次性显示, 此标记允许渐进式下载，就像浏览器中那样，下载过程中，图像会逐步显示出来 SDWebImageRefreshCached = 1 &lt;&lt; 4, 磁盘缓存将由 NSURLCache 处理，而不是 SDWebImage，这会对性能有轻微的影响, 此选项有助于处理同一个请求 URL 的图像发生变化, 如果缓存的图像被刷新，会调用一次 completion block，并传递最终的图像, 仅在无法使用嵌入式缓存清理参数确定图像 URL 时，使用此标记 SDWebImageContinueInBackground = 1 &lt;&lt; 5, 在 iOS 4+，当 App 进入后台后仍然会继续下载图像。这是向系统请求额外的后台时间以保证下载请求完成的, 如果后台任务过期，请求将会被取消 SDWebImageHandleCookies = 1 &lt;&lt; 6, 处理保存在 NSHTTPCookieStore 中的 cookies SDWebImageAllowInvalidSSLCertificates = 1 &lt;&lt; 7, 允许不信任的 SSL 证书, 可以出于测试目的使用，在正式产品中慎用 SDWebImageHighPriority = 1 &lt;&lt; 8, 默认情况下，图像会按照在队列中的顺序被加载，此标记会将它们移动到队列前部立即被加载, 而不是等待当前队列被加载，等待队列加载会需要一段时间 SDWebImageDelayPlaceholder = 1 &lt;&lt; 9, 默认情况下，在加载图像时，占位图像已经会被加载。而此标记会延迟加载占位图像，直到图像已经完成加载 SDWebImageTransformAnimatedImage = 1 &lt;&lt; 10, 通常不会在可动画的图像上调用 transformDownloadedImage 代理方法，因为大多数转换代码会破坏动画文件, 使用此标记尝试转换 以最为常用的UIImageView为例: UIImageView+WebCache分类里面常用的方法:setImageWithURL :placeholderImage: options:这个方法默认情况下先显示 placeholderImage ，同时由SDWebImageManager 根据 URL 来在本地查找图片。 SDWebImageManager: downloadWithURL:delegate:options:userInfo:SDWebImageManager是将UIImageView+WebCache同SDImageCache链接起来的类，图片缓存是在内存缓存一份,在磁盘缓存一份. SDImageCache： queryDiskCacheForKey:delegate:userInfo:用来从缓存根据CacheKey查找图片是否已经在内存缓存中, 如果内存中已经有图片缓存SDWebImageManager会回调SDImageCacheDelegate : imageCache:didFindImage:forKey:userInfo:而UIImageView+WebCache则回调SDWebImageManagerDelegate: webImageManager:didFinishWithImage:来显示图片。 如果内存中没有图片缓存，那么生成 NSInvocationOperation 添加到队列，从硬盘查找图片是否已被下载缓存。根据 URLKey 在硬盘缓存目录下尝试读取图片文件。这一步是在 NSOperation 进行的操作，所以回主线程进行结果回调 notifyDelegate:。 如果上一操作从硬盘读取到了图片，将图片添加到内存缓存中（如果空闲内存过小，会先清空内存缓存）。然后SDImageCacheDelegate 回调 imageCache:didFindImage:forKey:userInfo:。进而回调展示图片。 如果从硬盘缓存目录没有读取到图片,说明所有缓存都不存在该图片，需要下载图片，回调 imageCache:didNotFindImageForKey:userInfo:。共享或重新生成一个下载器SDWebImageDownloader 开始下载图片。 图片下载由 NSURLConnection来做，实现相关 delegate 来判断图片下载中、下载完成和下载失败。 connection:didReceiveData:中利用 ImageIO做了按图片下载进度加载效果。 connectionDidFinishLoading: 数据下载完成后交给 SDWebImageDecoder 做图片解码处理。 图片解码处理在一个 NSOperationQueue 完成，不会拖慢主线程 UI。如果有需要对下载的图片进行二次处理，最好也在这里完成，效率会好很多。 在主线程 notifyDelegateOnMainThreadWithInfo:宣告解码完成，imageDecoder:didFinishDecodingImage:userInfo:回调给 SDWebImageDownloader。 imageDownloader:didFinishWithImage: 回调给 SDWebImageManager 告知图片下载完成。 通知所有的 downloadDelegates下载完成，回调给需要的地方展示图片。 将图片保存到SDImageCache中，内存缓存和磁盘缓存同时进行保存。 写文件到磁盘在单独 NSInvocationOperation 中完成，避免拖慢主线程。 如果是在iOS上运行，SDImageCache在初始化的时候会注册notification 到 UIApplicationDidReceiveMemoryWarningNotification 以及 UIApplicationWillTerminateNotification,在内存警告的时候清理内存图片缓存，应用结束的时候清理过期图片。 SDWebImagePrefetcher可以预先下载图片，方便后续使用。 下面是SDWebImage在清理图片缓存时的原理 使用 SDWebImage 设置cell图片(网上下载)的注意点 当程序收到内存警告的时候就会调用下面的方法 SDWebImage在cleanMemary(清除缓存)时的运行原理 SDWebImage可以做的事情: 1,给imageView设置图片 2,单独下载图片,可以监听下载进度 3,管理图片缓存 4,设置gif图片 5,判断图片是什么类型的 细节: 1.clear和clean的区别 clear:直接把之前的缓存文件删除,然后重新创建一个空的 clean:删除过期的缓存,然后计算剩余的缓存大小,和设置的最大缓存大小比较,如果发现超过那么就会继续删除,按照文件的 创建时间来删除(由远到近) 2.默认的缓存时间:KDefaultCacheMaxCacheAge 1week 3.播放gif #import&lt;ImgeIO/ImageIO.h&gt; 4.判断图片的类型:得到图片的二进制数据,然后判断第一个字节 5.请求的超时时间:downloadTimeOut 15s 6.内部缓存处理模式:二级缓存处理,内存缓存和磁盘缓存 7.磁盘缓存的路径:~/Library/Caches/default/com.hackemist.SDWebImageCache.default/文件的名称 8.得到图片的URL地址,然后对URL进行加密处理(MD5) 123// abe7c97cjw8ermn0v2x7nj20k00k0jrz.jpg// 36c0b4da16d5ee121d4adf6c3b4d93b6.jpg// $ echo -n \"abe7c97cjw8ermn0v2x7nj20k00k0jrz\" | md5 9.最大并发数量: 6 10.队列中任务默认的处理方式是:SDWebImageDownloaderFIFOExecutionOrder先进先出,可以通过给图片现在设置依赖,来实现LIFO 11.内存的处理方式:NSCache 12.下载图片的方式:NSURLConnection来发送请求,设置代理下载图片 13,内存警告:该框架内部采用监听系统通知的方式来处理内存警告问题,会自动的清空缓存 14.key–URL(如何优化),黑名单(当一个URL请求事变后,会被添加到黑名单中,可以有效的防止一个错误的URL被多次尝试下载)","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"Webviewjavascript","slug":"Webviewjavascript","date":"2015-03-09T14:36:55.000Z","updated":"2017-11-20T04:26:12.000Z","comments":true,"path":"2015/03/09/Webviewjavascript/","link":"","permalink":"//aolliu.win/2015/03/09/Webviewjavascript/","excerpt":"来着对官方demo的分析 1.首先在控制器的viewdidload方法中 123// 1.初始化一个webview UIWebView* webView = [[UIWebView alloc] initWithFrame:self.view.bounds]; [self.view addSubview:webView]; 2.还是在viewdidload方法中 1234// 2.将此webview与WebViewJavascriptBridge关联 [WebViewJavascriptBridge enableLogging]; _bridge = [WebViewJavascriptBridge bridgeForWebView:webView]; [_bridge setWebViewDelegate:self];","text":"来着对官方demo的分析 1.首先在控制器的viewdidload方法中 123// 1.初始化一个webview UIWebView* webView = [[UIWebView alloc] initWithFrame:self.view.bounds]; [self.view addSubview:webView]; 2.还是在viewdidload方法中 1234// 2.将此webview与WebViewJavascriptBridge关联 [WebViewJavascriptBridge enableLogging]; _bridge = [WebViewJavascriptBridge bridgeForWebView:webView]; [_bridge setWebViewDelegate:self]; 3.js调用oc方法（可以通过data给oc方法传值，使用responseCallback将值再返回给js）// 这里注意testObjcCallback这个方法的标示。html那边的命名(前端代码)要跟ios这边相同，才能调到这个方法。当然这个名字可以两边商量着自定义。简单明确即可。 12345 [_bridge registerHandler:@\"testObjcCallback\" handler:^(id data, WVJBResponseCallback responseCallback) &#123;//在这个方法中做我要做的事情比如点击了web view上的一张图片,js通过data告诉我是那张图片,然后我通过他告诉我的再去我的下载的图片中取出来然后利用mwphotobrowser展示出来 NSLog(@\"testObjcCallback called: %@\", data); responseCallback(@\"Response from testObjcCallback\"); &#125;]; 4.oc调js方法（通过data可以传值，通过response可以接受js那边的返回值） 123456 id data = @&#123; @\"greetingFromObjC\": @\"Hi there, JS!\" &#125;; [_bridge callHandler:@\"testJavascriptHandler\" data:data responseCallback:^(id response) &#123;//oc调用js那边的testJavascriptHandler这个方法//通过data给js传值 NSLog(@\"testJavascriptHandler responded: %@\", response); &#125;];","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"内存5大区","slug":"内存5大区","date":"2015-01-05T13:12:18.000Z","updated":"2017-11-20T03:26:45.000Z","comments":true,"path":"2015/01/05/内存5大区/","link":"","permalink":"//aolliu.win/2015/01/05/内存5大区/","excerpt":"iOS程序中的内存分配分为5大区 内存5大区:堆,栈,方法区,全局区,常量区 栈:不需要手动管理内存,会自动清理栈中的内存 堆: 需要手动管理内存 静态区:又称全局区 基本概念 在计算机中,运行的应用程序的数据都是保存在内存中的,不同类型的数据保存的内存区域不同","text":"iOS程序中的内存分配分为5大区 内存5大区:堆,栈,方法区,全局区,常量区 栈:不需要手动管理内存,会自动清理栈中的内存 堆: 需要手动管理内存 静态区:又称全局区 基本概念 在计算机中,运行的应用程序的数据都是保存在内存中的,不同类型的数据保存的内存区域不同 内存分区 1.栈区 栈区由编译器自动分配并释放，存放函数的参数值，局部变量等。栈是系统数据结构，对应线程/进程是唯一的。 优点是快速高效 缺点是有限制，数据不灵活。［先进后出］ 栈空间分静态分配 和动态分配两种。 静态分配是编译器完成的，比如自动变量(auto)的分配。 动态分配由alloca函数完成。 栈的动态分配无需释放(是自动的)，也就没有释放函数。 为可移植的程序起见，栈的动态分配操作是不使用的一般 系统响应 栈：存储每一个函数在执行的时候都会向操作系统索要资源，栈区就是函数运行时的内存，栈区中的变量由编译器负责分配和释放，内存随着函数的运行分配，随着函数的结束而释放，由系统自动完成。注意：只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。 申请大小的限制 栈是向低地址扩展的数据结构，是一块连续的内存的区域。是栈顶的地址和栈的最大容量是系统预先规定好的，栈的大小是一个编译时就确定的常数 ,如果申请的空间超过栈的剩余空间时，将提示overflow。因此，能从栈获得的空间较小。 内存由系统自动分配,速度快,不会产生内存碎片 2.堆区 堆区由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回收 ，比如在ios 中 alloc 都是存放在堆中。 优点是灵活方便，数据适应面广泛 缺点是效率有一定降低。［顺序随意］ 堆是函数库内部数据结构，不一定唯一。 不同堆分配的内存无法互相操作。 堆空间的分配总是动态的虽然程序结束时所有的数据空间都会被释放回系统，但是精确的申请内存，释放内存匹配是良好程序的基本要素。 系统响应 操作系统有一个记录空闲内存地址的链表。 当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。 由于找到的堆结点的大小不一定正好等于申请的大小，系统会自动的将多余的那部分重新放入空闲链表中 申请大小的限制 堆是向高地址扩展的数据结构，是不连续的内存区域。这是由于系统是用链表来存储的空闲内存地址的，自然是不连续的，而链表的遍历方向是由低地址向高地址。堆的大小受限于计算机系统中有效的虚拟内存。由此可见，堆获得的空间比较灵活，也比较大。 有alloc分配的内存,速度较慢,会产生内存碎片,但是使用方便 3.全局区(静态区) 全局变量和静态变量的存储是放在一起的，初始化的全局变量和静态变量存放在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后由系统释放。 4.常量区 常量区,存放常量字符串,程序结束后由系统释放 5.程序代码区(方法区) 存放函数的二进制代码] 5大区在内存中分布","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"数据库基本知识","slug":"数据库基本知识","date":"2014-12-20T11:03:14.000Z","updated":"2017-11-20T03:33:14.000Z","comments":true,"path":"2014/12/20/数据库基本知识/","link":"","permalink":"//aolliu.win/2014/12/20/数据库基本知识/","excerpt":"01,数据库简介什么是数据库 数据库:Database 是按照数据结构来组织,存储和管理数据的仓库 分为2大种类 关系型数据库(主流) pc端: 嵌入式/移动客户端 : SQLite 对象型数据库","text":"01,数据库简介什么是数据库 数据库:Database 是按照数据结构来组织,存储和管理数据的仓库 分为2大种类 关系型数据库(主流) pc端: 嵌入式/移动客户端 : SQLite 对象型数据库 iOS中数据的存储方式 plist(NSArray/NSDictionary) 只能存储系统自带的数据类型,自定义的对象无法储存 preference(偏好设置/NSUserDefaults) 本质就是一个plist文件 NSCoding(NSKeyedArchiver/NSKeyedUnarchiver) 可以存储自己定义的数据类型,但是都是一次性的全数据操作 SQLite3 存储一些大批量的数据,排序,统计等操作 Core Data 对SQLite3的一层面向对象的包装,本质还是转化为SQL语句去执行 什么是SQLite SQLite是一款轻量级的嵌入式数据库 占用资源非常低,在嵌入设备中,只需要几百K就行了 处理速度快 如何存储数据到数据库 数据库的存储结构和excle很像,以表(table)为单位 数据库存储数据的步骤: 新建数据库文件 新建一张表:table 添加多个字段:column 列 属性 添加多行记录:row 每行存放多个字段对应的值 02.Navicat软件 是一套适用于MySQL,SQLite等多个数据库系统的图形化数据库管理,报告以及箭筒的工具 通过软件可以演练创建/删除表,查询/删除/修改记录操作的SQL 03.软件的基本使用 表里面应该有个”主键”,能标识唯一的一行 解决方案:重新编辑表结构,设置主键(自增长) 理论基础: 1.表格组成:行(记录)和列(属性)”属性” 是用来标识这一列应该存放什么“记录” 是用来存放一条数据 2.属性类型: blob:二进制类型 integer:整型 real:浮点型 text:文本类型 null:空类型 3.主键: 主键(primary key /PK)用来位移标识某一条记录 主键可以使一个字段或者多个字段:行和列 设计原则:1&gt;应当对用户没有意义,2&gt;永远也不要更新主键3&gt;主键不应包含动态变化的数据4&gt;主键应当有计算机自动生成 04.SQL语言简介什么是SQL? SQL(structured query language):结构化查询语言 SQL是一种对关系性数据苦衷的数据进行定义和操作的语言 SQL语句 使用SQL语言编写出来的句子/代码就是SQL语言 在程序中如果想要操作(增删改查 CRUD)数据库中的数据,就必须使用SQL语言 Create ,Retrive,Updata,Delete SQL语句的特点 不区分大小写 每条语句以;结尾 SQL中常用的关键字SQL语句的种类1.数据定义语句(DDL : Data Definition Language) 包括create,drop,Alert等操作 在数据库中创建新表或者删除表(create table 和 drop table) 2.数据操作语句(DML : Data Manipulation Language) 包括insert.,delete,updata等操作 上面的3种操作分别用于添加,修改,删除表中的数据 3.数据查询语句(DQL : Data Query Language) 可以用于查询获得表中的数据 关键字select是DQL用的最多的操作 其他DQL常用的关键字where,order by,group by 和 having 05.DDL语句创建表 格式: create table 表名 (字段名1 字段类型1 ….); 示例: create table t_stu(id integer,name text,age integer,score real); 经验: 实际上SQLite是无类型的 就算申明为某种类型,但是还是可以存储其他类型的(主键除外) 但是为了保证编程规范,方便交流,最好加上类型 语句优化: 创建表格时,最好加上判断这个表格是否存在,防止语句多次执行发生错误 create table if not exists 表名(字段名1 字段类型1 ….) 删除表 格式: drop table 表名; drop table if exists 表名; 示例: drop table t_stu; 语句优化:最好加个判断,防止语句多次执行发生错误 drop table if exists 表名; 修改表 注意: SQLite里面只能实现Alter Table的部分功能,不能删除一列,修改一个已经存在的列名 修改表名:ALTER TABLE 旧表名 REMANE TO 新表名 新增属性:ALTER TABLE 表名 ADD COLUMN 列名 数据类型 限定符 06.约束简单约束 不能为空: not null 不能重复:uinque 默认值:default 示例:create table t_stu (id integer ,name text not null unique,age integer not null default 1); 主键约束 添加主键约束的原因: 如果t_stu表中就name和age连个字段,而且有些记录的name和age字段的值一样,没办法区分这些数据,造成数据录的记录不唯一,不方便管理数据,应该保证每条记录的唯一性,所以增加了主键约束 每张表都必须有一个主键,用来标示记录的唯一性 主键:Primary Key :用来唯一的标示某一条记录 示例:creat table t_stu (id integer primary key autoincrement,name text); 07.DML语句插入语句:insert 格式:insert into 表名(字段1,字段2…) value(字段1值,字段2值…); 示例:insert into t_stu(name,age) value(‘liuwei’,19); 注意:数据库中的字符串内容应该用单引号括住 更新语句:update 格式:update 表名 set 字段1 = 字段1的值,字段2 = 字段2的值,…; 示例:update t_stu set name = ‘wen’,age = 20; 注意:示例会将t_stu中的所有的记录中的那么都改为wen,age都改为20 删除语句:delete 格式:delete from 表名; 示例:delete from t_stu; 注意:示例会将t_stu表中所有的记录都删除 08.条件语句作用 如果只想更新或者删除某些固定的记录,那就必须在DML语句加上一些条件 常见格式 where 字段 = 某个值;//不能使用两个== where 字段 is 某个值;//is 相当于 = where 字段 != 某个值 ; where 字段 is not 某个值 ; // is not 相当于 != where 字段 &gt; 某个值 ; where 字段1 = 某个值 and 字段2 &gt; 某个值 ; // and相当于C语言中的 &amp;&amp; where 字段1 = 某个值 or 字段2 = 某个值 ; // or 相当于C语言中的 || 小试牛刀 将t_student表中年龄大于10 并且 姓名不等于wex的记录，年龄都改为 5 update t_student set age = 5 where age &gt; 10 and name != ‘wex’; 删除t_student表中年龄小于等于10 或者 年龄大于30的记录 delete from t_student where age &lt;= 10 or age &gt; 30; update t_student set score = age where name = ‘wex’ ; 将name = ‘wex’的人的score的值改为age的值 09DQL格式 select 字段1,字段2,…from 表名; select * from 表名;//查询所有的字段 示例: select name, age from t_student ; select * from t_student ; select * from t_student where age &gt; 10 ; // 条件查询 10查询相关语句统计 count(X) select count(*) from t_student //计算所有记录个数 select count(age) from t_student //计算age有值的记录个数(Null不计算在内) avg(X) 计算某个字段的平均值 sum(X) 计算某个字段的总和 max(X) 计算某个字段的最大值 min(X) 计算某个字段的最小值 排序 查询出来的结果可以用order by进行排序 select 字段1, 字段2 from 表名 order by 字段 ; select * from t_student order by age ; 默认是按照升序排序（由小到大），也可以变为降序（由大到小） select * from t_student order by age desc ; //降序 select * from t_student order by age asc ; // 升序（默认） 也可以用多个字段进行排序 select * from t_student order by age asc, height desc ; 先按照年龄排序（升序），年龄相等就按照身高排序（降序） limit分页 使用limit可以精确地控制查询结果的数量，比如每次只查询10条数据 格式:select * from 表名 limit 数值1, 数值2 ; 示例:select * from t_student limit 4, 8 ;//可以理解为：跳过最前面4条语句，然后取8条记录 分页: limit常用来做分页查询，比如每页固定显示5条数据，那么应该这样取数据 第1页：limit 0, 5 第2页：limit 5, 5 第3页：limit 10, 5 第n页：limit 5*(n-1), 5 特殊案例 select * from t_student limit 7 ; 相当于select * from t_student limit 0, 7 ; 表示取最前面的7条记录 11多表查询多表查询 select 字段1, 字段2, … from 表名1, 表名2 ; 别名 select别名1.字段1 as 字段别名1,别名2.字段2 as 字段别名2,…from表名1 as 别名1,表名2 as 别名2 ; 可以给表或者字段单独起别名 as 可以省略 表连接查询 select 字段1, 字段2, … from 表名1, 表名2 where 表名1.id = 表名2.id; 外键 如果表A的主关键字是表B中的字段,则该字段称为表B的外键 保持数据一致性，完整性，主要目的是控制存储在外键表中的数据。 使两张表形成关联，外键只能引用外表中的列的值或使用空值。 12-代码实现SQLite-DDL 导入框架 导入系统框架sqlite3.tbd(sqlite3.dylib) 建立桥接文件, 导入头文件sqlite3.h 代码实现: 打开数据库 使用打开的数据库, 执行DDL语句, 创建一个数据库表 将数据库操作封装成一个工具类 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960class SQLiteTool: NSObject &#123; static let shareInstance = SQLiteTool() var db: COpaquePointer = nil override init() &#123; super.init() // 1. 打开数据库 // 参数1: 数据库路径 // 参数2: 一个打开的数据库的指针(后期操作所有的sql语句, 都是使用这个对象) // 根据一个路径, 打开一个数据库(如果路径不存在, 则创建一个数据库, 如果存在, 则直接打开) // 关于sqlite数据库的后缀名, 没有一个明确的要求, 随便写 // db, db3, sqlite let path = \"/Users/xiaomage/Desktop/db/demo.sqlite\" if sqlite3_open(path, &amp;db) != SQLITE_OK &#123; print(\"打开数据库失败\") &#125;else &#123; print(\"打开数据库成功\") createTable() &#125; &#125; func dropTable() -&gt; () &#123; // 理论基础: 如果想要操作表或者操作记录, 统一都是分两个步骤 // 步骤1: 创建sql语句(因为我们操作数据库, 都必须使用sql语句才能操作) // 步骤2: 执行sql语句 let sql = \"drop table if exists t_stu\" if excuteSql(sql) &#123; print(\"执行成功\") &#125; &#125; func createTable() -&gt; () &#123; // 1. 写sql语句 let sql = \"create table if not exists t_stu(id integer primary key autoincrement, name text not null, age integer, score real default 60)\" if excuteSql(sql) &#123; print(\"执行成功\") &#125; &#125; func excuteSql(sql: String) -&gt; Bool &#123; // 2. 执行sql语句 // 功能, 执行sql字符串 // 参数1: 一个已经打开的数据库(代表操作的是哪一个数据库) // 参数2: sql语句 // 参数3: 回调函数 nil // 参数4: 参数3: 回调函数里面的参数1 nil // 参数5: 错误信息 nil return sqlite3_exec(db, sql, nil , nil , nil) == SQLITE_OK &#125; 13-代码实现DML语句-Insert12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849class Student: NSObject &#123; var name : String = \"\" var age : Int = 0 var score : Double = 0.0 override init() &#123; super.init() &#125; init (name : String , age : Int, score : Double)&#123; self.name = name self.age = age self.score = score &#125;func insertStu() -&gt; () &#123; let sql = \"insert into t_stu (name ,age ,score) values ('\\(name)',\\(age),\\(score))\" if SQLiteTool.shareInstance.excuteSql(sql) &#123; print(\"插入成功\") &#125;else&#123; print(\"插入失败\") &#125; &#125; class func deletStu(name : String) -&gt; () &#123; let sql = \"delete from t_stu where name = '\\(name)'\" if SQLiteTool.shareInstance.excuteSql(sql) &#123; print(\"删除成功\") &#125;else&#123; print(\"删除失败\") &#125; &#125; func updateStu (newStu : Student) -&gt; () &#123; let sql = \"update t_stu set name = '\\(newStu.name)',age = \\(newStu.age),score = \\(newStu.score) where name = '\\(name)'\" if SQLiteTool.shareInstance.excuteSql(sql) &#123; print(\"更改成功\") &#125;else&#123; print(\"更改失败\") &#125; 14-代码实现DML语句-Insert绑定参数准备语句（prepared statement）对象 准备语句（prepared statement）对象一个代表一个简单SQL语句对象的实例，这个对象通常被称为“准备语句”或者“编译好的SQL语句”或者就直接称为“语句”。 操作历程 使用sqlite3_prepare_v2或相关的函数创建这个对象 使用sqlite3bind*()给宿主参数（host parameters）绑定值 通过调用sqlite3_step() 一次或多次来执行这个sql 使用sqlite3_reset()重置这个语句，然后回到第2步，这个过程做0次或多次 使用sqlite3_finalize()销毁这个对象, 防止内存泄露 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657 func insertBind() -&gt; () &#123; let sql = \"insert into t_stu(name, age, score) values (?, ?, ?);\" // 1. 创建\"准备语句\" // 参数1: 一个打开的数据库 // 参数2: sql字符串 // 参数3: 取出参数2 的长度 3 -1 代表自动计算 // 参数4: 指向\"准备语句的指针\" // 参数5: 通过参数3指定的长度, 取出参数2, 字符串之后, 剩余的字符串 nil let db = SQLiteTool.shareInstance.db var stmt: COpaquePointer = nil if sqlite3_prepare_v2(db, sql, -1, &amp;stmt, nil) != SQLITE_OK &#123; print(\"准备语句创建失败\") return &#125; // 2. 绑定数据 // 不同的数据类型, 绑定的方法不一样 // 绑定姓名- 字符串 // 参数1: 准备语句 // 参数2: 绑定的索引 从1开始 // 参数3: 绑定的值 // 参数4: 代表, 值取出的长度 -1 自动计算 // 参数5: 指向函数的指针: 参数的处理方式 // #define SQLITE_STATIC 处理方式: 不对参数做任何操作(认为参数是一个static) // #define SQLITE_TRANSIENT 处理方式: 会对参数, 做一个强引用, 然后, 使用完毕之后, 在合适的时候释放 // 使用这个函数一定要注意: 需要明确的知道最终的确切类型是什么 let SQLITE_TRANSIENT = unsafeBitCast(-1, sqlite3_destructor_type.self) sqlite3_bind_text(stmt, 1, \"lisi---3\", -1, SQLITE_TRANSIENT) // 绑定年龄 Int sqlite3_bind_int(stmt, 2, 18) // 绑定分数 - Double sqlite3_bind_double(stmt, 3, 99) // 3. 执行\"准备语句\" if sqlite3_step(stmt) == SQLITE_DONE &#123; print(\"执行成功\") &#125;else &#123; print(\"执行失败\") &#125; // 4. 重置\"准备语句\" sqlite3_reset(stmt) // 5. 释放资源 sqlite3_finalize(stmt) &#125; &#125; 15-DML语句-Insert插入数据优化 测试结果分析 sqlite_exec 直接执行 和 未拆解”准备语句” 执行 执行时间平均差不多 拆解后的”准备语句” 执行, 效率明显高了一些 虽然按步骤使用”准备语句”, 但是执行效率,依然非常低, 达到了5秒左右, 不可原谅 原因分析:每当SQL调用执行方法执行一个语句时, 都会开启一个叫做”事务”的东西, 执行完毕之后再提交”事务”;也就是说, 如果执行了10000次SQL语句, 就打开和提交了10000次”事务”, 所以造成耗时严重 解决方案:只要在执行多个SQL语句之前, 手动开启事务, 在执行完毕之后, 手动提交事务, 这样 再调用SQL方法执行语句时, 就不会再自动开启和提交事务 结论 如果插入大量数据, 请务必手动开启/提交事务 根据不同情况, 选择使用sqlite3_exec 或者 “准备语句” 单条语句, 前者, 因为使用简单 大批量插入, 选择后者 123456789// 优化方案: // 如果大批量插入数据// 方案: sqlite3_step() 准备语句// 方案: sqlite3_exec() sql字符串// 优化方案1: sqlite3_step() 准备语句 分解版// 优化方案2: // sqlite3_step() sqlite3_exec() 这两个函数执行, 内部都会自动开启一个事务, 然后执行完毕之后, 提交事务 , 开启/提交, 整个过程非常耗费时间// 只要我们手动的开启事务, 手动的提交事务, 那么在函数内部, 就不会自动开启和提交事务 工具类中,添加了两个方法,用来手动开启事务和提交事务 123456789func beginTransaction() -&gt; () &#123; let sql = \"begin transaction\" excuteSql(sql)&#125;func commitTransaction() -&gt; () &#123; let sql = \"commit transaction\" excuteSql(sql)&#125; 在执行绑定数据前手动开启事务 123SQLiteTool.shareInstance.beginTransaction() for _ in 0..&lt;10000 &#123; 在重置准备语句后手动关闭事务 12345 // 4. 重置\"准备语句\" sqlite3_reset(stmt)&#125;SQLiteTool.shareInstance.commitTransaction() 16-代码实现-事务概念 事务（Transaction）是并发控制的单位，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位。通过事务，可以将逻辑相关的一组操作绑定在一起，保持数据的完整性。 事务通常是以BEGIN TRANSACTION开始，以COMMIT TRANSACTION或ROLLBACK TRANSACTION结束。 小试牛刀 在工具类方法中添加一个rollbackTransaction的方法 1234func rollBackTransaction() -&gt; () &#123; let sql = \"rollback transaction\" excuteSql(sql)&#125; 在学生类中增加一个更新分数的方法 1234class func updateScore(sql : String) -&gt; Bool &#123; return SQLiteTool.shareInstance.excuteSql(sql) &#125; 在点击屏幕时做操作,当两个操作都完成时才会commit,否则rollback 12345678910111213override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) &#123; SQLiteTool.shareInstance.beginTransaction() let result1 = Student.updateScore(\"update t_stu set score = score - 9 where name = 'liuwei'\") let result2 = Student.updateScore(\"update t_stu set score = score + 9 where name = 'wenxiaoli'\") if result1 &amp;&amp; result2 &#123; SQLiteTool.shareInstance.commitTransaction() &#125;else&#123; SQLiteTool.shareInstance.rollbackTransaction() &#125;&#125; 17-代码实现DQL语句方式1: sqlite3_exec 作用: 可以通过回调来获取结果, 步骤相对来说简单, 结果数据类型没有特定类型(id) 1234567891011121314151617181920212223242526272829303132class func queryAll() -&gt; () &#123; let sql = \"select * from t_stu\" // 参数1: 一个已经打开的数据库 // 参数2: sql字符串 // 参数3: 回调 (一般存放查询的结果集) // 参数1: 参数4的值 // 参数2: 列的个数 // 参数3: 值(字符串)的数组 // 参数4: 列名(字符串)组成的数组 // 返回值: 0 继续查询, 非零, 终止查询 // 参数4: 参数3的参数1 // 参数5: 错误信息 let db = SQLiteTool.shareInstance.db sqlite3_exec(db, sql, &#123; (param, columnCount, values, columnNames) -&gt; Int32 in let count = Int(columnCount) for i in 0..&lt;count &#123; let columName = columnNames[i] let columnNameStr = String(CString: columName, encoding: NSUTF8StringEncoding) let value = values[i] let valueStr = String(CString: value, encoding: NSUTF8StringEncoding) print(columnNameStr, valueStr) &#125; return 0 &#125;, nil, nil)&#125; 方式2: 通过”准备语句” 作用: 可以处理不同特定类型, 步骤相对来说复杂 步骤: 预处理函数 获取”准备语句” 不断执行”准备语句”, 直到无结果集 获取列的类型 根据每列的类型取出不同的值 释放资源 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class func queryAllStmt() -&gt; () &#123; let sql = \"select * from t_stu\" // 准备语句操作流程 // 1. 创建\"准备语句\" let db = SQLiteTool.shareInstance.db var stmt: COpaquePointer = nil if sqlite3_prepare_v2(db, sql, -1, &amp;stmt, nil) != SQLITE_OK &#123; print(\"预处理失败\") return &#125; // 2. 绑定数据(这一步可以省略) // 3. 执行SQLITE_DONE 适用于删除, 或者更新, 或者插入 // 查询不是使用这个标志 // 有一个指针, 指向当前的记录, 当没执行一次,这个方法, 都会查询下一条还有没有数据, 如果有, 返回值是SQLITE_ROW, 并且, 把查询的结果放到\"准备语句里面\", 所以, 如果想要获取一行里面的数据, 应该从\"准备语句里面获取\" while sqlite3_step(stmt) == SQLITE_ROW &#123; // 遍历一行的每一列 // 1. 获取总共有多少列 let count = sqlite3_column_count(stmt) // 2. 遍历每一列 for i in 0..&lt;count &#123; // 2.1 获取列的名称 // 参数1: 准备语句 // 参数2: 索引 // UnsafePointer&lt;Int8&gt; let columnName = sqlite3_column_name(stmt, i) let columnNameStr = String(CString: columnName, encoding: NSUTF8StringEncoding) print(columnNameStr) // 2.2 获取列的数值 // 不同的数据类型, 应该使用不同的函数进行获取 // 2.2.1 获取列的类型 let type = sqlite3_column_type(stmt, i) // 2.2.2 根据不同的类型, 使用不同的函数, 进行获取响应的值 if type == SQLITE_INTEGER &#123; let value = sqlite3_column_int(stmt, i) print(value) &#125; if type == SQLITE_FLOAT &#123; let value = sqlite3_column_double(stmt, i) print(value) &#125; if type == SQLITE_TEXT &#123; // UnsafePointer&lt;UInt8&gt; let value = UnsafePointer&lt;CChar&gt;(sqlite3_column_text(stmt, i)) // UnsafePointer&lt;CChar&gt; let valueStr = String(CString: value, encoding: NSUTF8StringEncoding) print(valueStr) &#125; &#125; &#125; // 4. 重置(这一步可以省略) // 5. 释放资源&#125; 18-FMDB基本使用1. 什么是FMDB? FMDB是iOS平台的SQLite数据库框架 FMDB以OC的方式封装了SQLite的C语言API 2. FMDB有什么优势? 使用起来更加面向对象，省去了很多麻烦、冗余的C语言代码 提供了多线程安全的数据库操作方法，有效地防止数据混乱 3. 安装方式 Cocoapods 手动集成(swift) 导入FMDB文件 导入系统依赖库sqlite3.0.tbd 建立桥接文件, 并导入需要的头文件 核心类 FMDatabase 一个FMDatabase对象就代表一个单独的SQLite数据库 用来执行SQL语句 FMResultSet 使用FMDatabase执行查询后的结果集 FMDatabaseQueue 用于在多线程中执行多个查询或更新，它是线程安全的 使用步骤 打开数据库 通过指定SQLite数据库文件路径来创建FMDatabase对象 文件路径有三种情况 具体文件路径:如果不存在会自动创建 空字符串@””:会在临时目录创建一个空的数据库,当FMDatabase连接关闭时，数据库文件也被删除 nil:会创建一个内存中临时数据库，当FMDatabase连接关闭时，数据库会被销毁 FMDatabase *db = [FMDatabase databaseWithPath:path]; if ([db open]) { NSLog(@”打开成功!”); } 1234567891011121314151617 static let shareInstance = FMDBTool()lazy var db: FMDatabase = &#123; // 1. 创建或者打开一个数据库 let path = \"/Users/xiaomage/Desktop/fmdb/demo.sqlite\" let db = FMDatabase(path: path) return db&#125;()override init() &#123; super.init() if db.open() &#123; print(\"数据库打开成功\") &#125; &#125; 执行更新 在FMDB中，除查询以外的所有操作，都称为“更新”:create、drop、insert、update、delete等 使用executeUpdate:方法执行更新: (BOOL)executeUpdate:(NSString*)sql, … (BOOL)executeUpdateWithFormat:(NSString*)format, … (BOOL)executeUpdate:(NSString)sql withArgumentsInArray:(NSArray )arguments 示例:[db executeUpdate:@”UPDATE t_student SET age = ? WHERE name = ?;”, @20, @”Jack”] 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455func createTable() -&gt; () &#123; let sql = \"create table if not exists t_stu(id integer primary key autoincrement, name text not null, age integer, score real default 60)\" if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"创建表成功\") &#125;else &#123; print(\"失败\") &#125; &#125; func dropTable() -&gt; () &#123; let sql = \"drop table if exists t_stu\" if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"成功\") &#125;else &#123; print(\"失败\") &#125; &#125; func insertStu() -&gt; () &#123; let sql = \"insert into t_stu(name, age, score) values ('zhangsan', 18, 99)\" if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"成功\") &#125;else &#123; print(\"失败\") &#125; &#125; func deleteStu() -&gt; () &#123; let sql = \"delete from t_stu where name = 'zhangsan'\" if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"成功\") &#125;else &#123; print(\"失败\") &#125; &#125; func updateStu() -&gt; () &#123; let sql = \"update t_stu set age = 999 where name = 'zhangsan'\" if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"成功\") &#125;else &#123; print(\"失败\") &#125; &#125; 执行查询 查询方法: (FMResultSet )executeQuery:(NSString)sql, … (FMResultSet )executeQueryWithFormat:(NSString)format, … (FMResultSet )executeQuery:(NSString )sql withArgumentsInArray:(NSArray *)arguments 12345678910func queryAll() -&gt; () &#123; let sql = \"select * from t_stu\" let resultSet = db.executeQuery(sql, withArgumentsInArray: nil) while resultSet.next() &#123; let age = resultSet.intForColumn(\"age\") let name = resultSet.stringForColumn(\"name\") let score = resultSet.doubleForColumn(\"score\") print(age, name, score) &#125;&#125; 关闭数据库 database.close() 19-FMDabaseQueue FMDatabase这个类是线程不安全的，如果在多个线程中同时使用一个FMDatabase实例，会造成数据混乱等问题 为了保证线程安全，FMDB提供方便快捷的FMDatabaseQueue类 FMDatabaseQueue的创建:FMDatabaseQueue *queue = [FMDatabaseQueue databaseQueueWithPath:path]; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140 static let shareInstance = FMDBTool() lazy var queue: FMDatabaseQueue = &#123; let path = \"/Users/xiaomage/Desktop/fmdb/demo.sqlite\" let queue = FMDatabaseQueue(path: path) return queue &#125;() // lazy var db: FMDatabase = &#123;// // 1. 创建或者打开一个数据库// let path = \"/Users/xiaomage/Desktop/fmdb/demo.sqlite\"// let db = FMDatabase(path: path)// return db// &#125;()// override init() &#123; super.init()// if db.open() &#123;// print(\"数据库打开成功\")// &#125; &#125; func createTable() -&gt; () &#123; let sql = \"create table if not exists t_stu(id integer primary key autoincrement, name text not null, age integer, score real default 60)\" queue.inDatabase &#123; (db: FMDatabase!) in if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"创建表成功\") &#125;else &#123; print(\"失败\") &#125; &#125; &#125; func dropTable() -&gt; () &#123; let sql = \"drop table if exists t_stu\" queue.inDatabase &#123; (db: FMDatabase!) in if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"成功\") &#125;else &#123; print(\"失败\") &#125; &#125; &#125; func insertStu() -&gt; () &#123; let sql = \"insert into t_stu(name, age, score) values ('zhangsan', 18, 99)\" queue.inDatabase &#123; (db: FMDatabase!) in if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"成功\") &#125;else &#123; print(\"失败\") &#125; &#125; &#125; func deleteStu() -&gt; () &#123; let sql = \"delete from t_stu where name = 'zhangsan'\" queue.inDatabase &#123; (db: FMDatabase!) in if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"成功\") &#125;else &#123; print(\"失败\") &#125; &#125; &#125; func updateStu() -&gt; () &#123; let sql = \"update t_stu set age = 999 where name = 'zhangsan'\" queue.inDatabase &#123; (db: FMDatabase!) in if db.executeUpdate(sql, withArgumentsInArray: nil) &#123; print(\"成功\") &#125;else &#123; print(\"失败\") &#125; &#125; &#125; func queryAll() -&gt; () &#123; let sql = \"select * from t_stu\" queue.inDatabase &#123; (db: FMDatabase!) in let resultSet = db.executeQuery(sql, withArgumentsInArray: nil) while resultSet.next() &#123; let age = resultSet.intForColumn(\"age\") let name = resultSet.stringForColumn(\"name\") let score = resultSet.doubleForColumn(\"score\") print(age, name, score) &#125; &#125; &#125; func transactionTest() -&gt; () &#123; queue.inTransaction &#123; (db: FMDatabase!, rollback) in let sql = \"update t_stu set score = score + 10 where name = 'zhangsan'\" let sql2 = \"update t_stu set score2 = score - 10 where name = 'lisi'\" let result1 = db.executeUpdate(sql, withArgumentsInArray: nil) let result2 = db.executeUpdate(sql2, withArgumentsInArray: nil) if result1 &amp;&amp; result2 &#123; &#125;else &#123; // 回滚 *rollback = rollback.memory rollback.memory = true &#125; &#125; &#125; func stamentsTest() -&gt; () &#123; let sql = \"insert into t_stu(name, age, score) values ('zhangsan3', 18, 99);insert into t_stu(name, age, score) values ('zhangsan2', 18, 99);\" queue.inDatabase &#123; (db) in db.executeStatements(sql) &#125; &#125;","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"UITableView的几个重要属性","slug":"UITableView的几个重要属性","date":"2014-09-04T02:56:34.000Z","updated":"2017-11-20T03:21:01.000Z","comments":true,"path":"2014/09/04/UITableView的几个重要属性/","link":"","permalink":"//aolliu.win/2014/09/04/UITableView的几个重要属性/","excerpt":"一.什么是tableView的内容(content)? 内容包括以下3个部分:除这三个之外都不是tableview的内容,例如给tableview添加个子控件UIView,这个view就不是tableview的内容 1.Cell 2.tableHeaderView\\tableFooterView 3.sectionHeader\\sectionFooter 二.contentSize.height 内容的高度","text":"一.什么是tableView的内容(content)? 内容包括以下3个部分:除这三个之外都不是tableview的内容,例如给tableview添加个子控件UIView,这个view就不是tableview的内容 1.Cell 2.tableHeaderView\\tableFooterView 3.sectionHeader\\sectionFooter 二.contentSize.height 内容的高度 三.contentOffset.y 内容的偏移量(frame的顶部 - content的顶部) 四.contentInset 内容周围的间距(内边距)注意:是内容四周的间距 五.Frame 1.frame.size.height : 矩形框的高度 2.frame : 以父控件内容的左上角为坐标原点注意:子控件添加都是添加到父控件的内容上 具体情况分析如下: 什么也没有的情况 只有headerView和footerView的情况 只有cell的情况 有cell和contentinset的情况 有cell和headerView和footerView情况 有cell和headerView和footerView也有contentinset 下面将会引入子控件,注意子控件是相对于父控件的内容来添加的 有cell,有content inset,有子控件 有cell,有footerView/headerview,有子控件 有cell,有footerView/headview,有contentinset,有子控件","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"UIButton","slug":"UIButton","date":"2014-08-22T11:35:20.000Z","updated":"2017-11-20T03:19:51.000Z","comments":true,"path":"2014/08/22/UIButton/","link":"","permalink":"//aolliu.win/2014/08/22/UIButton/","excerpt":"说说UIButton的几种常见的状态:高亮状态(UIControlStateHighlighted): 就是用户长按住按钮不松开,或者在代码中设置了按钮的属性highlighted = YES; 如何知道按钮是不是高亮状态? 其实本质是一个方法-(BOOL)isHighlighted这个方法是本质,看他返回什么,如果你自定义button,重写了这个方法设置了返回时YES,一定是高亮状态,如果设置了为NO,那么就算在外面设置了highlighted = YES;也不是高亮状态.","text":"说说UIButton的几种常见的状态:高亮状态(UIControlStateHighlighted): 就是用户长按住按钮不松开,或者在代码中设置了按钮的属性highlighted = YES; 如何知道按钮是不是高亮状态? 其实本质是一个方法-(BOOL)isHighlighted这个方法是本质,看他返回什么,如果你自定义button,重写了这个方法设置了返回时YES,一定是高亮状态,如果设置了为NO,那么就算在外面设置了highlighted = YES;也不是高亮状态. 在开发中有时候我们需要取消按钮的高亮状态,可以通过两个方法来实现: 1.重写set highlight方法 ,在这个方法中什么也不做,覆盖系统的做法 2,重写is highlight方法返回NO 不可用(UIControlStateDisabled ): 设置按钮属性enable = NO; 按钮不会接受点击的事件enabled = NO; 状态变为disableduserinteractionEnabled = NO;按钮不能点击了 但是不会改变按钮的状态 选中状态(UIControlStateSelected): 设置按钮的属性selected = YES; 按钮可以接受点击事件 普通状态(UIControlStateNormal):最值得注意 看是这个状态没有什么,再普通不过了,但是却不是这样的,如果你同时设置了按钮的状态为选中状态和不可用状态,其实按钮不会按你设置的那样真的选中再不可用,而是普通状态(UIControlStateNormal),所以UIControlStateNormal是除开前面3中以外的状态 比如两个状态同时设置","categories":[],"tags":[{"name":"iOS开发","slug":"iOS开发","permalink":"//aolliu.win/tags/iOS开发/"},{"name":"OC","slug":"OC","permalink":"//aolliu.win/tags/OC/"}]},{"title":"VPN","slug":"VPN","date":"2014-08-19T06:48:00.000Z","updated":"2017-11-17T11:32:41.000Z","comments":true,"path":"2014/08/19/VPN/","link":"","permalink":"//aolliu.win/2014/08/19/VPN/","excerpt":"VPN简介 VPN的英文全称是“Virtual Private Network”，翻译过来就是“虚拟专用网络”。VPN是通过特殊的加密的通讯协议在连接在互联网上的位于不同地方的两个或多个内部网之间建立一条专有的通讯线路，通常的VPN都是企业内部使用或者商业收费的，其价格相对于SSH来说较高一些，但也有免费的VPN可以使用。 VPN可以在公用的互联网建立一个安全的连接，达到安全使用互联网的目的，VPN（虚拟专用网）可以帮助远程用户、公司分支机构、商业伙伴及供应商同公司的内部网建立可信的安全连接，并保证数据的安全传输，在大型企业（尤其是外资企业）中应用非常广泛。","text":"VPN简介 VPN的英文全称是“Virtual Private Network”，翻译过来就是“虚拟专用网络”。VPN是通过特殊的加密的通讯协议在连接在互联网上的位于不同地方的两个或多个内部网之间建立一条专有的通讯线路，通常的VPN都是企业内部使用或者商业收费的，其价格相对于SSH来说较高一些，但也有免费的VPN可以使用。 VPN可以在公用的互联网建立一个安全的连接，达到安全使用互联网的目的，VPN（虚拟专用网）可以帮助远程用户、公司分支机构、商业伙伴及供应商同公司的内部网建立可信的安全连接，并保证数据的安全传输，在大型企业（尤其是外资企业）中应用非常广泛。 VPN设置使用方法 在“网上邻居”属性中，点“新建连接向导”，选择“连接到我的工作场所的网络”，下一步选择“虚拟专用网络连接（VPN）”，公司名随便写，下一步“不拨初始连接”，接下来的主机名(地址)，输入主机地址后完成VPN创建，用户、密码选择为自己的帐号密码，例如：主机 m.erights.net，用户 mpuff，密码 mpuff。 在“网络连接”里双击这个VPN，此时会弹出一个连接VPN的用户登录窗口，输入你的VPN帐号和密码，并点击“连接”。连接成功后会在屏幕右下角的任务栏会有一个VPN连接的图标，这时就可以用VPN连接来上网了。 需要注意的是，VPN的主机如果被封了之后，用户将无法通过原有VPN上网，需要修改新的主机、用户名、密码才能继续使用VPN，本文将长期更新，列出可访问的VPN地址和帐号，如果以上帐号无法使用，请试用以下的VPN帐号。 对于有一定技术能力的用户来说，还可以购买一个VPS（Virtual Private Server 虚拟专用服务器），然后手动在上面安装pptp或l2tp等协议，就可以手动建立多个VPN帐号，这样对于用户来说，既可以自己上网用，还可以在上面做网站挣钱，一举两得。 iOS手机VPN设置 1，点击手机中的设置-通用-VPN-添加VPN设置； 2，添加VPN地址、VPN帐号和VPN密码； 3，点击存储，打开VPN开关，看到手机顶部显示有VPN字样就代表连上啦。 Android手机VPN设置 1，点击设置-更多； 2，点击VPN，选择右上角的加号添加VPN； 3，添加VPN地址、VPN帐号和VPN密码；名称随便填，服务器地址就是在VPN所找到的服务器主机名或者IP地址，填好后点保存；点击刚刚保存的VPN，弹出菜单，填写用户名和密码，勾选保存账户信息，点击连接； 4，左上角出现一个钥匙标记也表明vpn连接成功了，点击刚刚的vpn账号可以随时断开连接，长按则可以修改刚刚的设置。","categories":[],"tags":[{"name":"Quote","slug":"Quote","permalink":"//aolliu.win/tags/Quote/"}]}]}